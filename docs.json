{
  "openapi": "3.0.1",
  "info": {
    "title": "iikoCloud API",
    "description": "<h3>Description of common data formats:</h3><b>uuid</b> - string in UUID(universally unique identifier).<br/>Examples: <i>550e8400-e29b-41d4-a716-446655440000, b090de0b-8550-6e17-70b2-bbba152bcbd3</i><br/><br/><b>date-time</b> - date and time string in custom string format <b>yyyy-MM-dd HH:mm:ss.fff</b>.<br/>Examples: <i>2017-04-29 20:45:00.000, 2018-01-01 01:01:30.123</i>",
    "version": "1.0.0",
    "x-logo": {
      "url": "/docs/logo"
    }
  },
  "paths": {
    "/api/1/regions": {
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Regions.",
        "description": "\n\n > Restriction group: `Data: geo`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.RegionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.RegionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cities": {
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Cities.",
        "description": "\n\n > Restriction group: `Data: geo`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.CitiesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.CitiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/streets/by_city": {
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Streets by city.",
        "description": "\n\n > Restriction group: `Data: geo`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.StreetsByCityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.StreetsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/streets/by_id": {
      "post": {
        "tags": [
          "Addresses"
        ],
        "summary": "Streets by id or by classifierId.",
        "description": "\n\n > Restriction group: `Data: geo`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.StreetsByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.StreetsByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/access_token": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Retrieve session key for API user.",
        "parameters": [
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Auth.GetAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Auth.GetAccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/available_organizations": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Returns all organizations of current account (determined by Authorization request header) for which banquet/reserve booking are available.",
        "description": "\n\n > Allowed from version `7.1.5`.\n\n > Restriction group: `Orders: preparing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/available_terminal_groups": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Returns all terminal groups of specified organizations, for which banquet/reserve booking are available.",
        "description": "\n\n > Allowed from version `7.1.5`.\n\n > Restriction group: `Orders: preparing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.GetTerminalGroupsByOrganizationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/available_restaurant_sections": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Returns all restaurant sections of specified terminal groups, for which banquet/reserve booking are available.",
        "description": "\n\n > Allowed from version `7.1.5`.\n\n > Restriction group: `Orders: preparing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/restaurant_sections_workload": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Returns all banquets/reserves for passed restaurant sections.",
        "description": "\n\n > Allowed from version `7.1.5`.\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsWorkloadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsWorkloadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/create": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Create banquet/reserve.",
        "description": "\n\n > Allowed from version `7.1.5`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: creating`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.CreateReserveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReserveResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/status_by_id": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Retrieve banquets/reserves statuses by IDs.",
        "description": "\n\n > Allowed from version `7.1.5`.\n\n > Restriction group: `Orders: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReservesByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReservesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/add_items": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Add order items.",
        "description": "Available only for banquets.\n\n > Allowed from version `8.2.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.AddOrderItemsToBanquetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/cancel": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Cancel reservation due to some reason.",
        "description": "Available only for reserves with status 'New'.\n\n > Allowed from version `8.2.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order status: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.CancelReserveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/add_payments": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Add order payments.",
        "description": "Available only for banquets.\n\n > Allowed from version `8.2.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order payments: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.AddOrderPaymentsToBanquetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/change_tables": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Change reserve/banquet tables.",
        "description": "\n\n > Allowed from version `9.0.5`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ChangeReserveTablesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/change_items": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Change order items.",
        "description": "Available only for banquets.\n\n > Allowed from version `9.0.5`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ChangeBanquetOrderItemsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/reserve/change_estimated_start_time": {
      "post": {
        "tags": [
          "Banquets/reserves"
        ],
        "summary": "Change reserve/banquet estimated start time.",
        "description": "\n\n > Allowed from version `9.0.5`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ChangeReserveEstimatedStartTimeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/create": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Create delivery.",
        "description": "\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: creating`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.OrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/change_external_data": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Change delivery external data.",
        "description": "\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeExternalDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/update_order_problem": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Update order problem.",
        "description": "\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order status: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderProblemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/update_order_payments": {
      "post": {
        "tags": [
          "Deliveries: Create and update",
          "Deprecated"
        ],
        "summary": "Update order payment details.",
        "description": "> Deprecated, use `api/1/deliveries/change_payments` method instead.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Deprecated`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderPaymentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/1/deliveries/update_order_delivery_status": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Update delivery status.",
        "description": "\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order status: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateDeliveryStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/update_order_courier": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Update order courier.",
        "description": "\n\n > Allowed from version `7.1.5`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order driver: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderCourierRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/1/deliveries/add_items": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Add order items.",
        "description": "\n\n > Allowed from version `7.4.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.AddOrderItemsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/close": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Close order.",
        "description": "> Before version `8.0.6` it's possible to close deliveries with `DeliveryByClient`\r\norderServiceType only, starting from version `8.0.6` it's also possible to close\r\n`DeliveryByCourier` deiveries in the DeliveryStatus `OnWay` or `Delivered` .\n\n > Allowed from version `7.4.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order status: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CloseDeliveryOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/cancel": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Cancel delivery order.",
        "description": "\n\n > Allowed from version `7.5.4`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order status: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CancelOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/change_complete_before": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Change time when client wants the order to be delivered.",
        "description": "\n\n > Allowed from version `7.5.4`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeCompleteBeforeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/change_delivery_point": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Change order's delivery point information.",
        "description": "\n\n > Allowed from version `7.5.4`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryPointRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/change_service_type": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Change order's delivery type.",
        "description": "\n\n > Allowed from version `7.5.4`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/change_payments": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Change order's payments.",
        "description": "> Method will fail if there are any processed payments in the order.\r\n> If all payments in the order are unprocessed they will be removed and replaced with new ones.\n\n > Allowed from version `7.6.3`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order payments: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangePaymentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/change_comment": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Change delivery comment.",
        "description": "\n\n > Allowed from version `7.6.1`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryCommentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/print_delivery_bill": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Print delivery bill.",
        "description": "\n\n > Allowed from version `7.6.1`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.PrintDeliveryBillRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/confirm": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Confirm delivery.",
        "description": "\n\n > Allowed from version `7.6.1`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order status: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ConfirmDeliveryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/cancel_confirmation": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Cancel delivery confirmation.",
        "description": "\n\n > Allowed from version `7.6.1`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order status: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.CancelDeliveryConfirmationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/change_operator": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Assign/change the order operator.",
        "description": "\n\n > Allowed from version `7.6.1`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryOperatorRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/add_payments": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Add order payments.",
        "description": "\n\n > Allowed from version `8.4.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order payments: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Orders.Common.AddOrderPaymentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/change_driver_info": {
      "post": {
        "tags": [
          "Deliveries: Create and update"
        ],
        "summary": "Change driver info.",
        "description": "\n\n > Allowed from version `8.6.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order driver: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.ChangeDriverInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/by_id": {
      "post": {
        "tags": [
          "Deliveries: Retrieve"
        ],
        "summary": "Retrieve orders by IDs.",
        "description": "\n\n > Restriction group: `Orders: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/by_delivery_date_and_status": {
      "post": {
        "tags": [
          "Deliveries: Retrieve"
        ],
        "summary": "Retrieve list of orders by statuses and dates.",
        "description": "\n\n > Restriction group: `Orders: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/by_revision": {
      "post": {
        "tags": [
          "Deliveries: Retrieve"
        ],
        "summary": "Retrieve list of orders changed from the time revision was passed.",
        "description": "\n\n > Restriction group: `Orders: receiving by revision`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByRevisionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/by_delivery_date_and_phone": {
      "post": {
        "tags": [
          "Deliveries: Retrieve"
        ],
        "summary": "Retrieve list of orders by telephone number, dates and revision.",
        "description": "\n\n > Restriction group: `Orders: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndPhoneRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/by_delivery_date_and_source_key_and_filter": {
      "post": {
        "tags": [
          "Deliveries: Retrieve"
        ],
        "summary": "Search orders by search text and additional filters (date, problem, statuses and other).",
        "description": "\n\n > Restriction group: `Orders: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndFilterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/history/by_delivery_date_and_phone": {
      "post": {
        "tags": [
          "Deliveries: Retrieve"
        ],
        "summary": "Retrieve list of history orders by telephone number, dates and revision.",
        "description": "\n\n > Restriction group: `Orders: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersHistoryByDeliveryDateAndPhoneRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/delivery_restrictions": {
      "post": {
        "tags": [
          "Delivery restrictions"
        ],
        "summary": "Retrieve list of delivery restrictions.",
        "description": "\n\n > Allowed from version `6.4.16`.\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.GetDeliveryRestrictionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.GetDeliveryRestrictionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/delivery_restrictions/allowed": {
      "post": {
        "tags": [
          "Delivery restrictions"
        ],
        "summary": "Get suitable terminal groups for delivery restrictions.",
        "description": "\n\n > Allowed from version `6.4.16`.\n\n > Restriction group: `Orders: preparing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.GetAllowedRestrictionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.GetAllowedRestrictionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/check_create": {
      "post": {
        "tags": [
          "Deprecated"
        ],
        "summary": "Check create delivery.",
        "description": "> Deprecated, all checks are available in `api/1/deliveries/create`.\n\n > Restriction group: `Deprecated`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.CheckCreateOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/1/organizations": {
      "get": {
        "tags": [
          "Deprecated"
        ],
        "summary": "Returns organizations available to api-login user.",
        "description": "> Deprecated, use `POST api/1/organizations`.\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.GetSimpleOrganizationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Returns organizations available to api-login user.",
        "description": "\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/cancel_causes": {
      "post": {
        "tags": [
          "Dictionaries"
        ],
        "summary": "Delivery cancel causes.",
        "description": "\n\n > Allowed from version `7.7.1`.\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.CancelCauses.CancelCausesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.CancelCauses.CancelCausesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/order_types": {
      "post": {
        "tags": [
          "Dictionaries"
        ],
        "summary": "Order types.",
        "description": "\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.OrderTypes.OrderTypesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.OrderTypes.OrderTypesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/discounts": {
      "post": {
        "tags": [
          "Dictionaries"
        ],
        "summary": "Discounts / surcharges.",
        "description": "\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Discounts.DiscountsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Discounts.DiscountsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/payment_types": {
      "post": {
        "tags": [
          "Dictionaries"
        ],
        "summary": "Payment types.",
        "description": "\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/removal_types": {
      "post": {
        "tags": [
          "Dictionaries"
        ],
        "summary": "Removal types (reasons for deletion).",
        "description": "\n\n > Allowed from version `7.5.3`.\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalTypesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalTypesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/tips_types": {
      "post": {
        "tags": [
          "Dictionaries"
        ],
        "summary": "Get tips types for api-login`s rms group.",
        "description": "\n\n > Allowed from version `7.7.4`.\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TipsTypes.TipsTypesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/drafts/by_id": {
      "post": {
        "tags": [
          "Drafts"
        ],
        "summary": "Retrieve order draft by ID.",
        "description": "\n\n > Restriction group: `Drafts: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.GetDraftRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.GetDraftResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/drafts/by_filter": {
      "post": {
        "tags": [
          "Drafts"
        ],
        "summary": "Retrieve order drafts list by parameters.",
        "description": "\n\n > Restriction group: `Drafts: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.FilterDraftsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.FilterDraftsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/drafts/create": {
      "post": {
        "tags": [
          "Drafts"
        ],
        "summary": "Create delivery order draft.",
        "description": "\n\n > Restriction group: `Drafts: creating`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.CreateDraftRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.CreateOrSaveDraftResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/drafts/save": {
      "post": {
        "tags": [
          "Drafts"
        ],
        "summary": "Update existing delivery order draft.",
        "description": "\n\n > Restriction group: `Drafts: creating`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.SaveDraftRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.CreateOrSaveDraftResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/drafts/commit": {
      "post": {
        "tags": [
          "Drafts"
        ],
        "summary": "Admit order draft changes and send them to Front.",
        "description": "\n\n > Restriction group: `Drafts: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.CommitDraftRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.OrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/drafts/delete": {
      "post": {
        "tags": [
          "Drafts"
        ],
        "summary": "Delete order draft.",
        "description": "\n\n > Restriction group: `Drafts: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.DeleteDraftRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/drafts/lock": {
      "post": {
        "tags": [
          "Drafts"
        ],
        "summary": "Lock order draft.",
        "description": "\n\n > Restriction group: `Drafts: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.LockOrUnlockDraftRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/deliveries/drafts/unlock": {
      "post": {
        "tags": [
          "Drafts"
        ],
        "summary": "Unlock order draft.",
        "description": "\n\n > Restriction group: `Drafts: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.LockOrUnlockDraftRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/couriers/locations/by_time_offset": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Method of obtaining drivers' coordinates history.",
        "description": "\n\n > Restriction group: `Drivers: location`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.CourierLocationsByTimeOffsetRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.CourierLocationsByTimeOffsetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/couriers": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Returns list of all employees which are delivery drivers in specified restaurants.",
        "description": "\n\n > Restriction group: `Drivers: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.CouriersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.EmployeesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/couriers/by_role": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Returns list of all employees which are delivery drivers in specified restaurants, \r\nand checks whether each employee has passed role.",
        "description": "\n\n > Restriction group: `Drivers: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.CouriersAndCheckRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.EmployeesWithRoleSignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/couriers/active_location/by_terminal": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Returns list of all active (courier session is opened) courier's locations which are delivery drivers in specified \r\nrestaurant and are clocked in on specified delivery terminal.",
        "description": "\n\n > Restriction group: `Drivers: location`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsByTerminalGroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/couriers/active_location": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Returns list of all active (courier session is opened) courier's locations which are delivery drivers \r\nin specified restaurants.",
        "description": "\n\n > Restriction group: `Drivers: location`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.CouriersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/info": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Returns employee info.",
        "description": "\n\n > Restriction group: `Employees: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.EmployeeInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.EmployeeInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/shift/clockin": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Open personal session.",
        "description": "\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Employees: shifts`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.OpenPersonalSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.ChangePersonalSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/shift/clockout": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Close personal session.",
        "description": "\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Employees: shifts`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.ClosePersonalSessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.ChangePersonalSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/shift/is_open": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Check if personal session is open.",
        "description": "\n\n > Restriction group: `Employees: shifts`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.GetPersonalSessionInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.GetPersonalSessionInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/employees/shifts/by_courier": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Get terminal groups where employee session is opened.",
        "description": "\n\n > Restriction group: `Employees: shifts`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.GetTerminalGroupsOfEmployeeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.GetTerminalGroupsOfEmployeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/marketing_sources": {
      "post": {
        "tags": [
          "Marketing sources"
        ],
        "summary": "Marketing sources.",
        "description": "\n\n > Allowed from version `7.2.5`.\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSourcesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSourcesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/nomenclature": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Menu.",
        "description": "> Sourced from RMS Data Exchange Export menu.\n\n > Restriction group: `Data: menu`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.NomenclatureRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.NomenclatureResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/2/menu": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "External menus with price categories.",
        "description": "\n\n > Restriction group: `Data: menu`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.MenusDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/2/menu/by_id": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Retrieve external menu by ID.",
        "description": "> Sourced from Web External menu.\n\n > Restriction group: `Data: menu`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.MenuRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalMenuPreset"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/stop_lists": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Out-of-stock items.",
        "description": "\n\n > Restriction group: `Data: stoplists`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.StopListsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.StopListsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/stop_lists/check": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Check items in out-of-stock list.",
        "description": "\n\n > Restriction group: `Orders: creating`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.CheckStopListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.CheckStopListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/stop_lists/add": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Add items to out-of-stock list.\r\n(You should have extra rights to use this method).",
        "description": "\n\n > Allowed from version `8.6.1`.\n\n > Restriction group: `Data: changing stoplists`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.AddProductsToStopListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/stop_lists/remove": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Remove items from out-of-stock list.\r\n(You should have extra rights to use this method).",
        "description": "\n\n > Allowed from version `8.6.1`.\n\n > Restriction group: `Data: changing stoplists`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.RemoveProductsFromStopListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/stop_lists/clear": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Clear out-of-stock list.\r\n(You should have extra rights to use this method).",
        "description": "\n\n > Allowed from version `8.6.1`.\n\n > Restriction group: `Data: changing stoplists`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.ClearStopListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/notifications/send": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Send notification to external systems.",
        "description": "\n\n > Restriction group: `Notifications`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Notifications.SendNotificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/commands/status": {
      "post": {
        "tags": [
          "Operations"
        ],
        "summary": "Get status of command.",
        "description": "> Response code `410` means that the correlationId value specified in the method is no longer supported.\r\nPlease do not request methods that include such a value.\n\n > Restriction group: `Commands`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "410": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/create": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create order.",
        "description": "\n\n > Allowed from version `7.4.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: creating`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.CreateTableOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/by_id": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve orders by IDs.",
        "description": "\n\n > Allowed from version `7.4.6`.\n\n > Restriction group: `Orders: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.GetTableOrdersByIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrdersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/by_table": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve orders by tables.",
        "description": "\n\n > Allowed from version `7.4.6`.\n\n > Restriction group: `Orders: receiving`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.GetTableOrdersByTableRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrdersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/add_items": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add order items.",
        "description": "\n\n > Allowed from version `7.4.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.AddItemsToTableOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/close": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Close order.",
        "description": "\n\n > Allowed from version `7.4.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order status: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CloseTableOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/cancel": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel the table order.",
        "description": "\n\n > Allowed from version `9.0.5`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CancelTableOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/change_payments": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Change table order's payments.",
        "description": "> Method will fail if there are any processed payments in the order.\r\n> If all payments in the order are unprocessed they will be removed and replaced with new ones.\n\n > Allowed from version `7.7.4`.\n\n > Restriction group: `Order payments: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangePaymentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/change_external_data": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Change table order external_data.",
        "description": "\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeExternalDataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/init_by_table": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Init orders, created on POS, by tables.",
        "description": "\n\n > Allowed from version `7.7.1`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: loading data`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.InitTableOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/init_by_posOrder": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Init orders, created on POS, by POS orders.",
        "description": "\n\n > Allowed from version `7.7.1`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: loading data`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.InitTableOrderByPosOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/add_customer": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add customer to order.",
        "description": "\n\n > Allowed from version `7.7.1`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Orders: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.AddCustomerToTableOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/order/add_payments": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add order payments.",
        "description": "\n\n > Allowed from version `8.2.6`.\n\n > This method is a command. Use `api/1/commands/status` method to get the progress status.\n\n > Restriction group: `Order payments: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Orders.Common.AddOrderPaymentsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/organizations/settings": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "Returns available to api-login user organizations specified settings.",
        "description": "\n\n > Restriction group: `Organizations: settings`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.OrganizationsSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.OrganizationsSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/terminal_groups": {
      "post": {
        "tags": [
          "Terminal groups"
        ],
        "summary": "Method that returns information on groups of delivery terminals.",
        "description": "\n\n > Restriction group: `Data: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/terminal_groups/is_alive": {
      "post": {
        "tags": [
          "Terminal groups"
        ],
        "summary": "Returns information on availability of group of terminals.",
        "description": "\n\n > Restriction group: `POS: availability`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsIsAliveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsIsAliveResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/terminal_groups/awake": {
      "post": {
        "tags": [
          "Terminal groups"
        ],
        "summary": "Awake terminal groups from sleep mode.",
        "description": "\n\n > Restriction group: `Organizations: settings`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.AwakeTerminalGroupsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.AwakeTerminalGroupsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/webhooks/settings": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get webhooks settings for specified organization and authorized API login.",
        "description": "\n\n > Restriction group: `Organizations: settings`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.GetWebHookSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.GetWebHookSettingsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/webhooks/update_settings": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update webhooks settings for specified organization and authorized API login.",
        "description": "\n\n > Restriction group: `WebHooks: settings`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.UpdateWebHookSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/info": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Get customer info.",
        "description": "Get customer info by specified criterion.\n\n > Restriction group: `Guests: info`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/calculate": {
      "post": {
        "tags": [
          "Discounts and promotions"
        ],
        "summary": "Calculate checkin.",
        "description": "Calculate discounts and other loyalty items for an order.\n\n > Restriction group: `Loyalty: order calculate`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateCheckinRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateCheckinResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/combo": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Get combos info",
        "description": "Get all organization's combos.\n\n > Restriction group: `Data: menu`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCombosInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCombosInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/combo/calculate": {
      "post": {
        "tags": [
          "Menu"
        ],
        "summary": "Calculate combo price",
        "description": "Make combo price calculation.\n\n > Restriction group: `Loyalty: order calculate`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateComboPriceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateComboPriceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/manual_condition": {
      "post": {
        "tags": [
          "Discounts and promotions"
        ],
        "summary": "Get manual conditions.",
        "description": "Get all organization's manual conditions.\n\n > Restriction group: `Loyalty: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Common.GetByOrganizationIdRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetManualConditionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer_category": {
      "post": {
        "tags": [
          "Customer categories"
        ],
        "summary": "Get customer categories.",
        "description": "Get all organization's customer categories.\n\n > Restriction group: `Loyalty: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCategoriesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/create_or_update": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create or update customer.",
        "description": "Create or update customer info by id or phone or card track.\n\n > Restriction group: `Guests: creating`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.CreateOrUpdateCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.CreateOrUpdateCustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/delete_customers": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Logical deletion of customers.",
        "description": "Mark customers as deleted.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteCustomersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteCustomersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/restore_customers": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Logical recovery of customers.",
        "description": "Removing deletion flags for customers.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.RestoreCustomersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.RestoreCustomersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer_category/add": {
      "post": {
        "tags": [
          "Customer categories"
        ],
        "summary": "Add category for customer.",
        "description": "Add specified category for customer.\n\n > Restriction group: `Guests: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer_category/remove": {
      "post": {
        "tags": [
          "Customer categories"
        ],
        "summary": "Remove category for customer.",
        "description": "Remove specified category for customer.\n\n > Restriction group: `Guests: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/check_sms_sending_possibility": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Check sms sending possibility.",
        "description": "Check sms sending possibility before send sms message.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.SmsSendingPossibilityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.SmsSendingPossibilityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/message/send_sms": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send sms.",
        "description": "Send sms message to specified phone number. Sending proceed according iikoCard organization's settings.\n\n > Restriction group: `Loyalty: messages`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.SendSmsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.SendSmsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/check_sms_status": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Check SMS status.",
        "description": "Check the status of sending SMS messages.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.CheckSmsStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.CheckSmsStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/message/send_email": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send email.",
        "description": "Send email message to specified email address. Sending proceed according iikoCard organization's settings.\n\n > Restriction group: `Loyalty: messages`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.SendEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.SendEmailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/program": {
      "post": {
        "tags": [
          "Discounts and promotions"
        ],
        "summary": "Get programs.",
        "description": "Get all loyalty programs for organization.\n\n > Restriction group: `Loyalty: dictionaries`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.GetProgramsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.GetProgramsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/program/add": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Add customer to program.",
        "description": "Add new customer for program.\n\n > Restriction group: `Guests: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddCustomerToProgramRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddCustomerToProgramResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/card/add": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Add card.",
        "description": "Add new card for customer.\n\n > Restriction group: `Guests: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddMagnetCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddMagnetCardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/card/remove": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete card.",
        "description": "Delete existing card for customer.\n\n > Restriction group: `Guests: changing`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteMagnetCardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteMagnetCardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/wallet/hold": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Hold money.",
        "description": "Hold customer's money in loyalty program. Payment will be process on POS during processing of an order.\n\n > Restriction group: `Loyalty: wallets`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.HoldMoneyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.HoldMoneyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/wallet/cancel_hold": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Cancel hold money.",
        "description": "Cancel holding transaction that created earlier.\n\n > Restriction group: `Loyalty: wallets`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.CancelHoldMoneyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.CancelHoldMoneyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/wallet/topup": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Refill balance.",
        "description": "Refill customer balance.\n\n > Restriction group: `Loyalty: wallets`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeUserBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.RefillUserBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/wallet/chargeoff": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Withdraw balance.",
        "description": "Withdraw customer balance.\n\n > Restriction group: `Loyalty: wallets`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeUserBalanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.WithdrawUserBalanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/get_counters": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Get counters.",
        "description": "Get customer orders count and sum for different period.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCountersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCountersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/coupons/info": {
      "post": {
        "tags": [
          "Discounts and promotions"
        ],
        "summary": "Get coupon info.",
        "description": "Get information about the specified coupon.\n\n > Restriction group: `Loyalty: coupons`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/coupons/series": {
      "post": {
        "tags": [
          "Discounts and promotions"
        ],
        "summary": "Get coupon series with non-activated coupons.",
        "description": "Get a list of coupon series in which there are not deleted and not activated coupons.\n\n > Restriction group: `Loyalty: coupons`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCouponsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCouponsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/coupons/by_series": {
      "post": {
        "tags": [
          "Discounts and promotions"
        ],
        "summary": "Get non-activated coupons",
        "description": "Get list of non-activated coupons.\n\n > Restriction group: `Loyalty: coupons`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCouponRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCouponResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/transactions/by_revision": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Get transaction report by revision.",
        "description": "Get transaction report for specified customer by provided revision.\n\n > Restriction group: `Guests: info`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.GetTransactionsReportByRevisionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.GetTransactionsReportByRevisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/loyalty/iiko/customer/transactions/by_date": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Get transaction report by period.",
        "description": "Get transaction report for specified customer by provided date range.\n\n > Restriction group: `Guests: info`.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Bearer nRzIn0dJu1LpbGMbVfnCFDjKM4iwPhDV8tMlh7X5eWBR64iw"
            }
          },
          {
            "name": "Timeout",
            "in": "header",
            "description": "Timeout in seconds.",
            "schema": {
              "type": "integer",
              "default": 15,
              "example": 10
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.GetTransactionsReportByPeriodRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.GetTransactionsReportByPeriodResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AllergenGroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "description": "Allergen's code"
          },
          "name": {
            "type": "string",
            "description": "Allergen's name"
          }
        }
      },
      "ExternalMenuPreset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the external menu"
          },
          "name": {
            "type": "string",
            "description": "External menu name"
          },
          "description": {
            "type": "string",
            "description": "External menu description"
          },
          "itemCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportMenuCategoryDto"
            }
          }
        }
      },
      "GetExternalMenuWithPriceSourceRequestDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "id of the requested menu"
          },
          "priceSource": {
            "enum": [
              "CONFIGURED_IN_MENU",
              "PRICE_CATEGORY"
            ],
            "type": "string",
            "description": "Price from the external menu or price category",
            "format": "enum"
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "priceCategoryId": {
            "type": "string"
          }
        }
      },
      "iikoNet.Common.Enums.CounterMetric": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "iikoNet.Common.Enums.CounterPeriod": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ],
        "type": "integer",
        "format": "int32"
      },
      "iikoNet.Common.Enums.RefillType": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "iikoNet.Common.Enums.TemplateType": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Common.GetByOrganizationIdRequest": {
        "title": " ",
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Get request only by organization id"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddCustomerToProgramRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid"
          },
          "programId": {
            "type": "string",
            "description": "Program id.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Add customer to program request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddCustomerToProgramResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "userWalletId": {
            "type": "string",
            "description": "User wallet id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Add customer to program response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddMagnetCardRequest": {
        "title": " ",
        "required": [
          "customerId",
          "cardTrack",
          "cardNumber",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid"
          },
          "cardTrack": {
            "type": "string",
            "description": "Card track. Can be null."
          },
          "cardNumber": {
            "type": "string",
            "description": "Card number. Can be null."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Add magnet card request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.AddMagnetCardResponse": {
        "title": " ",
        "type": "object",
        "additionalProperties": false,
        "description": "Add magnet card response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.CancelHoldMoneyRequest": {
        "title": " ",
        "required": [
          "transactionId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Transaction id.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Cancel hold money request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.CancelHoldMoneyResponse": {
        "title": " ",
        "type": "object",
        "additionalProperties": false,
        "description": "Cancel hold money response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerRequest": {
        "title": " ",
        "required": [
          "customerId",
          "categoryId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid"
          },
          "categoryId": {
            "type": "string",
            "description": "Guest category id.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Change category for customer request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeCategoryForCustomerResponse": {
        "title": " ",
        "type": "object",
        "additionalProperties": false,
        "description": "Change category for customer response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.ChangeUserBalanceRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid"
          },
          "walletId": {
            "type": "string",
            "description": "Wallet id.",
            "format": "uuid"
          },
          "sum": {
            "type": "number",
            "description": "Sum of balance change. Must be possible.",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "description": "Comment. Can be null."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Change user balance request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.CreateOrUpdateCustomerRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Customer phone. Can be null."
          },
          "cardTrack": {
            "type": "string",
            "description": "Card track. Required if cardNumber set. Can be null."
          },
          "cardNumber": {
            "type": "string",
            "description": "Card number. Required if cardTrack set. Can be null."
          },
          "name": {
            "type": "string",
            "description": "Customer name. Can be null."
          },
          "middleName": {
            "type": "string",
            "description": "Customer middle name. Can be null."
          },
          "surName": {
            "type": "string",
            "description": "Customer surname. Can be null."
          },
          "birthday": {
            "type": "string",
            "description": "Customer birthday.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "email": {
            "type": "string",
            "description": "Customer email. Can be null."
          },
          "sex": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.IikoNetUserSex"
              }
            ],
            "description": "Customer sex.\r\n<br>0 - not specified,<br />1 - male,<br />2 - female."
          },
          "consentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.PersonalDataConsentStatus"
              }
            ],
            "description": "Customer consent status.\r\n<br>0 - unknown,<br />1 - given,<br />2 - revoked."
          },
          "shouldReceiveLoyaltyInfo": {
            "type": "boolean",
            "description": "Customer get loyalty messages (email, sms). If the parameter is not specified for new customers, the value 'true' is used.",
            "nullable": true
          },
          "shouldReceivePromoActionsInfo": {
            "type": "boolean",
            "description": "Customer get promo messages (email, sms). If the parameter is not specified for new customers, the value 'true' is used.",
            "nullable": true
          },
          "referrerId": {
            "type": "string",
            "description": "Id for referrer guest. Null for old integrations, Guid.Empty - for referrer deletion. Can be null."
          },
          "userData": {
            "type": "string",
            "description": "Customer user data. Can be null."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Customer logical deletion flag.",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Customer organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Not empty `phone` or `magnetCardTrack` or `id` is required for successful import."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.CreateOrUpdateCustomerResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Create or update customer response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteCustomersRequest": {
        "title": " ",
        "required": [
          "customerIds",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "customerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Customer IDs for logical deletion."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Delete customers request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteCustomersResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Number of unique customer IDs.",
            "format": "int32"
          },
          "deleted": {
            "type": "integer",
            "description": "Number of deleted customers.",
            "format": "int32"
          },
          "notFound": {
            "type": "integer",
            "description": "Number of unfound customers.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Delete customers response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteMagnetCardRequest": {
        "title": " ",
        "required": [
          "customerId",
          "cardTrack",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid"
          },
          "cardTrack": {
            "type": "string",
            "description": "Card track. Can be null."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Delete magnet card request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.DeleteMagnetCardResponse": {
        "title": " ",
        "type": "object",
        "additionalProperties": false,
        "description": "Delete magnet card response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCategoriesRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Get categories request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCategoriesResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "guestCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCategoryShortInfo"
            },
            "description": "Guest categories for organization."
          }
        },
        "additionalProperties": false,
        "description": "Get categories response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByCardNumberRequest": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest"
          }
        ],
        "properties": {
          "cardNumber": {
            "type": "string",
            "description": "Customer card number."
          }
        },
        "additionalProperties": false,
        "description": "Request to get customer by card number."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByCardTrackRequest": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest"
          }
        ],
        "properties": {
          "cardTrack": {
            "type": "string",
            "description": "Customer card track."
          }
        },
        "additionalProperties": false,
        "description": "Request to get customer by card track."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByEmailRequest": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest"
          }
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Customer email."
          }
        },
        "additionalProperties": false,
        "description": "Request to get customer by email."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByIdRequest": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Customer id."
          }
        },
        "additionalProperties": false,
        "description": "Request to get customer by Id."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByPhoneRequest": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest"
          }
        ],
        "properties": {
          "phone": {
            "type": "string",
            "description": "Customer phone number."
          }
        },
        "additionalProperties": false,
        "description": "Request to get customer by phone number."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoRequest": {
        "title": " ",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Base class for customer info request.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "phone": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByPhoneRequest",
            "cardTrack": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByCardTrackRequest",
            "cardNumber": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByCardNumberRequest",
            "email": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByEmailRequest",
            "id": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoByIdRequest"
          }
        }
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GetCustomerInfoResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Guest id.",
            "format": "uuid"
          },
          "referrerId": {
            "type": "string",
            "description": "Guest referrer id.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Guest name. Can be null."
          },
          "surname": {
            "type": "string",
            "description": "Guest surname. Can be null."
          },
          "middleName": {
            "type": "string",
            "description": "Guest middle name. Can be null."
          },
          "comment": {
            "type": "string",
            "description": "Guest comment. Can be null."
          },
          "phone": {
            "type": "string",
            "description": "Main customer's phone. Can be null."
          },
          "cultureName": {
            "type": "string",
            "description": "Guest culture name. Can be null."
          },
          "birthday": {
            "type": "string",
            "description": "Guest birthday.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "email": {
            "type": "string",
            "description": "Guest email. Can be null."
          },
          "sex": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.IikoNetUserSex"
              }
            ],
            "description": "Sex.\r\n<br>0 - not specified,<br />1 - male,<br />2 - female."
          },
          "consentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.PersonalDataConsentStatus"
              }
            ],
            "description": "Guest consent status.\r\n<br>0 - unknown,<br />1 - given,<br />2 - revoked."
          },
          "anonymized": {
            "type": "boolean",
            "description": "Guest anonymized."
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCardInfo"
            },
            "description": "Customer's cards."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCategoryShortInfo"
            },
            "description": "Customer categories."
          },
          "walletBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestBalanceInfo"
            },
            "description": "Customer's user wallets. Contains bonus balances of different loyalty programs."
          },
          "userData": {
            "type": "string",
            "description": "Technical user data, customizable by restaurateur. Can be null."
          },
          "shouldReceivePromoActionsInfo": {
            "type": "boolean",
            "description": "Customer get promo messages (email, sms). If null - unknown.",
            "nullable": true
          },
          "shouldReceiveLoyaltyInfo": {
            "type": "boolean",
            "description": "Guest should receive loyalty info.",
            "nullable": true
          },
          "shouldReceiveOrderStatusInfo": {
            "type": "boolean",
            "description": "Guest should receive order status info.",
            "nullable": true
          },
          "personalDataConsentFrom": {
            "type": "string",
            "description": "Guest personal data consent from.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "personalDataConsentTo": {
            "type": "string",
            "description": "Guest personal data consent to.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "personalDataProcessingFrom": {
            "type": "string",
            "description": "Guest personal data processing from.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "personalDataProcessingTo": {
            "type": "string",
            "description": "Guest personal data processing to.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Customer marked as deleted.",
            "nullable": true
          },
          "whenRegistered": {
            "type": "string",
            "description": "Registration date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "lastProcessedOrderDate": {
            "type": "string",
            "description": "Last order date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "firstOrderDate": {
            "type": "string",
            "description": "First order date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "lastVisitedOrganizationId": {
            "type": "string",
            "description": "Guest last visited organization id.",
            "format": "uuid",
            "nullable": true
          },
          "registrationOrganizationId": {
            "type": "string",
            "description": "Guest registration organization id.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Get customer info response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestBalanceInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Wallet id.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Wallet name."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.ProgramType"
              }
            ],
            "description": "Wallet type.\r\n<br>0 - deposit or corporate nutrition,<br />1 - bonus program,<br />2 - products program,<br />3 - discount program,<br />4 - certificate program."
          },
          "balance": {
            "type": "number",
            "description": "Wallet balance.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Information about guest balance."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCardInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Card id.",
            "format": "uuid"
          },
          "track": {
            "type": "string",
            "description": "Card track."
          },
          "number": {
            "type": "string",
            "description": "Card number."
          },
          "validToDate": {
            "type": "string",
            "description": "Card valid to date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Guest card info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.GuestCategoryShortInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Category id.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Category name."
          },
          "isActive": {
            "type": "boolean",
            "description": "Is category active or not."
          },
          "isDefaultForNewGuests": {
            "type": "boolean",
            "description": "Is category default for new guests or not."
          }
        },
        "additionalProperties": false,
        "description": "Guest category info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.HoldMoneyRequest": {
        "title": " ",
        "required": [
          "customerId",
          "walletId",
          "sum",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Predefined transaction id. Random if empty.",
            "format": "uuid",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid"
          },
          "walletId": {
            "type": "string",
            "description": "Wallet id.",
            "format": "uuid"
          },
          "sum": {
            "type": "number",
            "description": "Sum.",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "description": "Additional information about holding. Can be null."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Hold money request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.HoldMoneyResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Holding money transaction id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Hold money response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.IikoNetUserSex": {
        "title": " ",
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.PersonalDataConsentStatus": {
        "title": " ",
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.RestoreCustomersRequest": {
        "title": " ",
        "required": [
          "customerIds",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "customerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Customer IDs to recover."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Restore customers request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Customer.RestoreCustomersResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Number of unique customer IDs.",
            "format": "int32"
          },
          "restored": {
            "type": "integer",
            "description": "Number of restored customers.",
            "format": "int32"
          },
          "notFound": {
            "type": "integer",
            "description": "Number of unfound customers.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Restore customers response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.AvailableCombo": {
        "title": " ",
        "type": "object",
        "properties": {
          "specificationId": {
            "type": "string",
            "description": "Id of combo specification, describing combo content.",
            "format": "uuid"
          },
          "groupMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboGroupMapping"
            },
            "description": "Groups contained in combo. If null - there is no suitable product in order yet for that group."
          }
        },
        "additionalProperties": false,
        "description": "Available combo."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.AvailablePayment": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Marketing campaign id.",
            "format": "uuid"
          },
          "maxSum": {
            "type": "number",
            "description": "Max sum.",
            "format": "double"
          },
          "order": {
            "type": "integer",
            "description": "Payment order. In case of partial payment, payments with lesser order should be filled first.",
            "format": "int32"
          },
          "walletInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WalletInfo"
            },
            "description": "Wallet infos."
          }
        },
        "additionalProperties": false,
        "description": "Available payment."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateCheckinRequest": {
        "title": " ",
        "required": [
          "order",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Order"
              }
            ],
            "description": "Order."
          },
          "coupon": {
            "type": "string",
            "description": "Number of applied coupon. Can be null."
          },
          "referrerId": {
            "type": "string",
            "description": "Referrer id.",
            "format": "uuid",
            "nullable": true
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Identifier of a target terminal. Should be used only when auto distribution is off and no call center operator is available.",
            "format": "uuid",
            "nullable": true
          },
          "availablePaymentMarketingCampaignIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of identifiers of applied campaigns. Should be empty if no payment method is used."
          },
          "applicableManualConditions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of manually applied to order conditions."
          },
          "dynamicDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.DynamicDiscount"
            },
            "description": "Applicable manual discounts."
          },
          "isLoyaltyTraceEnabled": {
            "type": "boolean",
            "description": "Loyalty trace is enabled."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request to calculate loyalty operations for order."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateCheckinResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "loyaltyProgramResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.LoyaltyProgramResult"
            },
            "description": "Loyalty program results."
          },
          "availablePayments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.AvailablePayment"
            },
            "description": "Marketing campaigns with available payments."
          },
          "validationWarnings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Warnings about errors, not blocking loyalty calculation."
          },
          "Warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WarningInfo"
            },
            "description": "Warnings about errors, not blocking loyalty calculation."
          },
          "loyaltyTrace": {
            "type": "string",
            "description": "Loyalty trace. Can be null."
          }
        },
        "additionalProperties": false,
        "description": "Loyalty result for order."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateComboPriceRequest": {
        "title": " ",
        "required": [
          "items",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Items with modifiers included in combo."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Calculate combo price request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CalculateComboPriceResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "description": "Calculated price of combo item.",
            "format": "double"
          },
          "incorrectlyFilledGroups": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Ids of incorrectly filled groups. If not empty - price will be 0."
          }
        },
        "additionalProperties": false,
        "description": "Calculate combo price response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboCategory": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Category id.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Category name."
          }
        },
        "additionalProperties": false,
        "description": "Information about combos of organization."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboGroup": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "isMainGroup": {
            "type": "boolean",
            "description": "Is main group."
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboProduct"
            },
            "description": "Products."
          }
        },
        "additionalProperties": false,
        "description": "Information about combos group."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboGroupMapping": {
        "title": " ",
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Id of combo group.",
            "format": "uuid"
          },
          "itemId": {
            "type": "string",
            "description": "Id of item, suitable for group.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Mapping combo's group to OrderItem."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboPriceModificationType": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboProduct": {
        "title": " ",
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product id.",
            "format": "uuid"
          },
          "sizeName": {
            "type": "string",
            "description": "Size name. Can be null."
          },
          "sizeId": {
            "type": "string",
            "description": "Size id.",
            "format": "uuid",
            "nullable": true
          },
          "forbiddenModifiers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Forbidden modifiers."
          },
          "priceModificationAmount": {
            "type": "number",
            "description": "Price modification amount.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Combo product."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboSpecification": {
        "title": " ",
        "type": "object",
        "properties": {
          "sourceActionId": {
            "type": "string",
            "description": "Id of action that added the combo.",
            "format": "uuid"
          },
          "categoryId": {
            "type": "string",
            "description": "Combo's category id.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name. Can be null."
          },
          "priceModificationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboPriceModificationType"
              }
            ],
            "description": "Price modification type.\r\n<br>0 - fixed combo price,<br />1 - fixed position price,<br />2 - cheapest position discount,<br />3 - most expensive position discount,<br />4 - percentage discount for each position."
          },
          "priceModification": {
            "type": "number",
            "description": "Price modification.",
            "format": "double"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is active.",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Start date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "lackingGroupsToSuggest": {
            "type": "integer",
            "description": "Lacking groups to suggest.",
            "format": "int32",
            "nullable": true
          },
          "includeModifiers": {
            "type": "boolean",
            "description": "Include modifiers.",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboGroup"
            },
            "description": "Groups."
          }
        },
        "additionalProperties": false,
        "description": "Information about combos of organization."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id.",
            "format": "uuid"
          },
          "number": {
            "type": "string",
            "description": "Number. Can be null."
          },
          "seriesName": {
            "type": "string",
            "description": "Series name. Can be null."
          },
          "seriesId": {
            "type": "string",
            "description": "Series id.",
            "format": "uuid"
          },
          "whenActivated": {
            "type": "string",
            "description": "When activated.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted."
          }
        },
        "additionalProperties": false,
        "description": "Coupon info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfoRequest": {
        "title": " ",
        "required": [
          "number",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Number. Can be null."
          },
          "series": {
            "type": "string",
            "description": "Series. Can be null."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Coupon info request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfoResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "couponInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.CouponInfo"
            },
            "description": "Coupon info."
          }
        },
        "additionalProperties": false,
        "description": "Coupon info response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.DiscountOperation": {
        "title": " ",
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.OperationCode"
              }
            ],
            "description": "Operation Type Code.\r\n<br>0 - fixed discount for the entire order,<br />1 - fixed discount for the item,<br />2 - free product,<br />3 - other type of discounts."
          },
          "orderItemId": {
            "type": "string",
            "description": "Deprecated, use positionId.",
            "format": "uuid",
            "nullable": true
          },
          "positionId": {
            "type": "string",
            "description": "Id of item the discount is applied to. If null - discount applied to whole orders.",
            "format": "uuid",
            "nullable": true
          },
          "discountSum": {
            "type": "number",
            "description": "Discount sum.",
            "format": "double"
          },
          "amount": {
            "type": "number",
            "description": "Amount.",
            "format": "double",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment. Can be null."
          }
        },
        "additionalProperties": false,
        "description": "Discount operation."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.DynamicDiscount": {
        "title": " ",
        "type": "object",
        "properties": {
          "manualConditionId": {
            "type": "string",
            "description": "Manual discount condition identifier.",
            "format": "uuid"
          },
          "Sum": {
            "type": "number",
            "description": "Discount amount.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Manual discount."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProduct": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of product.",
            "format": "uuid",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Code of product. Can be null."
          },
          "size": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Sizes available for that product."
          },
          "sizes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProductSize"
            },
            "description": "Sizes with IDs available for that product."
          }
        },
        "additionalProperties": false,
        "description": "Free item to be added to order."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProductsGroup": {
        "title": " ",
        "type": "object",
        "properties": {
          "sourceActionId": {
            "type": "string",
            "description": "Id of action that caused the suggestion.",
            "format": "uuid"
          },
          "descriptionForUser": {
            "type": "string",
            "description": "Description for user. Can be null."
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProduct"
            },
            "description": "Products that should be added to order."
          }
        },
        "additionalProperties": false,
        "description": "Free item to be added to order."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProductSize": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of size.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name. Can be null."
          }
        },
        "additionalProperties": false,
        "description": "Free item size info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCombosInfoRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "extraData": {
            "type": "boolean",
            "description": "Extra data."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Get combos info request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCombosInfoResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "comboSpecifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboSpecification"
            },
            "description": "Full combo's specifications."
          },
          "comboCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ComboCategory"
            },
            "description": "Combo's categories."
          },
          "Warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WarningInfo"
            },
            "description": "Warnings about errors, not blocking loyalty calculation."
          }
        },
        "additionalProperties": false,
        "description": "Information about combos of organization."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCountersRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "guestIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Guest ids."
          },
          "periods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Common.Enums.CounterPeriod"
            },
            "description": "Periods."
          },
          "metrics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Common.Enums.CounterMetric"
            },
            "description": "Metrics."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Get counters request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetCountersResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "counters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GuestCounter"
            },
            "description": "Counters."
          }
        },
        "additionalProperties": false,
        "description": "Get counters response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GetManualConditionsResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "manualConditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ManualConditionInfo"
            },
            "description": "Info about manual conditions."
          }
        },
        "additionalProperties": false,
        "description": "Get manual conditions response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.GuestCounter": {
        "title": " ",
        "type": "object",
        "properties": {
          "guestId": {
            "type": "string",
            "description": "Guest id.",
            "format": "uuid"
          },
          "period": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Common.Enums.CounterPeriod"
              }
            ],
            "description": "Period."
          },
          "metric": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Common.Enums.CounterMetric"
              }
            ],
            "description": "Metric."
          },
          "value": {
            "type": "number",
            "description": "Value.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Guest counter."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.LoyaltyProgramResult": {
        "title": " ",
        "type": "object",
        "properties": {
          "marketingCampaignId": {
            "type": "string",
            "description": "Program marketing campaign id.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Program name."
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.DiscountOperation"
            },
            "description": "Discount operations applied to order items."
          },
          "upsales": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.Upsale"
            },
            "description": "Suggested items to add or advices for customer."
          },
          "freeProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.FreeProductsGroup"
            },
            "description": "Program free products."
          },
          "availableComboSpecifications": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Ids of combo specification available in current order."
          },
          "availableCombos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.AvailableCombo"
            },
            "description": "Partially added combos, available for assembly."
          },
          "needToActivateCertificate": {
            "type": "boolean",
            "description": "Certificate number is required for activation."
          }
        },
        "additionalProperties": false,
        "description": "Loyalty result for order."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.ManualConditionInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id.",
            "format": "uuid"
          },
          "caption": {
            "type": "string",
            "description": "Name of manual condition."
          },
          "isDynamicDiscount": {
            "type": "boolean",
            "description": "Arbitrary discount attribute."
          },
          "isApplicableOnCashierScreen": {
            "type": "boolean",
            "description": "Flag of applicability on the cashier screen.."
          }
        },
        "additionalProperties": false,
        "description": "Manual condition."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCoupon": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id.",
            "format": "uuid"
          },
          "number": {
            "type": "string",
            "description": "Number. Can be null."
          },
          "seriesName": {
            "type": "string",
            "description": "Series name. Can be null."
          },
          "seriesId": {
            "type": "string",
            "description": "Series id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Not activated coupon."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCouponRequest": {
        "title": " ",
        "required": [
          "series",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "series": {
            "type": "string",
            "description": "Series. Can be null."
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size.",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "description": "Page.",
            "format": "int32"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Not activated coupon request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCouponResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "notActivatedCoupon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.NotActivatedCoupon"
            },
            "description": "Not activated coupon."
          }
        },
        "additionalProperties": false,
        "description": "Not activated coupon response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.OperationCode": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Operation's code.",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCoupons": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id.",
            "format": "uuid"
          },
          "number": {
            "type": "string",
            "description": "Number. Can be null."
          }
        },
        "additionalProperties": false,
        "description": "Series with not activated coupons."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCouponsRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Series with not activated coupons request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCouponsResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "seriesWithNotActivatedCoupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.SeriesWithNotActivatedCoupons"
            },
            "description": "Series with not activated coupons."
          }
        },
        "additionalProperties": false,
        "description": "Series with not activated coupons response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.Upsale": {
        "title": " ",
        "type": "object",
        "properties": {
          "sourceActionId": {
            "type": "string",
            "description": "Id of action that caused the suggestion.",
            "format": "uuid"
          },
          "suggestionText": {
            "type": "string",
            "description": "Suggestion text.",
            "deprecated": true
          },
          "descriptionForUser": {
            "type": "string",
            "description": "Description for user."
          },
          "productCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Codes of products that suggested to be added to order."
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.UpsaleProduct"
            },
            "description": "Products that suggested to be added to order."
          }
        },
        "additionalProperties": false,
        "description": "user tip."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.UpsaleProduct": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of product.",
            "format": "uuid",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Code of product."
          }
        },
        "additionalProperties": false,
        "description": "Product that suggested to be added to order."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WalletInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Wallet id.",
            "format": "uuid"
          },
          "maxSum": {
            "type": "number",
            "description": "Max sum for payment from the wallet.",
            "format": "double"
          },
          "canHoldMoney": {
            "type": "boolean",
            "description": "Can hold money."
          }
        },
        "additionalProperties": false,
        "description": "Wallet info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.LoyaltyResult.WarningInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "Code": {
            "type": "string",
            "description": "Code of an error. Can be null."
          },
          "ErrorCode": {
            "type": "string",
            "description": "Error code. Can be null."
          },
          "Message": {
            "type": "string",
            "description": "Description of an error. Can be null."
          }
        },
        "additionalProperties": false,
        "description": "Warning info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.CheckSmsStatusRequest": {
        "title": " ",
        "required": [
          "smsIds",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "smsIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Sms IDs for checking."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Check sms status request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.CheckSmsStatusResponse": {
        "title": " ",
        "required": [
          "statuses"
        ],
        "type": "object",
        "properties": {
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.SmsSendingStatusInfo"
            },
            "description": "Information about the status of sending SMS."
          }
        },
        "additionalProperties": false,
        "description": "Check sms status response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.NotificationSendingCapabilityCheckStatus": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Notification sending capability check status.",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.SendEmailRequest": {
        "title": " ",
        "required": [
          "receiver",
          "subject",
          "body",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "receiver": {
            "type": "string",
            "description": "Email address. Can be null."
          },
          "subject": {
            "type": "string",
            "description": "Message subject. Can be null."
          },
          "body": {
            "type": "string",
            "description": "Message body. Can be null."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Send email request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.SendEmailResponse": {
        "title": " ",
        "type": "object",
        "additionalProperties": false,
        "description": "Send email response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.SendSmsRequest": {
        "title": " ",
        "required": [
          "phone",
          "text",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Customer's phone number. Can be null."
          },
          "text": {
            "type": "string",
            "description": "Message text. Can be null."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Send sms request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.SendSmsResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "smsId": {
            "type": "string",
            "description": "Sms id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Send sms response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.SmsSendingPossibilityRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Sms sending possibility request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.SmsSendingPossibilityResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.NotificationSendingCapabilityCheckStatus"
              }
            ],
            "description": "Notification sending capability check status."
          },
          "availableSmsCount": {
            "type": "integer",
            "description": "Available sms count.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Sms sending possibility response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.SmsSendingStatus": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "SMS sending status.",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Notification.SmsSendingStatusInfo": {
        "title": " ",
        "required": [
          "smsId",
          "status"
        ],
        "type": "object",
        "properties": {
          "smsId": {
            "type": "string",
            "description": "Sms id.",
            "format": "uuid"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Notification.SmsSendingStatus"
              }
            ],
            "description": "Sms sending status."
          },
          "internalError": {
            "type": "string",
            "description": "Sms sending internal error. Can be null."
          }
        },
        "additionalProperties": false,
        "description": "Sms sending status info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Organization.GetProgramsRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "withoutMarketingCampaigns": {
            "type": "boolean",
            "description": "Determines if marketing campaigns not required.",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Get programs request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Organization.GetProgramsResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "Programs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.LoyaltyProgram"
            },
            "description": "Programs."
          }
        },
        "additionalProperties": false,
        "description": "Get programs response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Organization.LoyaltyProgram": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Program id.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Program name. Can be null."
          },
          "description": {
            "type": "string",
            "description": "Program description. Can be null."
          },
          "serviceFrom": {
            "type": "string",
            "description": "Program works since date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "serviceTo": {
            "type": "string",
            "description": "Program works till date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "notifyAboutBalanceChanges": {
            "type": "boolean",
            "description": "Notify customer when balance has changed (sms/push)."
          },
          "programType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.ProgramType"
              }
            ],
            "description": "Program type.\r\n<br>0 - deposit or corporate nutrition,<br />1 - bonus program,<br />2 - products program,<br />3 - discount program,<br />4 - certificate program."
          },
          "isActive": {
            "type": "boolean",
            "description": "Program is active."
          },
          "walletId": {
            "type": "string",
            "description": "Wallet id. Program has only wallet that means global payment type for customers.",
            "format": "uuid",
            "nullable": true
          },
          "marketingCampaigns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignInfo"
            },
            "description": "Program marketing campaigns."
          },
          "appliedOrganizations": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Program applied organizations."
          },
          "templateType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Common.Enums.TemplateType"
              }
            ],
            "description": "Program template type.\r\n<br>0 - None,<br />1 - BonusProgram,<br />2 - DiscountProgram,<br />3 - NthDishProgram,<br />4 - ManualOrderAnonymousDiscount,<br />5 - AutoOrderAnonymousDiscount,<br />6 - AutoDishAnonymousDiscount,<br />7 - PromotionsProgram,<br />8 - NthDishPromotionsProgram."
          },
          "isExchangeRateEnabled": {
            "type": "boolean",
            "description": "Exchange rate for bonuses and real currency."
          },
          "refillType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Common.Enums.RefillType"
              }
            ],
            "description": "Refill type with payment."
          }
        },
        "additionalProperties": false,
        "description": "Loyalty program."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id.",
            "format": "uuid",
            "nullable": true
          },
          "stopFurtherExecution": {
            "type": "boolean",
            "description": "Loyalty processing stop after successful execution of binding. So means order of bindings affects."
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignSettingsInfo"
            },
            "description": "Marketing actions."
          },
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignSettingsInfo"
            },
            "description": "Marketing conditions."
          }
        },
        "additionalProperties": false,
        "description": "Marketing campaign binding info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Marketing campaign id.",
            "format": "uuid",
            "nullable": true
          },
          "programId": {
            "type": "string",
            "description": "Loyalty program id.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Loyalty program name. Can be null."
          },
          "description": {
            "type": "string",
            "description": "Marketing campaign description. Can be null."
          },
          "isActive": {
            "type": "boolean",
            "description": "Marketing campaign is active."
          },
          "periodFrom": {
            "type": "string",
            "description": "Marketing campaign works since date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "periodTo": {
            "type": "string",
            "description": "Marketing campaign works till date. Null means limitless.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "orderActionConditionBindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo"
            },
            "description": "Conditions and actions that will be checked when order is processed."
          },
          "periodicActionConditionBindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo"
            },
            "description": "Conditions and actions that will be checked by schedule."
          },
          "overdraftActionConditionBindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo"
            },
            "description": "Conditions and actions that will be checked by overdraft."
          },
          "guestRegistrationActionConditionBindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignActionConditionBindingInfo"
            },
            "description": "Conditions and actions that will be checked by guest registration."
          }
        },
        "additionalProperties": false,
        "description": "Marketing campaign info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Organization.MarketingCampaignSettingsInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id.",
            "format": "uuid",
            "nullable": true
          },
          "settings": {
            "type": "string",
            "description": "Action/condition settings. Stored as Json. Can be null."
          },
          "typeName": {
            "type": "string",
            "description": "Action/condition type name. Can be null."
          },
          "checkSum": {
            "type": "string",
            "description": "Hash value of checksum. Can be null."
          }
        },
        "additionalProperties": false,
        "description": "Marketing campaign settings info."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Organization.RefillUserBalanceResponse": {
        "title": " ",
        "type": "object",
        "additionalProperties": false,
        "description": "Refill user balance response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Organization.WithdrawUserBalanceResponse": {
        "title": " ",
        "type": "object",
        "additionalProperties": false,
        "description": "Withdraw user balance response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.ProgramType": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "Corporate program type.",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Report.CertificateCounteragentType": {
        "title": " ",
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Certificate counteragent type",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Report.GetTransactionsReportByPeriodRequest": {
        "title": " ",
        "required": [
          "customerId",
          "dateFrom",
          "dateTo",
          "pageNumber",
          "pageSize",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid"
          },
          "dateFrom": {
            "type": "string",
            "description": "Report since date in UTC. Included.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "dateTo": {
            "type": "string",
            "description": "Report till date in UTC. Included.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "pageNumber": {
            "type": "integer",
            "description": "Page number. Zero based. Previous pages will be skipped.",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. Ignored if more than max page size on server.",
            "format": "int32"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Report request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Report.GetTransactionsReportByPeriodResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.TransportTransactionsReportItem"
            },
            "description": "Transactions."
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size.",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "description": "Page number. Zero based.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Get transactions report by period response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Report.GetTransactionsReportByRevisionRequest": {
        "title": " ",
        "required": [
          "customerId",
          "pageSize",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Customer id.",
            "format": "uuid"
          },
          "revision": {
            "type": "integer",
            "description": "Report since revision. Included if LastTransactionId set..",
            "format": "int64"
          },
          "lastTransactionId": {
            "type": "string",
            "description": "Report since transaction. Excluded. Can't be used without revision..",
            "format": "uuid",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size. Ignored if more than max size on server..",
            "format": "int32"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Report request."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Report.GetTransactionsReportByRevisionResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.TransportTransactionsReportItem"
            },
            "description": "Transactions."
          },
          "lastRevision": {
            "type": "integer",
            "description": "Last known transaction revision.",
            "format": "int64"
          },
          "lastTransactionId": {
            "type": "string",
            "description": "Last known transaction id.",
            "format": "uuid",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "description": "Page size.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Get transactions report by revision response."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Report.TransactionType": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          28,
          29,
          30,
          32,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50,
          51,
          52,
          53,
          54,
          55,
          56,
          57,
          58,
          59,
          60
        ],
        "type": "integer",
        "format": "int32"
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Report.TransportTransactionsCertificateReportItem": {
        "title": " ",
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Number. Can be null."
          },
          "series": {
            "type": "string",
            "description": "Series. Can be null."
          },
          "statusName": {
            "type": "string",
            "description": "Status name. Can be null."
          },
          "typeName": {
            "type": "string",
            "description": "Type name. Can be null."
          }
        },
        "additionalProperties": false,
        "description": "Transactions report item."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Report.TransportTransactionsCouponReportItem": {
        "title": " ",
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Number. Can be null."
          },
          "series": {
            "type": "string",
            "description": "Series. Can be null."
          }
        },
        "additionalProperties": false,
        "description": "Transactions report item."
      },
      "iikoNet.Service.Contracts.Api.iikoTransport.Report.TransportTransactionsReportItem": {
        "title": " ",
        "required": [
          "organizationId",
          "id",
          "revision"
        ],
        "type": "object",
        "properties": {
          "apiClientLogin": {
            "type": "string",
            "description": "Api client login. Can be null."
          },
          "balanceAfter": {
            "type": "number",
            "description": "Balance after.",
            "format": "double",
            "nullable": true
          },
          "balanceBefore": {
            "type": "number",
            "description": "Balance before.",
            "format": "double",
            "nullable": true
          },
          "blockReason": {
            "type": "string",
            "description": "Block reason. Can be null."
          },
          "certificate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.TransportTransactionsCertificateReportItem"
              }
            ],
            "description": "Certificate."
          },
          "comment": {
            "type": "string",
            "description": "Comment. Can be null."
          },
          "counteragent": {
            "type": "string",
            "description": "Counteragent. Can be null."
          },
          "counteragentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.CertificateCounteragentType"
              }
            ],
            "description": "Counteragent type.",
            "nullable": true
          },
          "counteragentTypeName": {
            "type": "string",
            "description": "Counteragent type name. Can be null."
          },
          "coupon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.TransportTransactionsCouponReportItem"
              }
            ],
            "description": "Coupon."
          },
          "emitentName": {
            "type": "string",
            "description": "Emitent name. Can be null."
          },
          "loyaltyUser": {
            "type": "string",
            "description": "Loyalty user. Can be null."
          },
          "marketingCampaignId": {
            "type": "string",
            "description": "Marketing campaign id.",
            "format": "uuid",
            "nullable": true
          },
          "nominal": {
            "type": "number",
            "description": "Nominal.",
            "format": "double",
            "nullable": true
          },
          "orderNumber": {
            "type": "integer",
            "description": "Order number.",
            "format": "int32",
            "nullable": true
          },
          "orderSum": {
            "type": "number",
            "description": "Order sum.",
            "format": "double",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization id.",
            "format": "uuid",
            "nullable": true
          },
          "posBalanceBefore": {
            "type": "number",
            "description": "Pos balance before.",
            "format": "double",
            "nullable": true
          },
          "programId": {
            "type": "string",
            "description": "Program id.",
            "format": "uuid",
            "nullable": true
          },
          "sum": {
            "type": "number",
            "description": "Sum.",
            "format": "double"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoNet.Service.Contracts.Api.iikoTransport.Report.TransactionType"
              }
            ],
            "description": "Type."
          },
          "typeName": {
            "type": "string",
            "description": "Type name. Can be null."
          },
          "walletId": {
            "type": "string",
            "description": "Wallet id.",
            "format": "uuid",
            "nullable": true
          },
          "whenCreated": {
            "type": "string",
            "description": "When created.",
            "format": "date-time"
          },
          "whenCreatedOrder": {
            "type": "string",
            "description": "When created order.",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Id.",
            "format": "uuid"
          },
          "isDelivery": {
            "type": "boolean",
            "description": "Is delivery.",
            "nullable": true
          },
          "isIgnored": {
            "type": "boolean",
            "description": "Is ignored."
          },
          "posOrderId": {
            "type": "string",
            "description": "Pos order id.",
            "format": "uuid",
            "nullable": true
          },
          "revision": {
            "type": "integer",
            "description": "Revision.",
            "format": "int64"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group id.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Transactions report item."
      },
      "iikoTransport.PublicApi.Contracts.Address.CitiesRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "IDs of organizations that require data return.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "includeDeleted": {
            "type": "boolean",
            "description": "Include deleted cities in response.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "Organization request DTO."
      },
      "iikoTransport.PublicApi.Contracts.Address.CitiesResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "cities"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "cities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Address.City, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "List of cities."
          }
        },
        "additionalProperties": false,
        "description": "Service response with list of cities."
      },
      "iikoTransport.PublicApi.Contracts.Address.City": {
        "title": " ",
        "required": [
          "id",
          "name",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "City ID in RMS.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "externalRevision": {
            "type": "integer",
            "description": "External revision.",
            "format": "int64",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is-Deleted attribute."
          },
          "classifierId": {
            "type": "string",
            "description": "ID in classifier, e.g., address database.",
            "nullable": true
          },
          "additionalInfo": {
            "type": "string",
            "description": "City additional information.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "City DTO."
      },
      "iikoTransport.PublicApi.Contracts.Address.Region": {
        "title": " ",
        "required": [
          "id",
          "name",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Region ID in RMS.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "externalRevision": {
            "type": "integer",
            "description": "External revision.",
            "format": "int64",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is-Deleted attribute."
          }
        },
        "additionalProperties": false,
        "description": "Delivery district DTO."
      },
      "iikoTransport.PublicApi.Contracts.Address.RegionsRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "IDs of organizations that require data return.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Organization request DTO."
      },
      "iikoTransport.PublicApi.Contracts.Address.RegionsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "regions"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "regions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Address.Region, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "List of districts."
          }
        },
        "additionalProperties": false,
        "description": "Service response with list of districts."
      },
      "iikoTransport.PublicApi.Contracts.Address.Street": {
        "title": " ",
        "required": [
          "id",
          "name",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "externalRevision": {
            "type": "integer",
            "description": "External system revision No.",
            "format": "int64",
            "nullable": true
          },
          "classifierId": {
            "type": "string",
            "description": "ID in classifier, e.g., address database.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is-Deleted attribute."
          }
        },
        "additionalProperties": false,
        "description": "Street DTO in iikoRMS"
      },
      "iikoTransport.PublicApi.Contracts.Address.StreetById": {
        "title": " ",
        "required": [
          "id",
          "cityId",
          "cityName",
          "streetName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Street id.",
            "format": "uuid"
          },
          "classifierId": {
            "type": "string",
            "description": "Street classifierId.",
            "nullable": true
          },
          "cityId": {
            "type": "string",
            "description": "City id.",
            "format": "uuid"
          },
          "cityName": {
            "type": "string",
            "description": "City name."
          },
          "streetName": {
            "type": "string",
            "description": "Street name."
          }
        },
        "additionalProperties": false,
        "description": "Street by id response."
      },
      "iikoTransport.PublicApi.Contracts.Address.StreetsByCityRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "cityId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID details of which have to be returned.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "cityId": {
            "type": "string",
            "description": "City ID.",
            "format": "uuid"
          },
          "includeDeleted": {
            "type": "boolean",
            "description": "Include deleted streets in response.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "Organization and city request DTO."
      },
      "iikoTransport.PublicApi.Contracts.Address.StreetsByIdRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization Id.",
            "format": "uuid"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Street Ids.",
            "nullable": true
          },
          "classifierIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Street classifierIds.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Organization and city request DTO."
      },
      "iikoTransport.PublicApi.Contracts.Address.StreetsByIdResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "streets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.StreetById"
            },
            "description": "Found streets."
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Streets by ids response."
      },
      "iikoTransport.PublicApi.Contracts.Address.StreetsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "streets"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "streets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.Street"
            },
            "description": "List of streets."
          }
        },
        "additionalProperties": false,
        "description": "Service response with list of streets."
      },
      "iikoTransport.PublicApi.Contracts.AddressHints.AddressHintsServiceType": {
        "title": " ",
        "enum": [
          "DaData",
          "GetAddress",
          "Ya",
          "GooglePlaces"
        ],
        "type": "string",
        "description": "Address hints service type."
      },
      "iikoTransport.PublicApi.Contracts.Auth.GetAccessTokenRequest": {
        "title": " ",
        "required": [
          "apiLogin"
        ],
        "type": "object",
        "properties": {
          "apiLogin": {
            "type": "string",
            "description": "API key. It is set in iikoWeb."
          }
        },
        "additionalProperties": false,
        "description": "Authentication token request."
      },
      "iikoTransport.PublicApi.Contracts.Auth.GetAccessTokenResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "token"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "token": {
            "type": "string",
            "description": "Authentication token. The standard token lifetime is 1 hour."
          }
        },
        "additionalProperties": false,
        "description": "Response to authentication token request."
      },
      "iikoTransport.PublicApi.Contracts.CancelCauses.CancelCause": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted sign."
          }
        },
        "additionalProperties": false,
        "description": "Delivery cancel cause."
      },
      "iikoTransport.PublicApi.Contracts.CancelCauses.CancelCausesRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations ids which delivery cancel causes needs to be returned. \r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request for organization's delivery cancel causes."
      },
      "iikoTransport.PublicApi.Contracts.CancelCauses.CancelCausesResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "cancelCauses"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "cancelCauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.CancelCauses.CancelCause"
            },
            "description": "List of delivery cancel causes."
          }
        },
        "additionalProperties": false,
        "description": "Response with delivery cancel causes (reasons for deletion) list."
      },
      "iikoTransport.PublicApi.Contracts.Commands.ErrorCommandStatus": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse"
          }
        ],
        "properties": {
          "exception": {
            "description": "Occured exception details.",
            "nullable": true
          },
          "errorReason": {
            "type": "string",
            "description": "Error reason.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Command completed with error."
      },
      "iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "correlationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization id which \"correlationId\" belongs to.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID obtained from any command supporting operations.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for command status obtaining."
      },
      "iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse": {
        "title": " ",
        "required": [
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Class containing information about command status.",
        "discriminator": {
          "propertyName": "state",
          "mapping": {
            "InProgress": "#/components/schemas/iikoTransport.PublicApi.Contracts.Commands.InProgressCommandStatus",
            "Success": "#/components/schemas/iikoTransport.PublicApi.Contracts.Commands.SuccessCommandStatus",
            "Error": "#/components/schemas/iikoTransport.PublicApi.Contracts.Commands.ErrorCommandStatus"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Commands.InProgressCommandStatus": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse"
          }
        ],
        "additionalProperties": false,
        "description": "Command is in progress."
      },
      "iikoTransport.PublicApi.Contracts.Commands.SuccessCommandStatus": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Commands.GetCommandStatusResponse"
          }
        ],
        "additionalProperties": false,
        "description": "Command completed successfully."
      },
      "iikoTransport.PublicApi.Contracts.Common.CorrelationIdResponse": {
        "title": " ",
        "required": [
          "correlationId"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for CorrelationId return."
      },
      "iikoTransport.PublicApi.Contracts.Common.ExternalData": {
        "title": " ",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "External data key."
          },
          "value": {
            "type": "string",
            "description": "External data value."
          }
        },
        "additionalProperties": false,
        "description": "External data key and value pair."
      },
      "iikoTransport.PublicApi.Contracts.Common.PriceCategory": {
        "title": " ",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of price category.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of price category.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Price category of the order."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Address.City, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.City"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Address.Region, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Address.Region"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Discounts.DiscountCardTypeInfo, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Discounts.DiscountCardTypeInfo"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocation, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocation"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.CourierLocations, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.CourierLocations"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.Employee, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.Employee"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.EmployeeWithCheckedRole, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.EmployeeWithCheckedRole"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.OrderTypes.OrderType, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.OrderTypes.OrderType"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopList, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopList"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]": {
        "title": " ",
        "required": [
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup"
            },
            "description": "Items for organization."
          }
        },
        "additionalProperties": false,
        "description": "RMS pair wrapping - list of response items that belong to this RMS."
      },
      "iikoTransport.PublicApi.Contracts.Common.SortDirection": {
        "title": " ",
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string",
        "description": "Sorting direction."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.CardPaymentAdditionalData": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData"
          }
        ],
        "properties": {
          "number": {
            "type": "string",
            "description": "Card No.\r\n> In iikoFront, it is possible to make card payment without card No.\r\nIf this property is set, the above `number` property is ignored.",
            "nullable": true
          },
          "customData": {
            "type": "string",
            "description": "Custom data.\n\n > Allowed from version `8.8.6`.",
            "nullable": true
          },
          "cardType": {
            "type": "string",
            "description": "Card type (VISA, MasterCard, etc...).\n\n > Allowed from version `9.3.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Additional data for Card payment item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo": {
        "title": " ",
        "required": [
          "needReceipt"
        ],
        "type": "object",
        "properties": {
          "needReceipt": {
            "type": "boolean",
            "description": "Whether paper cheque should be printed."
          },
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Email to send cheque information or null if the cheque shouldn't be sent by email.",
            "nullable": true
          },
          "settlementPlace": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "Settlement place.",
            "nullable": true
          },
          "phone": {
            "maxLength": 40,
            "minLength": 8,
            "type": "string",
            "description": "Phone to send cheque information (by sms) or null if the cheque shouldn't be sent by sms.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Cheque additional information according to russian federal law #54."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.Coordinates": {
        "title": " ",
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude.",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Coordinate details."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus": {
        "title": " ",
        "enum": [
          "Unconfirmed",
          "WaitCooking",
          "ReadyForCooking",
          "CookingStarted",
          "CookingCompleted",
          "Waiting",
          "OnWay",
          "Delivered",
          "Closed",
          "Cancelled"
        ],
        "type": "string",
        "description": "Delivery order statuses."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatusForUpdate": {
        "title": " ",
        "enum": [
          "Waiting",
          "OnWay",
          "Delivered"
        ],
        "type": "string",
        "description": "Delivery order statuses for update requests."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.ExternalPaymentAdditionalData": {
        "title": " ",
        "required": [
          "customData"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData"
          }
        ],
        "properties": {
          "customData": {
            "type": "string",
            "description": "Payment custom data."
          }
        },
        "additionalProperties": false,
        "description": "Additional data for external payment item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.Gender": {
        "title": " ",
        "enum": [
          "NotSpecified",
          "Male",
          "Female"
        ],
        "type": "string",
        "description": "Sex."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.IikoCardSearchScope": {
        "title": " ",
        "enum": [
          "Reserved",
          "Phone",
          "CardNumber",
          "CardTrack",
          "PaymentToken",
          "FindFaceId"
        ],
        "type": "string"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.LoyaltyCardPaymentAdditionalData": {
        "title": " ",
        "required": [
          "credential",
          "searchScope"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData"
          }
        ],
        "properties": {
          "credential": {
            "type": "string",
            "description": "Guest credential, authorizing payment."
          },
          "searchScope": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.IikoCardSearchScope"
              }
            ],
            "description": "Guest credential search scope."
          }
        },
        "additionalProperties": false,
        "description": "Additional data for LoyaltyApp payment item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.OrderServiceType": {
        "title": " ",
        "enum": [
          "Common",
          "DeliveryByCourier",
          "DeliveryByClient"
        ],
        "type": "string",
        "description": "Order type."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData": {
        "title": " ",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Additional payment data.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "LoyaltyCard": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.LoyaltyCardPaymentAdditionalData",
            "Card": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.CardPaymentAdditionalData",
            "External": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.ExternalPaymentAdditionalData"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentTypeKind": {
        "title": " ",
        "enum": [
          "Unknown",
          "Cash",
          "Card",
          "Credit",
          "Writeoff",
          "Voucher",
          "External",
          "SmartSale",
          "Sberbank",
          "Trpos"
        ],
        "type": "string",
        "description": "Payment type kind."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.CommitDraftRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID of the new order.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Front group ID the order must be sent to.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid",
            "nullable": true
          },
          "createOrderSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Orders.Common.CreateOrderSettings"
              }
            ],
            "description": "Order creation parameters."
          },
          "orderId": {
            "type": "string",
            "description": "ID of the order.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Delivery order draft commitment request."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.CreateDraftRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "order"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID of the new order.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.DeliveryOrderDraft"
              }
            ],
            "description": "Order item."
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Front group ID the order must be sent to.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Draft creation model."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.CreateOrSaveDraftResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order draft order ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for a delivery order draft creation/update return."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.DeleteDraftRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "ID of the order.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Delivery order draft deletion request."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.DeliveryOrderDraft": {
        "title": " ",
        "required": [
          "menuId",
          "phone",
          "items"
        ],
        "type": "object",
        "properties": {
          "menuId": {
            "type": "string",
            "description": "External menu ID."
          },
          "id": {
            "type": "string",
            "description": "Order ID. Must be unique.\r\n> If sent null, it generates automatically on iikoTransport side.",
            "format": "uuid",
            "nullable": true
          },
          "externalNumber": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Order external number.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          },
          "completeBefore": {
            "type": "string",
            "description": "Order fulfillment date.\r\n> Date and time must be local for delivery terminal, without time zone (take a look at example). \r\n> If null, order is urgent and time is calculated based on customer settings,\r\n> i.e. the shortest delivery time possible.\r\n> Permissible values: from current day and 60 days on.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "phone": {
            "maxLength": 40,
            "minLength": 8,
            "type": "string",
            "description": "Telephone number.\r\n> Must begin with symbol \"+\" and must be at least 8 digits."
          },
          "phoneExtension": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "Extension telephone number.\r\n> Must contain only digits and have length from 1 to 10 symbols.\n\n > Allowed from version `9.2.5`.",
            "nullable": true
          },
          "orderTypeId": {
            "type": "string",
            "description": "Order type ID. \r\n\r\nCan be obtained by `/api/1/deliveries/order_types` operation.\r\n\r\n> Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.",
            "format": "uuid",
            "nullable": true
          },
          "orderServiceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderServiceType"
              }
            ],
            "description": "Order service type.\r\n> Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.\n\n > Allowed from version `7.0.3`.",
            "nullable": true
          },
          "deliveryPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint"
              }
            ],
            "description": "Delivery point details.\r\n> Not required in case of customer pickup. Otherwise, required.",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Order comment.",
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer"
              }
            ],
            "description": "Customer.\r\n            \r\n'Regular' customer:\r\n\r\n- can be used only if a customer agrees to take part in the store's loyalty programs\r\n- customer details will be added (updated) to the store's customer database\r\n- benefits (accumulation of rewards, etc.) of active loyalty programs will be made available to the customer\r\n \r\n'One-time' customer:\r\n\r\n- should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details\r\n- customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order",
            "nullable": true
          },
          "guests": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Guests"
              }
            ],
            "description": "Guest details. Not equal to the customer who makes an order.",
            "nullable": true
          },
          "marketingSourceId": {
            "type": "string",
            "description": "Marketing source (advertisement) ID. \r\n            \r\nCan be obtained by `/api/1/marketing_sources` operation.",
            "format": "uuid",
            "nullable": true
          },
          "operatorId": {
            "type": "string",
            "description": "Operator ID.\n\n > Allowed from version `7.6.3`.",
            "format": "uuid",
            "nullable": true
          },
          "deliveryDuration": {
            "type": "integer",
            "description": "Delivery duration.\n\n > Allowed from version `8.8.6`.",
            "format": "int32",
            "nullable": true
          },
          "deliveryZone": {
            "type": "string",
            "description": "Name of delivery zone.\n\n > Allowed from version `8.8.6`.",
            "nullable": true
          },
          "priceCategoryId": {
            "type": "string",
            "description": "Price category id of the order.\r\n\r\nCan be obtained by `/api/2/menu` operation.\n\n > Allowed from version `9.0.5`.",
            "format": "uuid",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo"
            },
            "description": "Combos included in order.",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
            },
            "description": "Order payment components.\n\n > Type **LoyaltyCard** allowed from version `7.1.5`.",
            "nullable": true
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
            },
            "description": "Order tips components.",
            "nullable": true
          },
          "sourceKey": {
            "type": "string",
            "description": "The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration.",
            "nullable": true
          },
          "discountsInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo"
              }
            ],
            "description": "Discounts/surcharges.",
            "nullable": true
          },
          "loyaltyInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo"
              }
            ],
            "description": "Information about Loyalty app.",
            "nullable": true
          },
          "chequeAdditionalInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo"
              }
            ],
            "description": "Cheque additional information.",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData"
            },
            "description": "Order external data.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Delivery order draft."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.FilterDraftsRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID for which the order drafts search will be performed.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "dateFrom": {
            "type": "string",
            "description": "Draft creation time (UTC). Lower limit.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "dateTo": {
            "type": "string",
            "description": "Draft creation time (UTC). Upper limit.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "phone": {
            "type": "string",
            "description": "Phone number.",
            "nullable": true
          },
          "limit": {
            "type": "integer",
            "description": "Desirable size of result set (50 by default).",
            "format": "int32",
            "nullable": true
          },
          "offset": {
            "type": "integer",
            "description": "Offset from the beginning of full result set for paging.",
            "format": "int32",
            "nullable": true
          },
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Delivery sources (DeliveryClub, PH and etc.)",
            "nullable": true
          },
          "terminalGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of terminal groups IDs.",
            "nullable": true
          },
          "searchText": {
            "type": "string",
            "description": "Value for search. Used for prefix search.",
            "nullable": true
          },
          "sortProperty": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.OrderDraftSortProperty"
              }
            ],
            "description": "Sorting property.",
            "nullable": true
          },
          "sortDirection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.SortDirection"
              }
            ],
            "description": "Sorting direction.",
            "nullable": true
          },
          "operatorIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of drafts operator IDs.",
            "nullable": true
          },
          "orderTypeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of drafts order type IDs.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for the list of order drafts by several filters."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.FilterDraftsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "drafts"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "drafts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.OrderDraft"
            },
            "description": "Order drafts list."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for a delivery order drafts return."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.GetDraftRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID for which the order search will be performed.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for an order draft by ID."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.GetDraftResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "order",
          "organizationId",
          "createdAt"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.DeliveryOrderDraft"
              }
            ],
            "description": "Order draft object."
          },
          "lockedByUser": {
            "type": "string",
            "description": "ID of the employee who is currently editing this draft.",
            "format": "uuid",
            "nullable": true
          },
          "lockedAt": {
            "type": "string",
            "description": "Timestamp of when the draft was taken for editing (lock).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.",
            "format": "uuid",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Draft creation time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for an order draft."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.LockOrUnlockDraftRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "employeeId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "ID of the order.",
            "format": "uuid"
          },
          "employeeId": {
            "type": "string",
            "description": "ID of the employee.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Delivery order draft lock or unlock request."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.OrderDraft": {
        "title": " ",
        "required": [
          "id",
          "organizationId",
          "order",
          "createdAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "lockedByUser": {
            "type": "string",
            "description": "ID of the employee, who is editing this draft.",
            "format": "uuid",
            "nullable": true
          },
          "lockedAt": {
            "type": "string",
            "description": "Timestamp of when the draft was taken for editing (lock).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.DeliveryOrderDraft"
              }
            ],
            "description": "Order."
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.",
            "format": "uuid",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Draft creation time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Order draft object."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.OrderDraftSortProperty": {
        "title": " ",
        "enum": [
          "CompleteBefore",
          "Customer"
        ],
        "type": "string",
        "description": "OrderDraft sorting property."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Drafts.SaveDraftRequest": {
        "title": " ",
        "required": [
          "employeeId",
          "organizationId",
          "order"
        ],
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "string",
            "description": "ID of the employee who wants to update order draft.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID of the new order.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Drafts.DeliveryOrderDraft"
              }
            ],
            "description": "Order item."
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Front group ID the order must be sent to.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Draft editing model."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.AddOrderItemsRequest": {
        "title": " ",
        "required": [
          "orderId",
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items (may include ProductOrderItem or CompoundOrderItem)."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo"
            },
            "description": "Combos.\n\n > Allowed from version `7.6.1`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for add order items."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CancelOrderRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "movedOrderId": {
            "type": "string",
            "description": "Fill this field with id of the new order if current order has been moved to the new RMS/terminal group.",
            "format": "uuid",
            "nullable": true
          },
          "cancelCauseId": {
            "type": "string",
            "description": "Cancel order dictionary item id.\n\n > Allowed from version `7.7.1`.",
            "format": "uuid",
            "nullable": true
          },
          "cancelComment": {
            "type": "string",
            "description": "Comment to the delivery cancellation.\n\n > Allowed from version `8.7.6`.",
            "nullable": true
          },
          "removalTypeId": {
            "type": "string",
            "description": "Removal type (for delete printed order items).\n\n > Allowed from version `7.7.1`.",
            "format": "uuid",
            "nullable": true
          },
          "removalComment": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Comment to the charge-off.\n\n > Allowed from version `8.7.6`.",
            "nullable": true
          },
          "userIdForWriteoff": {
            "type": "string",
            "description": "User for writeoff (for delete printed order items).\n\n > Allowed from version `7.7.1`.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for cancel the order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CancelTableOrderRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "removalTypeId": {
            "type": "string",
            "description": "Removal type (used during deletion of printed order items).",
            "format": "uuid",
            "nullable": true
          },
          "removalComment": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Comment to the charge-off.",
            "nullable": true
          },
          "userIdForWriteoff": {
            "type": "string",
            "description": "User for writeoff (used during deletion of printed order items).",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request to cancel a table order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.ChangeDriverInfoRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "driverId": {
            "type": "string",
            "description": "Driver ID.\r\n            \r\nCan be obtained by `/api/1/employees/couriers` operation.",
            "format": "uuid",
            "nullable": true
          },
          "estimatedTime": {
            "type": "string",
            "description": "Delivery estimated time.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Request for change driver info."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CloseDeliveryOrderRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "deliveryDate": {
            "type": "string",
            "description": "Actual delivery time. If empty local iikoFront time will used.\n\n > Allowed from version `8.0.6`.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for close table order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CloseTableOrderRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "chequeAdditionalInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo"
              }
            ],
            "description": "Cheque additional information according to russian federal law #54.",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for close table order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Address": {
        "title": " ",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Order delivery address",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "legacy": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.AddressLegacy",
            "city": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.AddressCity"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.AddressCity": {
        "title": " ",
        "required": [
          "line1"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Address"
          }
        ],
        "properties": {
          "line1": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "Address line 1.\r\nContains the primary address information.\n\n > Allowed from version `8.7.6`."
          },
          "flat": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Apartment.",
            "nullable": true
          },
          "entrance": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Entrance.",
            "nullable": true
          },
          "floor": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Floor.",
            "nullable": true
          },
          "doorphone": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Intercom.",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "description": "Delivery area ID.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order delivery address."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.AddressLegacy": {
        "title": " ",
        "required": [
          "street",
          "house"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Address"
          }
        ],
        "properties": {
          "street": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Street"
              }
            ],
            "description": "Street.\r\n> It's required specify only \"classifierId\" or \"id\" or \"name\" and \"city\"."
          },
          "index": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Postcode.",
            "nullable": true
          },
          "house": {
            "type": "string",
            "description": "House."
          },
          "building": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Building.",
            "nullable": true
          },
          "flat": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Apartment.\r\n> In case useUaeAddressingSystem enabled max length - 100, otherwise - 10.",
            "nullable": true
          },
          "entrance": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Entrance.",
            "nullable": true
          },
          "floor": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Floor.",
            "nullable": true
          },
          "doorphone": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Intercom.",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "description": "Delivery area ID.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order delivery legacy address."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.AnonymousCustomer": {
        "title": " ",
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer"
          }
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Customer name."
          }
        },
        "additionalProperties": false,
        "description": "'One-time' customer:\r\n- should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details\r\n- customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CardPayment": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
          }
        ],
        "properties": {
          "number": {
            "type": "string",
            "description": "Card No.\r\n> In iikoFront, it is possible to make card payment without card No.",
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "description": "Bank card payment."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CardTipsPayment": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
          }
        ],
        "properties": {
          "number": {
            "type": "string",
            "description": "Card No.\r\n> In iikoFront, it is possible to make card payment without card No.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Bank card tips payment."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CashPayment": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
          }
        ],
        "additionalProperties": false,
        "description": "Cash payment. \r\n<remarks>\r\nNo additional fields for base class.\r\n</remarks>"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CashTipsPayment": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
          }
        ],
        "additionalProperties": false,
        "description": "Cash tips payment. \r\n<remarks>\r\nNo additional fields for base class.\r\n</remarks>"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo": {
        "title": " ",
        "required": [
          "id",
          "name",
          "amount",
          "price",
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Combo ID.\r\nMUST be unique for the whole system. Therefore it must be generated with Guid.NewGuid().",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of combo."
          },
          "amount": {
            "type": "integer",
            "description": "Quantity.",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "description": "Price of one combo.",
            "format": "double"
          },
          "sourceId": {
            "type": "string",
            "description": "Combo validity ID.",
            "format": "uuid"
          },
          "programId": {
            "type": "string",
            "description": "Card program ID.\n\n > Allowed from version `7.6.1`.",
            "format": "uuid"
          },
          "sizeId": {
            "type": "string",
            "description": "Size ID. Required if combo has a size scale.\n\n > Allowed from version `8.5.6`.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Combo in order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ComboItemInformation": {
        "title": " ",
        "required": [
          "comboId",
          "comboSourceId",
          "comboGroupId"
        ],
        "type": "object",
        "properties": {
          "comboId": {
            "type": "string",
            "description": "Created combo ID.\r\nMust be one of combos.id generated values.",
            "format": "uuid"
          },
          "comboSourceId": {
            "type": "string",
            "description": "Action ID that defines combo.",
            "format": "uuid"
          },
          "comboGroupId": {
            "type": "string",
            "description": "Combo group ID to which item belongs.",
            "format": "uuid"
          },
          "comboGroupName": {
            "type": "string",
            "description": "Combo group name to which item belongs.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Combo details if order item belongs to combo"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CompoundOrderItem": {
        "title": " ",
        "required": [
          "primaryComponent"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
          }
        ],
        "properties": {
          "primaryComponent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CompoundOrderItemComponent"
              }
            ],
            "description": "Main component."
          },
          "secondaryComponent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CompoundOrderItemComponent"
              }
            ],
            "description": "Minor component.",
            "nullable": true
          },
          "commonModifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Modifier"
            },
            "description": "Indivisible modifiers.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order item: composite item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CompoundOrderItemComponent": {
        "title": " ",
        "required": [
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Item ID.",
            "format": "uuid"
          },
          "modifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Modifier"
            },
            "description": "Modifiers.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Price.",
            "format": "double",
            "nullable": true
          },
          "positionId": {
            "type": "string",
            "description": "Unique identifier of the item in the order.\r\nMUST be unique for the whole system. Therefore it must be generated with Guid.NewGuid().\r\n> If sent null, it generates automatically on iikoTransport side.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Item component"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer": {
        "title": " ",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Customer base info.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "regular": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RegularCustomer",
            "one-time": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.AnonymousCustomer"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryOrder": {
        "title": " ",
        "required": [
          "phone",
          "items"
        ],
        "type": "object",
        "properties": {
          "menuId": {
            "type": "string",
            "description": "External menu ID.",
            "nullable": true,
            "example": null
          },
          "id": {
            "type": "string",
            "description": "Order ID. Must be unique.\r\n> If sent null, it generates automatically on iikoTransport side.",
            "format": "uuid",
            "nullable": true
          },
          "externalNumber": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Order external number.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          },
          "completeBefore": {
            "type": "string",
            "description": "Order fulfillment date.\r\n> Date and time must be local for delivery terminal, without time zone (take a look at example). \r\n> If null, order is urgent and time is calculated based on customer settings,\r\n> i.e. the shortest delivery time possible.\r\n> Permissible values: from current day and 60 days on.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "phone": {
            "maxLength": 40,
            "minLength": 8,
            "type": "string",
            "description": "Telephone number.\r\n> Must begin with symbol \"+\" and must be at least 8 digits."
          },
          "phoneExtension": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "Extension telephone number.\r\n> Must contain only digits and have length from 1 to 10 symbols.\n\n > Allowed from version `9.2.5`.",
            "nullable": true
          },
          "orderTypeId": {
            "type": "string",
            "description": "Order type ID. \r\n\r\nCan be obtained by `/api/1/deliveries/order_types` operation.\r\n\r\n> Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.",
            "format": "uuid",
            "nullable": true
          },
          "orderServiceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderServiceType"
              }
            ],
            "description": "Order service type.\r\n> Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.\n\n > Allowed from version `7.0.3`.",
            "nullable": true
          },
          "deliveryPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint"
              }
            ],
            "description": "Delivery point details.\r\n> Not required in case of customer pickup. Otherwise, required.",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Order comment.",
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer"
              }
            ],
            "description": "Customer.\r\n            \r\n'Regular' customer:\r\n\r\n- can be used only if a customer agrees to take part in the store's loyalty programs\r\n- customer details will be added (updated) to the store's customer database\r\n- benefits (accumulation of rewards, etc.) of active loyalty programs will be made available to the customer\r\n \r\n'One-time' customer:\r\n\r\n- should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details\r\n- customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order",
            "nullable": true
          },
          "guests": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Guests"
              }
            ],
            "description": "Guest details. Not equal to the customer who makes an order.",
            "nullable": true
          },
          "marketingSourceId": {
            "type": "string",
            "description": "Marketing source (advertisement) ID. \r\n            \r\nCan be obtained by `/api/1/marketing_sources` operation.",
            "format": "uuid",
            "nullable": true
          },
          "operatorId": {
            "type": "string",
            "description": "Operator ID.\n\n > Allowed from version `7.6.3`.",
            "format": "uuid",
            "nullable": true
          },
          "deliveryDuration": {
            "type": "integer",
            "description": "Delivery duration.\n\n > Allowed from version `8.8.6`.",
            "format": "int32",
            "nullable": true
          },
          "deliveryZone": {
            "type": "string",
            "description": "Name of delivery zone.\n\n > Allowed from version `8.8.6`.",
            "nullable": true
          },
          "priceCategoryId": {
            "type": "string",
            "description": "Price category id of the order.\r\n\r\nCan be obtained by `/api/2/menu` operation.\n\n > Allowed from version `9.0.5`.",
            "format": "uuid",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo"
            },
            "description": "Combos included in order.",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
            },
            "description": "Order payment components.\n\n > Type **LoyaltyCard** allowed from version `7.1.5`.",
            "nullable": true
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
            },
            "description": "Order tips components.",
            "nullable": true
          },
          "sourceKey": {
            "type": "string",
            "description": "The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration.",
            "nullable": true
          },
          "discountsInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo"
              }
            ],
            "description": "Discounts/surcharges.",
            "nullable": true
          },
          "loyaltyInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo"
              }
            ],
            "description": "Information about Loyalty app.",
            "nullable": true
          },
          "chequeAdditionalInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo"
              }
            ],
            "description": "Cheque additional information.",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData"
            },
            "description": "Order external data.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Delivery order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint": {
        "title": " ",
        "type": "object",
        "properties": {
          "coordinates": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.Coordinates"
              }
            ],
            "description": "Delivery address coordinates.\r\n> Allowed from version `7.7.3`.",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Address"
              }
            ],
            "description": "Order delivery address.\r\n            \r\n> The use of type **City** is allowed if the parameter **addressFormatType == City**.\r\n            \r\n> Can be obtained by `/api/1/organizations` or `/api/1/organizations/settings` operations (`addressFormatType` parameter).",
            "nullable": true
          },
          "externalCartographyId": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Delivery location custom code in customer's API system.",
            "nullable": true
          },
          "comment": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "Additional information.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Delivery location details."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Discount": {
        "title": " ",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Discount/surcharge.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "RMS": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RmsDiscount",
            "iikoCard": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.IikoCardDiscount"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountCard": {
        "title": " ",
        "required": [
          "track"
        ],
        "type": "object",
        "properties": {
          "track": {
            "type": "string",
            "description": "Track of discount card to be applied to order."
          }
        },
        "additionalProperties": false,
        "description": "Discount card."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "card": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountCard"
              }
            ],
            "description": "Track of discount card to be applied to order.",
            "nullable": true
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Discount"
            },
            "description": "Discounts/surcharges.\n\n > Type **iikoCard** allowed from version `7.4.4`.",
            "nullable": true
          },
          "fixedLoyaltyDiscounts": {
            "type": "boolean",
            "description": "Whether loyalty discounts should be fixed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information on discounts/surcharges to be applied to order.\r\n<remarks>\r\nWhether map or non-blank list of discounts must be set.\r\n</remarks>"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData": {
        "title": " ",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key."
          },
          "value": {
            "type": "string",
            "description": "Value."
          },
          "isPublic": {
            "type": "boolean",
            "description": "The transmitted data may contain both technical identifiers and information useful for the restaurant employee.\r\nIf it is necessary for the data to be included in the sales report, then this parameter must be set to TRUE, otherwise to FALSE."
          }
        },
        "additionalProperties": false,
        "description": "Order external data."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalPayment": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
          }
        ],
        "additionalProperties": false,
        "description": "External payment type"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalTipsPayment": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
          }
        ],
        "additionalProperties": false,
        "description": "External tips payment type"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Guests": {
        "title": " ",
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of persons in order. This field defines the number of cutlery sets",
            "format": "int32"
          },
          "splitBetweenPersons": {
            "type": "boolean",
            "description": "Attribute that shows whether order must be split among guests.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information on guests."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.IikoCardDiscount": {
        "title": " ",
        "required": [
          "programId",
          "programName",
          "discountItems"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Discount"
          }
        ],
        "properties": {
          "programId": {
            "type": "string",
            "description": "Card program ID.",
            "format": "uuid"
          },
          "programName": {
            "type": "string",
            "description": "Card program name."
          },
          "discountItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.IikoCardDiscountItem"
            },
            "description": "Discount information for order items."
          }
        },
        "additionalProperties": false,
        "description": "Card discount/surcharge."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.IikoCardDiscountItem": {
        "title": " ",
        "required": [
          "positionId",
          "sum",
          "amount"
        ],
        "type": "object",
        "properties": {
          "positionId": {
            "type": "string",
            "description": "Position ID of order item.",
            "format": "uuid"
          },
          "sum": {
            "type": "number",
            "description": "Discount/surcharge sum.",
            "format": "double"
          },
          "amount": {
            "type": "number",
            "description": "Amount.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Card discount/surcharge item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyCardPayment": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
          }
        ],
        "additionalProperties": false,
        "description": "Payment with Card loyalty system."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "coupon": {
            "type": "string",
            "description": "Coupon No. that was considered when calculating loyalty program.",
            "nullable": true
          },
          "applicableManualConditions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Information about applied manual conditions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about Loyalty app."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Modifier": {
        "title": " ",
        "required": [
          "productId",
          "amount"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Modifier item ID.\r\n            \r\nCan be obtained by `/api/1/nomenclature` operation.",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "description": "Quantity.",
            "format": "double"
          },
          "productGroupId": {
            "type": "string",
            "description": "Modifiers group ID (for group modifier). Required for a group modifier.\r\n            \r\nCan be obtained by `/api/1/nomenclature` operation.",
            "format": "uuid",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Unit price.",
            "format": "double",
            "nullable": true
          },
          "positionId": {
            "type": "string",
            "description": "Unique identifier of the item in the order.\r\nMUST be unique for the whole system. Therefore it must be generated with Guid.NewGuid().\r\n> If sent null, it generates automatically on iikoTransport side.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Modifier."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Order": {
        "title": " ",
        "required": [
          "phone",
          "items"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Order ID. Must be unique.\r\n> If sent null, it generates automatically on iikoTransport side.",
            "format": "uuid",
            "nullable": true
          },
          "externalNumber": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Order external number.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          },
          "completeBefore": {
            "type": "string",
            "description": "Order fulfillment date.\r\n> Date and time must be local for delivery terminal, without time zone (take a look at example). \r\n> If null, order is urgent and time is calculated based on customer settings,\r\n> i.e. the shortest delivery time possible.\r\n> Permissible values: from current day and 60 days on.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "phone": {
            "maxLength": 40,
            "minLength": 8,
            "type": "string",
            "description": "Telephone number.\r\n> Must begin with symbol \"+\" and must be at least 8 digits."
          },
          "phoneExtension": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "Extension telephone number.\r\n> Must contain only digits and have length from 1 to 10 symbols.\n\n > Allowed from version `9.2.5`.",
            "nullable": true
          },
          "orderTypeId": {
            "type": "string",
            "description": "Order type ID. \r\n\r\nCan be obtained by `/api/1/deliveries/order_types` operation.\r\n\r\n> Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.",
            "format": "uuid",
            "nullable": true
          },
          "orderServiceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderServiceType"
              }
            ],
            "description": "Order service type.\r\n> Only one of the fields must be defined: **orderTypeId** or **orderServiceType**.\n\n > Allowed from version `7.0.3`.",
            "nullable": true
          },
          "deliveryPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint"
              }
            ],
            "description": "Delivery point details.\r\n> Not required in case of customer pickup. Otherwise, required.",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Order comment.",
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer"
              }
            ],
            "description": "Customer.\r\n            \r\n'Regular' customer:\r\n\r\n- can be used only if a customer agrees to take part in the store's loyalty programs\r\n- customer details will be added (updated) to the store's customer database\r\n- benefits (accumulation of rewards, etc.) of active loyalty programs will be made available to the customer\r\n \r\n'One-time' customer:\r\n\r\n- should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details\r\n- customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order",
            "nullable": true
          },
          "guests": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Guests"
              }
            ],
            "description": "Guest details. Not equal to the customer who makes an order.",
            "nullable": true
          },
          "marketingSourceId": {
            "type": "string",
            "description": "Marketing source (advertisement) ID. \r\n            \r\nCan be obtained by `/api/1/marketing_sources` operation.",
            "format": "uuid",
            "nullable": true
          },
          "operatorId": {
            "type": "string",
            "description": "Operator ID.\n\n > Allowed from version `7.6.3`.",
            "format": "uuid",
            "nullable": true
          },
          "deliveryDuration": {
            "type": "integer",
            "description": "Delivery duration.\n\n > Allowed from version `8.8.6`.",
            "format": "int32",
            "nullable": true
          },
          "deliveryZone": {
            "type": "string",
            "description": "Name of delivery zone.\n\n > Allowed from version `8.8.6`.",
            "nullable": true
          },
          "priceCategoryId": {
            "type": "string",
            "description": "Price category id of the order.\r\n\r\nCan be obtained by `/api/2/menu` operation.\n\n > Allowed from version `9.0.5`.",
            "format": "uuid",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo"
            },
            "description": "Combos included in order.",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
            },
            "description": "Order payment components.\n\n > Type **LoyaltyCard** allowed from version `7.1.5`.",
            "nullable": true
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
            },
            "description": "Order tips components.",
            "nullable": true
          },
          "sourceKey": {
            "type": "string",
            "description": "The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration.",
            "nullable": true
          },
          "discountsInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo"
              }
            ],
            "description": "Discounts/surcharges.",
            "nullable": true
          },
          "loyaltyInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo"
              }
            ],
            "description": "Information about Loyalty app.",
            "nullable": true
          },
          "chequeAdditionalInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo"
              }
            ],
            "description": "Cheque additional information.",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData"
            },
            "description": "Order external data.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem": {
        "title": " ",
        "required": [
          "type",
          "amount"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "amount": {
            "maximum": 999.999,
            "minimum": 0,
            "type": "number",
            "description": "Quantity.",
            "format": "double"
          },
          "productSizeId": {
            "type": "string",
            "description": "Size ID. Required if a stock list item has a size scale.",
            "format": "uuid",
            "nullable": true
          },
          "comboInformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ComboItemInformation"
              }
            ],
            "description": "Combo details if combo includes order item.",
            "nullable": true
          },
          "comment": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Comment.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order item.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Product": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ProductOrderItem",
            "Compound": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CompoundOrderItem"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderServiceType": {
        "title": " ",
        "enum": [
          "DeliveryByCourier",
          "DeliveryByClient"
        ],
        "type": "string",
        "description": "Order type."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment": {
        "title": " ",
        "required": [
          "paymentTypeKind",
          "sum",
          "paymentTypeId"
        ],
        "type": "object",
        "properties": {
          "paymentTypeKind": {
            "type": "string"
          },
          "sum": {
            "maximum": 10000000000,
            "minimum": 0,
            "type": "number",
            "description": "Amount due.",
            "format": "double"
          },
          "paymentTypeId": {
            "type": "string",
            "description": "Payment type. \r\n            \r\nCan be obtained by `/api/1/payment_types` operation.",
            "format": "uuid"
          },
          "isProcessedExternally": {
            "type": "boolean",
            "description": "Whether payment item is processed by external payment system (made from outside)."
          },
          "paymentAdditionalData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData"
              }
            ],
            "description": "Additional payment parameters.",
            "nullable": true
          },
          "isFiscalizedExternally": {
            "type": "boolean",
            "description": "Whether the payment item is externally fiscalized.\n\n > Allowed from version `7.6.3`."
          },
          "isPrepay": {
            "type": "boolean",
            "description": "Whether the payment item is prepay. Unavailable for `paymentKindType.LoyaltyCard`.\n\n > Allowed from version `8.2.6`."
          }
        },
        "additionalProperties": false,
        "description": "Base class of delivery order payment item.",
        "discriminator": {
          "propertyName": "paymentTypeKind",
          "mapping": {
            "Cash": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CashPayment",
            "Card": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CardPayment",
            "LoyaltyCard": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyCardPayment",
            "External": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalPayment"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ProductOrderItem": {
        "title": " ",
        "required": [
          "productId",
          "price"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
          }
        ],
        "properties": {
          "productId": {
            "type": "string",
            "description": "ID of menu item.\r\n            \r\nCan be obtained by `/api/1/nomenclature` operation.",
            "format": "uuid"
          },
          "modifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Modifier"
            },
            "description": "Modifiers.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Price per item unit. Can be sent different from the price in the base menu.",
            "format": "double"
          },
          "positionId": {
            "type": "string",
            "description": "Unique identifier of the item in the order.\r\nMUST be unique for the whole system. Therefore it must be generated with Guid.NewGuid().\r\n> If sent null, it generates automatically on iikoTransport side.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order item: item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RegularCustomer": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Customer"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Existing customer ID in RMS. \r\n> If null - the phone number is searched in database, otherwise the new customer is created in RMS.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Name of customer.\r\n> Required for new customers (i.e. if \"id\" == null)\r\n> Not required if \"id\" specified.",
            "nullable": true
          },
          "surname": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "comment": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Comment.",
            "nullable": true
          },
          "birthdate": {
            "type": "string",
            "description": "Date of birth.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true
          },
          "shouldReceivePromoActionsInfo": {
            "type": "boolean",
            "description": "Deprecated, use \"shouldReceiveOrderStatusNotifications\" instead.",
            "nullable": true,
            "deprecated": true
          },
          "shouldReceiveOrderStatusNotifications": {
            "type": "boolean",
            "description": "Whether customer receives order status notification messages.",
            "nullable": true
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.Gender"
              }
            ],
            "description": "Gender."
          }
        },
        "additionalProperties": false,
        "description": "'Regular' customer:\r\n- can be used only if a customer agrees to take part in the store's loyalty programs\r\n- customer details will be added (updated) to the store's customer database\r\n- benefits (accumulation of rewards, etc.) of active loyalty programs will be made available to the customer"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RmsDiscount": {
        "title": " ",
        "required": [
          "discountTypeId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Discount"
          }
        ],
        "properties": {
          "discountTypeId": {
            "type": "string",
            "description": "Discount type. \r\n            \r\nCan be obtained by `/api/1/discounts` operation.",
            "format": "uuid"
          },
          "sum": {
            "type": "number",
            "description": "Discount/surcharge sum.",
            "format": "double"
          },
          "selectivePositions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Order item positions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "RMS discount/surcharge.\r\n<remarks>\r\nAmount must be specified only if discount has \"assign amount\" setting enabled.\r\nIn any other case, amount must not be specified. \r\n</remarks>"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Street": {
        "title": " ",
        "type": "object",
        "properties": {
          "classifierId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Street ID in classifier, e.g., address database.\r\n\\n > For using in the Russian Federation only.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "ID. \r\n            \r\nCan be obtained by `/api/1/streets/by_city` operation.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "city": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "City name.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Street."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment": {
        "title": " ",
        "required": [
          "paymentTypeKind",
          "sum",
          "paymentTypeId"
        ],
        "type": "object",
        "properties": {
          "paymentTypeKind": {
            "type": "string"
          },
          "tipsTypeId": {
            "type": "string",
            "description": "Tips type ID.\r\n            \r\nCan be obtained by `/api/1/tips_types` operation.",
            "format": "uuid"
          },
          "sum": {
            "maximum": 10000000000,
            "minimum": 0,
            "type": "number",
            "description": "Amount due.",
            "format": "double"
          },
          "paymentTypeId": {
            "type": "string",
            "description": "Payment type. \r\n            \r\nCan be obtained by `/api/1/payment_types` operation.",
            "format": "uuid"
          },
          "isProcessedExternally": {
            "type": "boolean",
            "description": "Whether payment item is processed by external payment system (made from outside)."
          },
          "paymentAdditionalData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentAdditionalData"
              }
            ],
            "description": "Additional payment parameters.",
            "nullable": true
          },
          "isFiscalizedExternally": {
            "type": "boolean",
            "description": "Whether the payment item is externally fiscalized.\n\n > Allowed from version `7.6.3`."
          },
          "isPrepay": {
            "type": "boolean",
            "description": "Whether the payment item is prepay. Unavailable for `paymentKindType.LoyaltyCard`.\n\n > Allowed from version `8.2.6`."
          }
        },
        "additionalProperties": false,
        "description": "Base class of delivery order payment item.",
        "discriminator": {
          "propertyName": "paymentTypeKind",
          "mapping": {
            "Cash": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CashTipsPayment",
            "Card": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.CardTipsPayment",
            "External": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalTipsPayment"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrderRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "order"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID of the new order.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Front group ID the order must be sent to.\r\n\r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid",
            "nullable": true
          },
          "createOrderSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Orders.Common.CreateOrderSettings"
              }
            ],
            "description": "Order creation parameters.",
            "nullable": true
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryOrder"
              }
            ],
            "description": "Order."
          }
        },
        "additionalProperties": false,
        "description": "Order creation model."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndFilterRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID for which an order search will be performed.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "terminalGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of terminal groups IDs.",
            "nullable": true
          },
          "deliveryDateFrom": {
            "type": "string",
            "description": "Order delivery date (Local for delivery terminal). Lower limit.\r\n            \r\nThe guaranteed order availability period is the last 7 days. To access earlier orders, use the `/api/1/deliveries/history/by_delivery_date_and_phone` method.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "deliveryDateTo": {
            "type": "string",
            "description": "Order delivery date (Local for delivery terminal). Upper limit.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus"
            },
            "description": "Allowed order statuses.",
            "nullable": true
          },
          "hasProblem": {
            "type": "boolean",
            "description": "If true, delivery has a problem.\r\n> Conditions under which the order has a problem:\r\n> * order.problem.hasProblem is true;\r\n> * order status is Unconfirmed and CookingStartTime before now;\r\n> * order status is ReadyForCooking and (CookingStartTime + timeToCookingErrorTimeout) before now;\r\n> * order status is CookingCompleted or Waiting and (CookingStartTime + cookingTimeout) before now.",
            "nullable": true
          },
          "orderServiceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderServiceType"
              }
            ],
            "description": "Order service type.",
            "nullable": true
          },
          "searchText": {
            "type": "string",
            "description": "Value for search. Used for prefix search.",
            "nullable": true
          },
          "timeToCookingErrorTimeout": {
            "type": "integer",
            "description": "Error timeout for status time to cooking, in seconds.",
            "format": "int32"
          },
          "cookingTimeout": {
            "type": "integer",
            "description": "Expected cooking time, in seconds.",
            "format": "int32"
          },
          "sortProperty": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.OrderSortProperty"
              }
            ],
            "description": "Sorting property."
          },
          "sortDirection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.SortDirection"
              }
            ],
            "description": "Sorting direction."
          },
          "rowsCount": {
            "type": "integer",
            "description": "Maximum number of items returned.",
            "format": "int32"
          },
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Source keys.",
            "nullable": true
          },
          "orderIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Order IDs.\r\n            \r\n> Must be null if \"posOrderIds\" is not null.",
            "nullable": true
          },
          "posOrderIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "POS order IDs.\r\n            \r\n> Must be null if \"orderIds\" is not null.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for information about orders from external source and based on additional filters."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndPhoneRequest": {
        "title": " ",
        "required": [
          "phone",
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Delivery order phone number.",
            "nullable": true
          },
          "deliveryDateFrom": {
            "type": "string",
            "description": "Order delivery date (Local for delivery terminal). Lower limit.\r\n            \r\nThe guaranteed order availability period is the last 7 days. To access earlier orders, use the `/api/1/deliveries/history/by_delivery_date_and_phone` method.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "deliveryDateTo": {
            "type": "string",
            "description": "Order delivery date (Local for delivery terminal). Upper limit.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID for which an order search will be performed.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "startRevision": {
            "type": "integer",
            "description": "Revision start number beginning from which (but not including) new/edited orders will be returned.",
            "format": "int64",
            "nullable": true
          },
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Source keys.",
            "nullable": true
          },
          "rowsCount": {
            "type": "integer",
            "description": "Maximum number of items returned.\r\n<remarks>\r\nIf null, all items will be returned.\r\n</remarks>",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for a list of orders by phone number."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByDeliveryDateAndStatusRequest": {
        "title": " ",
        "required": [
          "organizationIds",
          "deliveryDateFrom"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID for which an order search will be performed.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "deliveryDateFrom": {
            "type": "string",
            "description": "Order delivery date (Local for delivery terminal). Lower limit.\r\n            \r\nThe guaranteed order availability period is the last 7 days. To access earlier orders, use the `/api/1/deliveries/history/by_delivery_date_and_phone` method.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "deliveryDateTo": {
            "type": "string",
            "description": "Order delivery date (Local for delivery terminal). Upper limit.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus"
            },
            "description": "Allowed order statuses.",
            "nullable": true
          },
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Source keys.",
            "nullable": true
          },
          "courierIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of driver IDs.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for information about orders."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByIdRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID for which an order search will be performed.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "IDs of orders information on which is required.\r\n            \r\n> Required if \"posOrderIds\" is null. Must be null if \"posOrderIds\" is not null.\r\n            \r\n> Maximum allowed \"orderIds\" to request - `200`.\r\n\r\nThe guaranteed order availability period is the last 7 days. To access earlier orders, use the `/api/1/deliveries/history/by_delivery_date_and_phone` method.",
            "nullable": true
          },
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Source keys.",
            "nullable": true
          },
          "posOrderIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "POS order IDs information on which is required.\r\n            \r\n> Required if \"orderIds\" is null. Must be null if \"orderIds\" is not null.\r\n            \r\n> Maximum allowed \"posOrderIds\" to request - `200`.\r\n\r\nThe guaranteed order availability period is the last 7 days. To access earlier orders, use the `/api/1/deliveries/history/by_delivery_date_and_phone` method.",
            "nullable": true
          },
          "returnExternalDataKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Keys for retrun external data information.",
            "nullable": true
          },
          "returnLockedByUser": {
            "type": "boolean",
            "description": "Whether to check and return LockedByUser property (see FullOrderUpdateRequest.EmployeeId)."
          }
        },
        "additionalProperties": false,
        "description": "Request for information about orders using IDs."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersByRevisionRequest": {
        "title": " ",
        "required": [
          "startRevision",
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "startRevision": {
            "type": "integer",
            "description": "Revision start number beginning from which (but not including) new/edited orders will be returned.\r\n            \r\n> Maximum revision offset to request - `3 hours`.",
            "format": "int64"
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID for which an order search will be performed.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Source keys.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for a list of edited orders starting from specified revision number."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.OrdersHistoryByDeliveryDateAndPhoneRequest": {
        "title": " ",
        "required": [
          "phone",
          "organizationIds",
          "rowsCount"
        ],
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Delivery order phone number."
          },
          "deliveryDateFrom": {
            "type": "string",
            "description": "Order delivery date (Local for delivery terminal). Lower limit.\r\n            \r\nOrder details are stored for 90 days.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "deliveryDateTo": {
            "type": "string",
            "description": "Order delivery date (Local for delivery terminal). Upper limit.\r\n            \r\nOrder details are stored for 90 days.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID for which an order search will be performed.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "startRevision": {
            "type": "integer",
            "description": "Revision start number beginning from which (but not including) orders will be returned.\r\n            \r\n> Maximum revision offset to request - `3 hours`.",
            "format": "int64",
            "nullable": true
          },
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Source keys.",
            "nullable": true
          },
          "rowsCount": {
            "type": "integer",
            "description": "Maximum number of items returned.\r\n            \r\n> Maximum numbers of items to request - `200`.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Request for a list of historical orders by phone number."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.OrderSortProperty": {
        "title": " ",
        "enum": [
          "Number",
          "CompleteBefore",
          "Sum",
          "Customer",
          "Courier",
          "Status",
          "OrderTypeName"
        ],
        "type": "string",
        "description": "Order sorting property."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.PrintDeliveryBillRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request to print delivery bill."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateDeliveryStatusRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "deliveryStatus"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "deliveryStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatusForUpdate"
              }
            ],
            "description": "Delivery status. Can be only switched between these three statuses."
          },
          "deliveryDate": {
            "type": "string",
            "description": "The date and time when the order was received by the guest (Local for delivery terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Request for delivery status update."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.CancelDeliveryConfirmationRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for cancel delivery confirmation."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeCompleteBeforeRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "newCompleteBefore"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "newCompleteBefore": {
            "type": "string",
            "description": "New time when client wants the order to be delivered (Local for delivery terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Request for change time when client wants the order to be delivered."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryCommentRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "comment"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "comment": {
            "type": "string",
            "description": "New delivery comment."
          }
        },
        "additionalProperties": false,
        "description": "Request for change delivery comment."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryOperatorRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "operatorId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "operatorId": {
            "type": "string",
            "description": "Operator to assign the order to.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for assign/change the order operator."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeDeliveryPointRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "newDeliveryPoint"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "newDeliveryPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint"
              }
            ],
            "description": "New address of delivery."
          }
        },
        "additionalProperties": false,
        "description": "Request for change order's delivery point information."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeExternalDataRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "externalData"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData"
            },
            "description": "External data to change."
          }
        },
        "additionalProperties": false,
        "description": "Request for change of delivery or table order external data."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangePaymentsRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "payments"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
            },
            "description": "Order payments."
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
            },
            "description": "Order tips.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Change order's payments request."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeDeliveryByClient": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeRequest"
          }
        ],
        "additionalProperties": false,
        "description": "Change order's delivery type to DeliveryByClient."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeDeliveryByCourier": {
        "title": " ",
        "required": [
          "deliveryPoint"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeRequest"
          }
        ],
        "properties": {
          "deliveryPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DeliveryPoint"
              }
            ],
            "description": "Address of delivery."
          }
        },
        "additionalProperties": false,
        "description": "Change order's delivery type to DeliveryByCourier."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeRequest": {
        "title": " ",
        "required": [
          "newServiceType",
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "newServiceType": {
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for change order's delivery type.",
        "discriminator": {
          "propertyName": "newServiceType",
          "mapping": {
            "DeliveryByCourier": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeDeliveryByCourier",
            "DeliveryByClient": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ChangeServiceTypeDeliveryByClient"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.ConfirmDeliveryRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for confirm delivery."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.OrderPaymentItem": {
        "title": " ",
        "required": [
          "sum",
          "paymentTypeId",
          "isProcessedExternally"
        ],
        "type": "object",
        "properties": {
          "sum": {
            "type": "number",
            "description": "Amount due",
            "format": "double"
          },
          "paymentTypeId": {
            "type": "string",
            "description": "Payment type ID.",
            "format": "uuid"
          },
          "isProcessedExternally": {
            "type": "boolean",
            "description": "Payment item is processed by external payment system."
          }
        },
        "additionalProperties": false,
        "description": "Payments details."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderCourierRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "employeeId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "employeeId": {
            "type": "string",
            "description": "Courier ID.\r\n            \r\nCan be obtained by `/api/1/employees/couriers` operation.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for order courier update."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderPaymentsRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "paymentItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrder.OrderPaymentItem"
            },
            "description": "Payment details."
          }
        },
        "additionalProperties": false,
        "description": "Request for order payment update."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Request.UpdateOrderProblemRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "hasProblem",
          "problem"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "hasProblem": {
            "type": "boolean",
            "description": "Problem flag."
          },
          "problem": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "Problem text.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for order problem update."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.CheckCreateOrderResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "errorInfo"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "errorInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorInfo"
              }
            ],
            "description": "Order check creation error details.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for a delivery check create order return."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Address": {
        "title": " ",
        "required": [
          "region"
        ],
        "type": "object",
        "properties": {
          "street": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Street"
              }
            ],
            "description": "Street.",
            "nullable": true
          },
          "index": {
            "type": "string",
            "description": "Postcode.",
            "nullable": true
          },
          "house": {
            "type": "string",
            "description": "House.",
            "nullable": true
          },
          "building": {
            "type": "string",
            "description": "Building.",
            "nullable": true
          },
          "flat": {
            "type": "string",
            "description": "Apartment.",
            "nullable": true
          },
          "entrance": {
            "type": "string",
            "description": "Entrance.",
            "nullable": true
          },
          "floor": {
            "type": "string",
            "description": "Floor.",
            "nullable": true
          },
          "doorphone": {
            "type": "string",
            "description": "Intercom.",
            "nullable": true
          },
          "region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Region"
              }
            ],
            "description": "Region",
            "nullable": true
          },
          "line1": {
            "type": "string",
            "description": "Address line 1.\r\nContains the primary address information.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Address details."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.AnonymousCustomer": {
        "title": " ",
        "required": [
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer"
          }
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Customer name."
          }
        },
        "additionalProperties": false,
        "description": "'One-time' customer:\r\n- should be used if a customer does not agree to take part in the store's loyalty programs or an aggregator (external system) does not provide customer details\r\n- customer details will NOT be added to the store's customer database and will be used ONLY to complete the current order"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CancelCause": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Description."
          }
        },
        "additionalProperties": false,
        "description": "Delivery cancellation reason."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CancelInfo": {
        "title": " ",
        "required": [
          "whenCancelled",
          "cause"
        ],
        "type": "object",
        "properties": {
          "whenCancelled": {
            "type": "string",
            "description": "Cancellation time (Local for delivery terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "cause": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CancelCause"
              }
            ],
            "description": "Delivery cancellation reason."
          },
          "comment": {
            "type": "string",
            "description": "Delivery cancellation comment.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order cancellation details"
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.City": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "City."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ComboItemInformation": {
        "title": " ",
        "required": [
          "comboId",
          "comboSourceId",
          "groupId"
        ],
        "type": "object",
        "properties": {
          "comboId": {
            "type": "string",
            "description": "New combo ID.",
            "format": "uuid"
          },
          "comboSourceId": {
            "type": "string",
            "description": "Action ID that defines combo.",
            "format": "uuid"
          },
          "groupId": {
            "type": "string",
            "description": "Combo group ID to which item belongs.",
            "format": "uuid"
          },
          "groupName": {
            "type": "string",
            "description": "Combo group name to which item belongs.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information on order item to combo relation."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundItemTemplate": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "Modifier scheme information."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundOrderItem": {
        "title": " ",
        "required": [
          "primaryComponent"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem"
          }
        ],
        "properties": {
          "primaryComponent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundOrderItemComponent"
              }
            ],
            "description": "Main component."
          },
          "secondaryComponent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundOrderItemComponent"
              }
            ],
            "description": "Additional component.",
            "nullable": true
          },
          "commonModifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemModifier"
            },
            "description": "Indivisible modifiers.",
            "nullable": true
          },
          "template": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundItemTemplate"
              }
            ],
            "description": "Modifier scheme.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order item: composite item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundOrderItemComponent": {
        "title": " ",
        "required": [
          "product",
          "price",
          "cost",
          "pricePredefined"
        ],
        "type": "object",
        "properties": {
          "product": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product"
              }
            ],
            "description": "Item."
          },
          "modifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemModifier"
            },
            "description": "Modifiers.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Price per item unit. Can be sent different from the price in the base menu.",
            "format": "double"
          },
          "cost": {
            "type": "number",
            "description": "Item total including tax, discounts/surcharges.",
            "format": "double"
          },
          "pricePredefined": {
            "type": "boolean",
            "description": "Whether price is predefined."
          },
          "positionId": {
            "type": "string",
            "description": "Unique identifier of the item in the order and for the whole system.",
            "format": "uuid",
            "nullable": true
          },
          "taxPercent": {
            "type": "number",
            "description": "Tax rate.",
            "format": "double",
            "nullable": true
          },
          "resultSum": {
            "type": "number",
            "description": "Total amount per item including tax, discounts/surcharges.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Part of composite item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Conception": {
        "title": " ",
        "required": [
          "id",
          "name",
          "code"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "code": {
            "type": "string",
            "description": "Code."
          }
        },
        "additionalProperties": false,
        "description": "Concept."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CourierInfo": {
        "title": " ",
        "required": [
          "courier",
          "isCourierSelectedManually"
        ],
        "type": "object",
        "properties": {
          "courier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Employee"
              }
            ],
            "description": "Order driver."
          },
          "isCourierSelectedManually": {
            "type": "boolean",
            "description": "Whether driver is selected manually."
          }
        },
        "additionalProperties": false,
        "description": "Driver information."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CreationStatus": {
        "title": " ",
        "enum": [
          "Success",
          "InProgress",
          "Error"
        ],
        "type": "string",
        "description": "Order creation status."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer": {
        "title": " ",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Delivery customer.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "regular": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.RegularCustomer",
            "one-time": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.AnonymousCustomer"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DeletionMethod": {
        "title": " ",
        "required": [
          "id",
          "removalType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID."
          },
          "comment": {
            "type": "string",
            "description": "Comment.",
            "nullable": true
          },
          "removalType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.RemovalType"
              }
            ],
            "description": "Write-off type."
          }
        },
        "additionalProperties": false,
        "description": "Deletion method."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DeliveryPoint": {
        "title": " ",
        "type": "object",
        "properties": {
          "coordinates": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.Coordinates"
              }
            ],
            "description": "Delivery address coordinates.",
            "nullable": true
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Address"
              }
            ],
            "description": "Delivery address details.",
            "nullable": true
          },
          "externalCartographyId": {
            "type": "string",
            "description": "Address ID in external mapping system.",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Delivery address coordinates."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountItem": {
        "title": " ",
        "required": [
          "discountType",
          "sum"
        ],
        "type": "object",
        "properties": {
          "discountType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountType"
              }
            ],
            "description": "Discount type. \r\n            \r\nCan be obtained by `/api/1/discounts` operation."
          },
          "sum": {
            "type": "number",
            "description": "Total.",
            "format": "double"
          },
          "selectivePositions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Order item positions.",
            "nullable": true
          },
          "selectivePositionsWithSum": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PositionWithSum"
            },
            "description": "Order item positions with position discount sum.\n\n > Allowed from version `8.5.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Discount."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountType": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "Discount type."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Employee": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "phone": {
            "type": "string",
            "description": "Phone.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Employee."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalCourierService": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ECS setting record id. Unique through all organizations.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "ECS name."
          }
        },
        "additionalProperties": false,
        "description": "ECS info (external courier service)."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalData": {
        "title": " ",
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key."
          },
          "value": {
            "type": "string",
            "description": "Public."
          }
        },
        "additionalProperties": false,
        "description": "Order external data."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.GuestsInfo": {
        "title": " ",
        "required": [
          "count",
          "splitBetweenPersons"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of persons.",
            "format": "int32"
          },
          "splitBetweenPersons": {
            "type": "boolean",
            "description": "Attribute that shows whether order must be split among guests."
          }
        },
        "additionalProperties": false,
        "description": "Information about order guests."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.IdentifierCode": {
        "title": " ",
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Product code value."
          }
        },
        "additionalProperties": false,
        "description": "Product code."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ItemDeletedInfo": {
        "title": " ",
        "required": [
          "deletionMethod"
        ],
        "type": "object",
        "properties": {
          "deletionMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DeletionMethod"
              }
            ],
            "description": "Deletion method."
          }
        },
        "additionalProperties": false,
        "description": "Order cancellation details."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.LoyaltyInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "coupon": {
            "type": "string",
            "description": "Coupon No. that was considered when calculating loyalty program.",
            "nullable": true
          },
          "appliedManualConditions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Information about applied manual conditions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about Loyalty app."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.MarketingSource": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "Marketing source."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Order": {
        "title": " ",
        "required": [
          "phone",
          "status",
          "completeBefore",
          "whenCreated",
          "cookingStartTime",
          "sum",
          "number",
          "guestsInfo",
          "items",
          "orderType",
          "terminalGroupId",
          "processedPaymentsSum"
        ],
        "type": "object",
        "properties": {
          "parentDeliveryId": {
            "type": "string",
            "description": "ID of delivery serving as source for splitting by FCRs.",
            "format": "uuid",
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer"
              }
            ],
            "description": "Delivery customer.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Delivery phone number."
          },
          "phoneExtension": {
            "type": "string",
            "description": "Extension delivery phone number.",
            "nullable": true
          },
          "deliveryPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DeliveryPoint"
              }
            ],
            "description": "Delivery point details.\r\n<remarks>\r\nNot required if order type is customer pickup. Otherwise, required.\r\n</remarks>",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus"
              }
            ],
            "description": "Delivery status.\r\n            \r\n> Delivery status `ReadyForCooking` is deprecated from version `9.0.6`."
          },
          "cancelInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CancelInfo"
              }
            ],
            "description": "Delivery cancellation details.\r\n<remarks>\r\nRequired only if delivery is canceled, i.e. status=Canceled.\r\n</remarks>",
            "nullable": true
          },
          "courierInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CourierInfo"
              }
            ],
            "description": "Driver information.",
            "nullable": true
          },
          "completeBefore": {
            "type": "string",
            "description": "Order fulfillment time (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "whenCreated": {
            "type": "string",
            "description": "Delivery creation time in iikoFront (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "whenConfirmed": {
            "type": "string",
            "description": "Delivery confirmation time (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "whenPrinted": {
            "type": "string",
            "description": "Service printing time (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "whenCookingCompleted": {
            "type": "string",
            "description": "Cooking completion time (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "whenSended": {
            "type": "string",
            "description": "Delivery dispatch time (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "whenDelivered": {
            "type": "string",
            "description": "Actual delivery time (Local for delivery terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "comment": {
            "type": "string",
            "description": "Order comment.",
            "nullable": true
          },
          "problem": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Problem"
              }
            ],
            "description": "Problem flag.",
            "nullable": true
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Employee"
              }
            ],
            "description": "Operator that took order.",
            "nullable": true
          },
          "marketingSource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.MarketingSource"
              }
            ],
            "description": "Marketing source.",
            "nullable": true
          },
          "deliveryDuration": {
            "type": "integer",
            "description": "Duration of delivery (in minutes).",
            "format": "int64",
            "nullable": true
          },
          "indexInCourierRoute": {
            "type": "integer",
            "description": "Ordinal number in route list.\r\n<remarks>\r\nField is filled up at the time of delivery allocation by logistics in iikoFront.\r\nIf logistics is not in use, the field is not filled up.\r\n</remarks>",
            "format": "int32",
            "nullable": true
          },
          "cookingStartTime": {
            "type": "string",
            "description": "The time when you need to start cooking an order (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Order is deleted.",
            "nullable": true,
            "deprecated": true
          },
          "whenReceivedByApi": {
            "type": "string",
            "description": "Moment of time when CloudAPI received the request to create the order (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123",
            "deprecated": true
          },
          "whenReceivedFromFront": {
            "type": "string",
            "description": "Moment of time when the order first received and saved from iikoFront (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123",
            "deprecated": true
          },
          "movedFromDeliveryId": {
            "type": "string",
            "description": "Tells that this delivery has been moved from terminal group\r\nwith id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.\n\n > Allowed from version `7.5.4`.",
            "format": "uuid",
            "nullable": true
          },
          "movedFromTerminalGroupId": {
            "type": "string",
            "description": "Tells that this delivery has been moved from terminal group\r\nwith id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.\n\n > Allowed from version `7.5.4`.",
            "format": "uuid",
            "nullable": true
          },
          "movedFromOrganizationId": {
            "type": "string",
            "description": "Tells that this delivery has been moved from terminal group\r\nwith id *MovedFromTerminalGroupId* by cancelling delivery with deliveryId *MovedFromDeliveryId*.\n\n > Allowed from version `7.5.4`.",
            "format": "uuid",
            "nullable": true
          },
          "externalCourierService": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalCourierService"
              }
            ],
            "description": "ECS info.\n\n > Allowed from version `7.7.7`.",
            "nullable": true
          },
          "movedToDeliveryId": {
            "type": "string",
            "description": "Tells that this delivery has been canceled and moved to terminal group\r\nwith id *MovedToTerminalGroupId*.",
            "format": "uuid",
            "nullable": true
          },
          "movedToTerminalGroupId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "movedToOrganizationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "menuId": {
            "type": "string",
            "description": "External menu ID.",
            "nullable": true
          },
          "deliveryZone": {
            "type": "string",
            "description": "Name of delivery zone.",
            "nullable": true
          },
          "lockedAt": {
            "type": "string",
            "description": "Timestamp of when the order was taken for editing (lock).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "estimatedTime": {
            "type": "string",
            "description": "Delivery estimated time.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "isAsap": {
            "type": "boolean",
            "description": "Whether to deliver as soon as possible.",
            "nullable": true
          },
          "whenPacked": {
            "type": "string",
            "description": "Delivery packing time (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "priceCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.PriceCategory"
              }
            ],
            "description": "Price category of the order.\n\n > Allowed from version `9.0.5`.",
            "nullable": true
          },
          "sum": {
            "type": "number",
            "description": "Order amount (after discount or surcharge).",
            "format": "double"
          },
          "number": {
            "type": "integer",
            "description": "Delivery No.",
            "format": "int32"
          },
          "sourceKey": {
            "type": "string",
            "description": "Delivery source.",
            "nullable": true
          },
          "whenBillPrinted": {
            "type": "string",
            "description": "Invoice printing time (guest bill time).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "whenClosed": {
            "type": "string",
            "description": "Delivery closing time (Local for delivery terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "conception": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Conception"
              }
            ],
            "description": "Concept.",
            "nullable": true
          },
          "guestsInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.GuestsInfo"
              }
            ],
            "description": "Information about order guests.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem"
            },
            "description": "Order items."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderCombo"
            },
            "description": "Combo.",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentItem"
            },
            "description": "Payments.",
            "nullable": true
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsPaymentItem"
            },
            "description": "Tips.",
            "nullable": true
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountItem"
            },
            "description": "Discounts.",
            "nullable": true
          },
          "orderType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderType"
              }
            ],
            "description": "Order type.",
            "nullable": true
          },
          "terminalGroupId": {
            "type": "string",
            "description": "ID of the terminal group where the order is located.",
            "format": "uuid"
          },
          "processedPaymentsSum": {
            "type": "number",
            "description": "The amount of processed payments.\r\n<remarks>\r\nnull - only for unsupported POS versions.\r\n</remarks>\n\n > Allowed from version `7.6.0`.",
            "format": "double",
            "nullable": true
          },
          "loyaltyInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.LoyaltyInfo"
              }
            ],
            "description": "Information about Loyalty app.\r\n<remarks>\r\nnull - only for unsupported POS versions.\r\n</remarks>",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalData"
            },
            "description": "Order external data.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order details."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderCombo": {
        "title": " ",
        "required": [
          "id",
          "name",
          "amount",
          "price",
          "sourceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Combo ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of combo."
          },
          "amount": {
            "type": "integer",
            "description": "Number of combos.",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "description": "Price of combo. Given for 1 combo, without regard to amount.",
            "format": "double"
          },
          "sourceId": {
            "type": "string",
            "description": "Combo action ID.",
            "format": "uuid"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductSize"
              }
            ],
            "description": "Size.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Combo in order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo": {
        "title": " ",
        "required": [
          "id",
          "organizationId",
          "timestamp",
          "creationStatus"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Delivery order ID.",
            "format": "uuid"
          },
          "posId": {
            "type": "string",
            "description": "POS delivery order ID.",
            "format": "uuid",
            "nullable": true
          },
          "externalNumber": {
            "type": "string",
            "description": "Order external number.",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "timestamp": {
            "type": "integer",
            "description": "Timestamp of most recent order change that took place on iikoTransport server.",
            "format": "int64"
          },
          "creationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CreationStatus"
              }
            ],
            "description": "Order creation status. In case of asynchronous creation, it allows to track the instance an order was validated/created in iikoFront."
          },
          "errorInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorInfo"
              }
            ],
            "description": "Order creation error details.\r\n> Required only if \"creationStatus\"=\"Error\".",
            "nullable": true
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Order"
              }
            ],
            "description": "Order creation details.\r\n> Field is filled up if \"creationStatus\"=\"Success\".",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem": {
        "title": " ",
        "required": [
          "type",
          "status",
          "amount"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemStatus"
              }
            ],
            "description": "Item cooking status."
          },
          "deleted": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ItemDeletedInfo"
              }
            ],
            "description": "Item deletion details. If filled up, item is deleted.",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "Quantity.",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "description": "Comment.",
            "nullable": true
          },
          "whenPrinted": {
            "type": "string",
            "description": "Printing time (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductSize"
              }
            ],
            "description": "Size.",
            "nullable": true
          },
          "comboInformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ComboItemInformation"
              }
            ],
            "description": "Combo details, if order item is part of combo.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order item.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Product": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductOrderItem",
            "Compound": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CompoundOrderItem",
            "Service": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ServiceOrderItem"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemIdentifierCode": {
        "title": " ",
        "required": [
          "id",
          "code",
          "flags"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of order's position.",
            "format": "uuid"
          },
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.IdentifierCode"
              }
            ],
            "description": "Product code."
          },
          "flags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Application flags."
          }
        },
        "additionalProperties": false,
        "description": "OrderItem's IdentifierCode."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemModifier": {
        "title": " ",
        "required": [
          "product",
          "amount",
          "amountIndependentOfParentAmount",
          "price",
          "pricePredefined",
          "resultSum"
        ],
        "type": "object",
        "properties": {
          "product": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product"
              }
            ],
            "description": "Item."
          },
          "amount": {
            "type": "number",
            "description": "Quantity.",
            "format": "double"
          },
          "amountIndependentOfParentAmount": {
            "type": "boolean",
            "description": "Whether quantity of modifier depends on quantity of item."
          },
          "codes": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemIdentifierCode"
              }
            },
            "description": "List of product codes. Each outer list item represents a separate product unit;\r\neach inner list contains codes associated with that unit.\n\n > Allowed from version `9.3.6`.",
            "nullable": true
          },
          "productGroup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductGroup"
              }
            ],
            "description": "Group of modifiers (in case of a group modifier).",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Price per item unit. Can be sent different from the price in RMS.",
            "format": "double"
          },
          "pricePredefined": {
            "type": "boolean",
            "description": "Whether price is predefined."
          },
          "resultSum": {
            "type": "number",
            "description": "Total amount per item including tax, discounts/surcharges.",
            "format": "double"
          },
          "deleted": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ItemDeletedInfo"
              }
            ],
            "description": "Item deletion details. If specified, the item is deleted.",
            "nullable": true
          },
          "positionId": {
            "type": "string",
            "description": "Unique identifier of the item in the order and for the whole system.",
            "format": "uuid",
            "nullable": true
          },
          "defaultAmount": {
            "type": "integer",
            "description": "Default amount.",
            "format": "int32",
            "nullable": true
          },
          "hideIfDefaultAmount": {
            "type": "boolean",
            "description": "Hide modifier in UI if \"amount\" equals \"defaultAmount\".",
            "nullable": true
          },
          "taxPercent": {
            "type": "number",
            "description": "Tax rate.",
            "format": "double",
            "nullable": true
          },
          "freeOfChargeAmount": {
            "type": "integer",
            "description": "Free of charge amount.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order item modifier."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemStatus": {
        "title": " ",
        "enum": [
          "Added",
          "PrintedNotCooking",
          "CookingStarted",
          "CookingCompleted",
          "Served"
        ],
        "type": "string",
        "description": "Order item status."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderStatus": {
        "title": " ",
        "enum": [
          "New",
          "Bill",
          "Closed",
          "Deleted"
        ],
        "type": "string",
        "description": "Describes the status of an order."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderType": {
        "title": " ",
        "required": [
          "id",
          "name",
          "orderServiceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "orderServiceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.OrderServiceType"
              }
            ],
            "description": "Order type."
          }
        },
        "additionalProperties": false,
        "description": "Order type."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentItem": {
        "title": " ",
        "required": [
          "paymentType",
          "sum",
          "isPreliminary",
          "isExternal",
          "isProcessedExternally",
          "isPrepay"
        ],
        "type": "object",
        "properties": {
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentType"
              }
            ],
            "description": "Payment type. \r\n            \r\nCan be obtained by `/api/1/payment_types` operation."
          },
          "sum": {
            "type": "number",
            "description": "Amount due.",
            "format": "double"
          },
          "isPreliminary": {
            "type": "boolean",
            "description": "Whether payment item is preliminary."
          },
          "isExternal": {
            "type": "boolean",
            "description": "Payment item is external (created via biz.API)."
          },
          "isProcessedExternally": {
            "type": "boolean",
            "description": "Payment item is processed by external payment system."
          },
          "isFiscalizedExternally": {
            "type": "boolean",
            "description": "Whether the payment item is externally fiscalized.\n\n > Allowed from version `7.6.3`."
          },
          "isPrepay": {
            "type": "boolean",
            "description": "Whether the payment item is prepay.\n\n > Allowed from version `7.7.6`."
          }
        },
        "additionalProperties": false,
        "description": "Delivery order payment component."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentType": {
        "title": " ",
        "required": [
          "id",
          "name",
          "kind"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.PaymentTypeKind"
              }
            ],
            "description": "Payment type classifier."
          }
        },
        "additionalProperties": false,
        "description": "Payment type. \r\n            \r\nCan be obtained by `/api/1/payment_types` operation."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PositionWithSum": {
        "title": " ",
        "required": [
          "positionId",
          "sum"
        ],
        "type": "object",
        "properties": {
          "positionId": {
            "type": "string",
            "description": "Order item position ID.",
            "format": "uuid"
          },
          "sum": {
            "type": "number",
            "description": "Position discount sum.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Order item positions with position discount sum."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Problem": {
        "title": " ",
        "required": [
          "hasProblem"
        ],
        "type": "object",
        "properties": {
          "hasProblem": {
            "type": "boolean",
            "description": "Has problem."
          },
          "description": {
            "type": "string",
            "description": "Problem description.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order problem details."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "Item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductGroup": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "Item category."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductOrderItem": {
        "title": " ",
        "required": [
          "product",
          "price",
          "cost",
          "pricePredefined"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem"
          }
        ],
        "properties": {
          "product": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product"
              }
            ],
            "description": "Item."
          },
          "modifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemModifier"
            },
            "description": "Modifiers.",
            "nullable": true
          },
          "codes": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemIdentifierCode"
              }
            },
            "description": "List of product codes. Each outer list item represents a separate product unit;\r\neach inner list contains codes associated with that unit.\n\n > Allowed from version `9.2.6`.",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "Price per item unit. Can be sent different from the price in the base menu.",
            "format": "double"
          },
          "cost": {
            "type": "number",
            "description": "Total cost per item without tax, discounts/surcharges.",
            "format": "double"
          },
          "pricePredefined": {
            "type": "boolean",
            "description": "Whether price is predefined."
          },
          "positionId": {
            "type": "string",
            "description": "Unique identifier of the item in the order and for the whole system.",
            "format": "uuid",
            "nullable": true
          },
          "taxPercent": {
            "type": "number",
            "description": "Tax rate.",
            "format": "double",
            "nullable": true
          },
          "resultSum": {
            "type": "number",
            "description": "Total amount per item including tax, discounts/surcharges.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Order item: item."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ProductSize": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "Item size."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Region": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "Delivery district (part of delivery address)."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.RegularCustomer": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Customer ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "surname": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment.",
            "nullable": true
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.Gender"
              }
            ],
            "description": "Sex."
          },
          "inBlacklist": {
            "type": "boolean",
            "description": "Is client in blacklist."
          },
          "blacklistReason": {
            "type": "string",
            "description": "Reason why client was added to blacklist.",
            "nullable": true
          },
          "birthdate": {
            "type": "string",
            "description": "Date of birth.\n\n > Allowed from version `7.6.1`.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.RemovalType": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "Write-off type."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ServiceOrderItem": {
        "title": " ",
        "required": [
          "service",
          "cost"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem"
          }
        ],
        "properties": {
          "service": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Product"
              }
            ],
            "description": "Item."
          },
          "cost": {
            "type": "number",
            "description": "Total cost per item without tax, discounts/surcharges.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Order item: service."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Street": {
        "title": " ",
        "required": [
          "id",
          "name",
          "city"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "city": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.City"
              }
            ],
            "description": "City."
          }
        },
        "additionalProperties": false,
        "description": "Street."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsPaymentItem": {
        "title": " ",
        "required": [
          "paymentType",
          "sum",
          "isPreliminary",
          "isExternal",
          "isProcessedExternally",
          "isPrepay"
        ],
        "type": "object",
        "properties": {
          "tipsType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsType"
              }
            ],
            "description": "Tips type."
          },
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentType"
              }
            ],
            "description": "Payment type. \r\n            \r\nCan be obtained by `/api/1/payment_types` operation."
          },
          "sum": {
            "type": "number",
            "description": "Amount due.",
            "format": "double"
          },
          "isPreliminary": {
            "type": "boolean",
            "description": "Whether payment item is preliminary."
          },
          "isExternal": {
            "type": "boolean",
            "description": "Payment item is external (created via biz.API)."
          },
          "isProcessedExternally": {
            "type": "boolean",
            "description": "Payment item is processed by external payment system."
          },
          "isFiscalizedExternally": {
            "type": "boolean",
            "description": "Whether the payment item is externally fiscalized.\n\n > Allowed from version `7.6.3`."
          },
          "isPrepay": {
            "type": "boolean",
            "description": "Whether the payment item is prepay.\n\n > Allowed from version `7.7.6`."
          }
        },
        "additionalProperties": false,
        "description": "Delivery order tips payment component."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsType": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tips type ID.\r\n            \r\nCan be obtained by `/api/1/tips_types` operation.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Tips type name."
          }
        },
        "additionalProperties": false,
        "description": "The tips type."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.OrderResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "orderInfo"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "orderInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo"
              }
            ],
            "description": "Delivery order."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for a delivery order return."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersByOrganization": {
        "title": " ",
        "required": [
          "organizationId",
          "orders"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo"
            },
            "description": "List of orders by organization."
          }
        },
        "additionalProperties": false,
        "description": "Orders grouped by organization."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "orders"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "format": "uuid"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo"
            },
            "description": "Orders."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for return of delivery orders."
      },
      "iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersWithRevisionResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "maxRevision",
          "ordersByOrganizations"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "maxRevision": {
            "type": "integer",
            "description": "Maximum revision value per all orders.",
            "format": "int64"
          },
          "ordersByOrganizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.OrdersByOrganization"
            },
            "description": "Orders."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for return of delivery orders."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.ActionOnValidationRejection": {
        "title": " ",
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "Actions on problems with auto-assignment.",
        "format": "int32"
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.AllowedItemWithDuration": {
        "title": " ",
        "required": [
          "terminalGroupId",
          "organizationId",
          "deliveryDurationInMinutes",
          "zone",
          "deliveryServiceProductId"
        ],
        "type": "object",
        "properties": {
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "deliveryDurationInMinutes": {
            "type": "integer",
            "description": "Delivery duration in minutes.",
            "format": "int64"
          },
          "zone": {
            "type": "string",
            "description": "Delivery zone name which this TerminalGroupId belongs to.",
            "nullable": true
          },
          "deliveryServiceProductId": {
            "type": "string",
            "description": "Link to \"delivery service payment\".",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Suitable terminal group with delivery duration and other parameters."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.DeliveryRestrictionRejectCode": {
        "title": " ",
        "enum": [
          "Undefined",
          "SumIsLessThenMinimum",
          "DayOfWeekIsUnacceptable",
          "DeliveryTimeIsUnacceptable",
          "OutOfTerminalZone"
        ],
        "type": "string",
        "description": "Delivery restrictions reject cause code."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.GetAllowedRestrictionsRequest": {
        "title": " ",
        "required": [
          "isCourierDelivery"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID. Deprecated, use \"organizationIds\".",
            "format": "uuid",
            "nullable": true,
            "deprecated": true
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization IDs.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "deliveryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsAddress"
              }
            ],
            "description": "Delivery address.",
            "nullable": true
          },
          "orderLocation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.OrderLocation"
              }
            ],
            "description": "Order location.",
            "nullable": true
          },
          "orderItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsOrderItem"
            },
            "description": "Order list."
          },
          "isCourierDelivery": {
            "type": "boolean",
            "description": "Type of delivery service."
          },
          "deliveryDate": {
            "type": "string",
            "description": "Delivery date (Local for delivery terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "deliverySum": {
            "type": "number",
            "description": "Sum.",
            "format": "double",
            "nullable": true
          },
          "discountSum": {
            "type": "number",
            "description": "Discounts sum.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request to identify suitable terminal groups."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.GetAllowedRestrictionsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "isAllowed",
          "rejectCause",
          "addressExternalId",
          "location",
          "allowedItems",
          "rejectedItems"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "isAllowed": {
            "type": "boolean",
            "description": "A sign of successful verification."
          },
          "rejectCause": {
            "type": "string",
            "description": "Reject cause.",
            "nullable": true,
            "deprecated": true
          },
          "addressExternalId": {
            "type": "string",
            "description": "Delivery address ID in external mapping system.",
            "nullable": true
          },
          "location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.OrderLocation"
              }
            ],
            "description": "Coordinates returned by geocoding service.",
            "nullable": true
          },
          "allowedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.AllowedItemWithDuration"
            },
            "description": "Suitable terminal groups with a delivery duration for them."
          },
          "rejectedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RejectItem"
            },
            "description": "Rejected items with cause."
          }
        },
        "additionalProperties": false,
        "description": "Response for a request to identify suitable terminal groups."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.OrderLocation": {
        "title": " ",
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude.",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Order location."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RejectItem": {
        "title": " ",
        "required": [
          "terminalGroupId",
          "organizationId",
          "rejectCode",
          "rejectHint"
        ],
        "type": "object",
        "properties": {
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid",
            "nullable": true
          },
          "zone": {
            "type": "string",
            "description": "Delivery zone name which this TerminalGroupId belongs to.",
            "nullable": true
          },
          "rejectCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.DeliveryRestrictionRejectCode"
              }
            ],
            "description": "Reject cause code."
          },
          "rejectHint": {
            "type": "string",
            "description": "Reject hint."
          },
          "rejectItemData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RejectItemData"
              }
            ],
            "description": "Reject additional information.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rejected item info."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RejectItemData": {
        "title": " ",
        "type": "object",
        "properties": {
          "dateFrom": {
            "type": "string",
            "description": "Point work time start.",
            "format": "date-span",
            "nullable": true
          },
          "dateTo": {
            "type": "string",
            "description": "Point work time end.",
            "format": "date-span",
            "nullable": true
          },
          "allowedWeekDays": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed week days.",
            "nullable": true
          },
          "minSum": {
            "type": "number",
            "description": "Order min sum.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Reject additional information."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsAddress": {
        "title": " ",
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "City.",
            "nullable": true
          },
          "streetName": {
            "type": "string",
            "description": "Street.",
            "nullable": true
          },
          "streetId": {
            "type": "string",
            "description": "Street ID.",
            "format": "uuid",
            "nullable": true
          },
          "house": {
            "type": "string",
            "description": "House.",
            "nullable": true
          },
          "building": {
            "type": "string",
            "description": "Building.",
            "nullable": true
          },
          "index": {
            "type": "string",
            "description": "Post index.",
            "nullable": true
          },
          "line1": {
            "type": "string",
            "description": "Address line 1.\r\nContains the primary address information.",
            "nullable": true
          },
          "entrance": {
            "type": "string",
            "description": "Entrance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Address."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsOrderItem": {
        "title": " ",
        "required": [
          "id",
          "product",
          "amount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID.",
            "format": "uuid"
          },
          "product": {
            "type": "string",
            "description": "Product."
          },
          "amount": {
            "type": "number",
            "description": "Amount.",
            "format": "double"
          },
          "modifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsOrderItemModifier"
            },
            "description": "Modifiers (absolute amount)."
          }
        },
        "additionalProperties": false,
        "description": "Order item."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.AllowedRestrictions.RestrictionsOrderItemModifier": {
        "title": " ",
        "required": [
          "id",
          "amount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product ID.",
            "format": "uuid"
          },
          "product": {
            "type": "string",
            "description": "Product."
          },
          "amount": {
            "type": "number",
            "description": "Amount.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Order item modifier."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.Coordinates": {
        "title": " ",
        "required": [
          "latitude",
          "longitude"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude.",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Coordinate details."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryGeocodeServiceType": {
        "title": " ",
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "Geocoding service.",
        "format": "int32"
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionItem": {
        "title": " ",
        "required": [
          "minSum",
          "terminalGroupId",
          "organizationId",
          "zone",
          "weekMap",
          "from",
          "to",
          "priority",
          "deliveryDurationInMinutes",
          "deliveryServiceProductId"
        ],
        "type": "object",
        "properties": {
          "minSum": {
            "type": "number",
            "description": "The minimum order amount for a given point in a given time interval in this delivery zone.",
            "format": "double",
            "nullable": true
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid",
            "nullable": true
          },
          "zone": {
            "type": "string",
            "description": "Name of delivery zone from cartography.",
            "nullable": true
          },
          "weekMap": {
            "type": "integer",
            "description": "Days of the week.",
            "format": "int32"
          },
          "from": {
            "type": "integer",
            "description": "The time from which the point can process orders from the selected zone, in minutes from the beginning of the day.",
            "format": "int32",
            "nullable": true
          },
          "to": {
            "type": "integer",
            "description": "The maximum time at which a point can carry an order to a given zone, in minutes from the beginning of the day.",
            "format": "int32",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "description": "Priority of point in delivery zone.",
            "format": "int32"
          },
          "deliveryDurationInMinutes": {
            "type": "integer",
            "description": "Delivery duration in delivery zone.",
            "format": "int64"
          },
          "deliveryServiceProductId": {
            "type": "string",
            "description": "Link to \"delivery service payment\".",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Item of delivery restrictions."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictions": {
        "title": " ",
        "required": [
          "organizationId",
          "deliveryGeocodeServiceType",
          "deliveryRegionsMapUrl",
          "defaultDeliveryDurationInMinutes",
          "defaultSelfServiceDurationInMinutes",
          "useSameDeliveryDuration",
          "useSameMinSum",
          "defaultMinSum",
          "useSameWorkTimeInterval",
          "defaultFrom",
          "defaultTo",
          "useSameRestrictionsOnAllWeek",
          "restrictions",
          "deliveryZones",
          "rejectOnGeocodingError",
          "addDeliveryServiceCost",
          "useSameDeliveryServiceProduct",
          "defaultDeliveryServiceProductId",
          "useExternalAssignationService",
          "frontTrustsCallCenterCheck",
          "externalAssignationServiceUrl",
          "requireExactAddressForGeocoding",
          "zonesMode",
          "autoAssignExternalDeliveries",
          "actionOnValidationRejection"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "deliveryGeocodeServiceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryGeocodeServiceType"
              }
            ],
            "description": "Geocoding service type."
          },
          "deliveryRegionsMapUrl": {
            "type": "string",
            "description": "Link to the map of delivery service regions.",
            "nullable": true
          },
          "defaultDeliveryDurationInMinutes": {
            "type": "integer",
            "description": "General standard of delivery time.",
            "format": "int64"
          },
          "defaultSelfServiceDurationInMinutes": {
            "type": "integer",
            "description": "Default pickup time.",
            "format": "int64"
          },
          "useSameDeliveryDuration": {
            "type": "boolean",
            "description": "Indication that all delivery points in all delivery zones use common delivery time limits."
          },
          "useSameMinSum": {
            "type": "boolean",
            "description": "Indication that all delivery points for all delivery zones use the total minimum order amount."
          },
          "defaultMinSum": {
            "type": "number",
            "description": "Total minimum order amount.",
            "format": "double",
            "nullable": true
          },
          "useSameWorkTimeInterval": {
            "type": "boolean",
            "description": "Indication that all delivery points in all zones use common time limits."
          },
          "defaultFrom": {
            "type": "integer",
            "description": "The beginning of the interval of the total work time for all points and delivery zones, \r\nin minutes from the beginning of the day.",
            "format": "int32",
            "nullable": true
          },
          "defaultTo": {
            "type": "integer",
            "description": "End of the total work time interval for all points and delivery zones, \r\nin minutes from the beginning of the day.",
            "format": "int32",
            "nullable": true
          },
          "useSameRestrictionsOnAllWeek": {
            "type": "boolean",
            "description": "Indication that all delivery points in all zones use the same schedule for all days of the week."
          },
          "restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionItem"
            },
            "description": "Restrictions."
          },
          "deliveryZones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryZone"
            },
            "description": "Delivery zones."
          },
          "rejectOnGeocodingError": {
            "type": "boolean",
            "description": "Reject delivery if we could not geocode the address."
          },
          "addDeliveryServiceCost": {
            "type": "boolean",
            "description": "Add shipping cost to order."
          },
          "useSameDeliveryServiceProduct": {
            "type": "boolean",
            "description": "Indication that the cost is the same for all points of delivery."
          },
          "defaultDeliveryServiceProductId": {
            "type": "string",
            "description": "Link to \"delivery service payment\".",
            "format": "uuid",
            "nullable": true
          },
          "useExternalAssignationService": {
            "type": "boolean",
            "description": "Use external delivery distribution service."
          },
          "frontTrustsCallCenterCheck": {
            "type": "boolean",
            "description": "Indication whether or not to trust on the fronts the call center mapping restrictions from the call center\r\nif the composition of the order has not changed since the last check. If true, then trust."
          },
          "externalAssignationServiceUrl": {
            "type": "string",
            "description": "Address of external delivery distribution service.",
            "nullable": true
          },
          "requireExactAddressForGeocoding": {
            "type": "boolean",
            "description": "Require an exact geocoding address."
          },
          "zonesMode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionsMode"
              }
            ],
            "description": "Delivery restrictions mode."
          },
          "autoAssignExternalDeliveries": {
            "type": "boolean",
            "description": "Automatically assigned delivery method based on cartography."
          },
          "actionOnValidationRejection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.ActionOnValidationRejection"
              }
            ],
            "description": "Action on problems with auto-assignment."
          }
        },
        "additionalProperties": false,
        "description": "Delivery restrictions."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictionsMode": {
        "title": " ",
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Delivery restrictions mode.",
        "format": "int32"
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryZone": {
        "title": " ",
        "required": [
          "name",
          "coordinates",
          "addresses"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Polygon name."
          },
          "coordinates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.Coordinates"
            },
            "description": "A set of points describing a polygon."
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryZoneAddressBinding"
            },
            "description": "A set of addresses describing a polygon.\r\n            \r\n> Available only for manual delivery zones."
          }
        },
        "additionalProperties": false,
        "description": "Delivery zone."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryZoneAddressBinding": {
        "title": " ",
        "required": [
          "streetId",
          "postcode",
          "houses"
        ],
        "type": "object",
        "properties": {
          "streetId": {
            "type": "string",
            "description": "ID of the delivery zone's street.",
            "format": "uuid"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode."
          },
          "houses": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.HousesRange"
              }
            ],
            "description": "Range of house numbers in the delivery zone."
          }
        },
        "additionalProperties": false,
        "description": "Delivery zone polygon, defined by the combination of street, index and house numbers."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.GetDeliveryRestrictionsRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations IDs which delivery restrictions have to be returned.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request for delivery restrictions."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.GetDeliveryRestrictionsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "deliveryRestrictions"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "deliveryRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.DeliveryRestrictions"
            },
            "description": "Delivery restrictions."
          }
        },
        "additionalProperties": false,
        "description": "Response for delivery restrictions."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.HousesRange": {
        "title": " ",
        "required": [
          "type",
          "startingNumber",
          "maxNumber",
          "isUnlimitedRange",
          "specificNumbers"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.DeliveryRestrictions.HousesRangeType"
              }
            ],
            "description": "Type of house number range."
          },
          "startingNumber": {
            "type": "integer",
            "description": "Starting house number.",
            "format": "int32"
          },
          "maxNumber": {
            "type": "integer",
            "description": "Maximum house number.",
            "format": "int32"
          },
          "isUnlimitedRange": {
            "type": "boolean",
            "description": "Unlimited range."
          },
          "specificNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specific numbers."
          }
        },
        "additionalProperties": false,
        "description": "Range of house numbers in the delivery zone.\r\nIt can work in two modes:\r\na) HousesRangeType.SpecificNumbers - list of house numbers. If the house is on this list - it is in the range\r\nb) Rest HousesRangeType. Defines a range of numbers from StartingNumber to MaxNumber.\r\nSince it is necessary to compare numbers - only supports numeric house numbers.\r\nType determines the admissibility of even/odd numbers."
      },
      "iikoTransport.PublicApi.Contracts.DeliveryRestrictions.HousesRangeType": {
        "title": " ",
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Type of house number range.",
        "format": "int32"
      },
      "iikoTransport.PublicApi.Contracts.Discounts.DiscountCardMode": {
        "title": " ",
        "enum": [
          "Percent",
          "FlexibleSum",
          "FixedSum"
        ],
        "type": "string",
        "description": "Discount type."
      },
      "iikoTransport.PublicApi.Contracts.Discounts.DiscountCardTypeInfo": {
        "title": " ",
        "required": [
          "id",
          "name",
          "percent",
          "isCategorisedDiscount",
          "productCategoryDiscounts",
          "canBeAppliedSelectively",
          "mode",
          "sum",
          "canApplyByCardNumber",
          "isManual",
          "isCard",
          "isAutomatic"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Discount ID in RMS.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Discount name.",
            "nullable": true
          },
          "percent": {
            "type": "number",
            "description": "Total discount rate.\r\n> Ignored if \"isCategorisedDiscount\" specified.",
            "format": "double"
          },
          "isCategorisedDiscount": {
            "type": "boolean",
            "description": "Whether it is category discount or not.\r\n> If true, \"productCategoryDiscounts\" discounts will apply."
          },
          "productCategoryDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Discounts.ProductCategoryDiscount"
            },
            "description": "Category discount."
          },
          "comment": {
            "type": "string",
            "description": "Comment.",
            "nullable": true
          },
          "canBeAppliedSelectively": {
            "type": "boolean",
            "description": "Whether discount allows for selected application to individual items at user's discretion."
          },
          "minOrderSum": {
            "type": "number",
            "description": "Minimum order amount required for discount application.\r\nIf order amount is less than specified threshold, discount does not apply.",
            "format": "double",
            "nullable": true
          },
          "mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Discounts.DiscountCardMode"
              }
            ],
            "description": "Discount type. \r\n\r\nCan be obtained by `/api/1/discounts` operation."
          },
          "sum": {
            "type": "number",
            "description": "Fixed amount.\r\n> Triggers if fixed amount has been specified.",
            "format": "double"
          },
          "canApplyByCardNumber": {
            "type": "boolean",
            "description": "Can be applied by card No.\r\n> If true, it's enough to enter discount card No. (card swiping not required)"
          },
          "isManual": {
            "type": "boolean",
            "description": "Created manually."
          },
          "isCard": {
            "type": "boolean",
            "description": "Executed by card."
          },
          "isAutomatic": {
            "type": "boolean",
            "description": "Created automatically."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "IsDeleted."
          }
        },
        "additionalProperties": false,
        "description": "Discount/surcharge DTO."
      },
      "iikoTransport.PublicApi.Contracts.Discounts.DiscountsRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization IDs that require discounts return.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request of discounts/surcharges."
      },
      "iikoTransport.PublicApi.Contracts.Discounts.DiscountsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "discounts"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Discounts.DiscountCardTypeInfo, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "List of discounts/surcharges."
          }
        },
        "additionalProperties": false,
        "description": "Response with list of discounts/surcharges."
      },
      "iikoTransport.PublicApi.Contracts.Discounts.ProductCategoryDiscount": {
        "title": " ",
        "required": [
          "categoryId",
          "categoryName",
          "percent"
        ],
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "Category ID.",
            "format": "uuid"
          },
          "categoryName": {
            "type": "string",
            "description": "Category name.",
            "nullable": true
          },
          "percent": {
            "type": "number",
            "description": "This category discount %.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Product category discount details."
      },
      "iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocation": {
        "title": " ",
        "type": "object",
        "properties": {
          "courierId": {
            "type": "string",
            "description": "Employee ID.",
            "format": "uuid"
          },
          "lastActiveLatitude": {
            "type": "number",
            "description": "Latitude.",
            "format": "double",
            "nullable": true
          },
          "lastActiveLongitude": {
            "type": "number",
            "description": "Longitude.",
            "format": "double",
            "nullable": true
          },
          "lastActiveClientDate": {
            "type": "string",
            "description": "Client date and time.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Courier's location."
      },
      "iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsByTerminalGroupRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "iikoFront terminals group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for list of active drivers for front group with ID = *TerminalGroupId*."
      },
      "iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocationsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "activeCourierLocations"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "activeCourierLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.ActiveCourierLocation, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "List of courier's locations."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object to retrieve list of active courier locations."
      },
      "iikoTransport.PublicApi.Contracts.Employees.ChangePersonalSessionResponse": {
        "title": " ",
        "required": [
          "correlationId"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "error": {
            "type": "string",
            "description": "Error details.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Personal session change response."
      },
      "iikoTransport.PublicApi.Contracts.Employees.ClosePersonalSessionRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId",
          "employeeId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Delivery group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "employeeId": {
            "type": "string",
            "description": "Employee ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Close personal session request."
      },
      "iikoTransport.PublicApi.Contracts.Employees.CoordinateInfo": {
        "title": " ",
        "required": [
          "latitude",
          "longitude",
          "serverTimestamp"
        ],
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude.",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude.",
            "format": "double"
          },
          "serverTimestamp": {
            "type": "integer",
            "description": "Time of coordinate saving on server in the Unix timestamp format.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "DTO of map coordinates."
      },
      "iikoTransport.PublicApi.Contracts.Employees.CourierLocations": {
        "title": " ",
        "required": [
          "courierId",
          "locations"
        ],
        "type": "object",
        "properties": {
          "courierId": {
            "type": "string",
            "description": "Driver ID.",
            "format": "uuid"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.CoordinateInfo"
            },
            "description": "List of locations."
          }
        },
        "additionalProperties": false,
        "description": "Driver location details."
      },
      "iikoTransport.PublicApi.Contracts.Employees.CourierLocationsByTimeOffsetRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of organizations for drivers coordinates of which will be retrieved."
          },
          "offsetInSeconds": {
            "type": "integer",
            "description": "Interval in seconds from current server time. \r\nIf driver coordinates were recorded in server storage \r\nwithin interval: (\"current server time\" - *OffsetInSeconds*, \"current server time\"],\r\ndriver and their coordinates will be retrieved.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for coordinates history of drivers in OrganizationIds organizations.\r\nIf driver coordinates were recorded in server storage within interval: \r\n[\"current server time\" - OffsetInSeconds, \"current server time\"),\r\ndriver and their coordinates will be retrieved."
      },
      "iikoTransport.PublicApi.Contracts.Employees.CourierLocationsByTimeOffsetResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "courierLocations"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "courierLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.CourierLocations, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "List of drivers' coordinates broken down by organizations."
          }
        },
        "additionalProperties": false,
        "description": "DTO containing driver coordinates details for the last N seconds."
      },
      "iikoTransport.PublicApi.Contracts.Employees.CouriersAndCheckRoleRequest": {
        "title": " ",
        "required": [
          "organizationIds",
          "rolesToCheck"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of organizations.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "rolesToCheck": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Employee's roles for check. The short name of employee's position."
          }
        },
        "additionalProperties": false,
        "description": "Request for list of drivers for organizations in OrganizationIds."
      },
      "iikoTransport.PublicApi.Contracts.Employees.CouriersRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of organizations."
          }
        },
        "additionalProperties": false,
        "description": "Request for list of drivers for organizations in OrganizationIds."
      },
      "iikoTransport.PublicApi.Contracts.Employees.Employee": {
        "title": " ",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Employee ID.",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "description": "Name of user.",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "Second name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Displayed name (system name).",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Code.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "User deletion flag."
          }
        },
        "additionalProperties": false,
        "description": "Employee DTO."
      },
      "iikoTransport.PublicApi.Contracts.Employees.EmployeeInfo": {
        "title": " ",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Employee ID.",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "description": "Name of employee.",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "Second name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Display name.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Phone.",
            "nullable": true
          },
          "cellPhone": {
            "type": "string",
            "description": "Cell phone.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Employee info."
      },
      "iikoTransport.PublicApi.Contracts.Employees.EmployeeInfoRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "id"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "Employee ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request for employee info."
      },
      "iikoTransport.PublicApi.Contracts.Employees.EmployeeInfoResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "employeeInfo"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "employeeInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.EmployeeInfo"
              }
            ],
            "description": "Employee info."
          }
        },
        "additionalProperties": false,
        "description": "Response for employee info."
      },
      "iikoTransport.PublicApi.Contracts.Employees.EmployeesResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "employees"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "employees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.Employee, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "List of drivers."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object to retrieve list of drivers from iikoRMS."
      },
      "iikoTransport.PublicApi.Contracts.Employees.EmployeesWithRoleSignResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "employeesWithCheckRoles"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "employeesWithCheckRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Employees.EmployeeWithCheckedRole, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "List of drivers."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object to retrieve list of drivers from iikoRMS with checked role."
      },
      "iikoTransport.PublicApi.Contracts.Employees.EmployeeWithCheckedRole": {
        "title": " ",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "checkRolesResult": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.RoleCheckResult"
            },
            "description": "Result of check employee's roles."
          },
          "id": {
            "type": "string",
            "description": "Employee ID.",
            "format": "uuid"
          },
          "firstName": {
            "type": "string",
            "description": "Name of user.",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "description": "Second name.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Displayed name (system name).",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Code.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "User deletion flag."
          }
        },
        "additionalProperties": false,
        "description": "Employee DTO."
      },
      "iikoTransport.PublicApi.Contracts.Employees.GetPersonalSessionInfoRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId",
          "employeeId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Delivery group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "employeeId": {
            "type": "string",
            "description": "Employee ID.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Personal session request."
      },
      "iikoTransport.PublicApi.Contracts.Employees.GetPersonalSessionInfoResponse": {
        "title": " ",
        "required": [
          "correlationId"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "isSessionOpened": {
            "type": "boolean",
            "description": "Is personal session opened.",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "Error details.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Personal session info response."
      },
      "iikoTransport.PublicApi.Contracts.Employees.GetTerminalGroupsOfEmployeeRequest": {
        "title": " ",
        "required": [
          "employeeId"
        ],
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "iikoTransport.PublicApi.Contracts.Employees.GetTerminalGroupsOfEmployeeResponse": {
        "title": " ",
        "required": [
          "terminalGroupIds"
        ],
        "type": "object",
        "properties": {
          "terminalGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "additionalProperties": false
      },
      "iikoTransport.PublicApi.Contracts.Employees.OpenPersonalSessionRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId",
          "employeeId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Delivery group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "employeeId": {
            "type": "string",
            "description": "Employee ID.",
            "format": "uuid"
          },
          "roleId": {
            "type": "string",
            "description": "Employee role ID.\r\n            \r\nMust be null if the restaurant doesn't use roles, otherwise not-null role must be specified.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Open personal session request."
      },
      "iikoTransport.PublicApi.Contracts.Employees.PersonalShift": {
        "title": " ",
        "required": [
          "id",
          "opened",
          "terminalGroupId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Employee ID.",
            "format": "uuid"
          },
          "roleId": {
            "type": "string",
            "description": "Employee Role ID.",
            "format": "uuid",
            "nullable": true
          },
          "opened": {
            "type": "boolean",
            "description": "Personal shift state flag (true - shift is opened, false - shift is closed)."
          },
          "terminalGroupId": {
            "type": "string",
            "description": "ID of the terminal group where the personal shift is opened/closed.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Employee personal shift info."
      },
      "iikoTransport.PublicApi.Contracts.Employees.RoleCheckResult": {
        "title": " ",
        "required": [
          "checkedRoleCode",
          "employeeHasRole"
        ],
        "type": "object",
        "properties": {
          "checkedRoleCode": {
            "type": "string",
            "description": "Checked for employee role."
          },
          "employeeHasRole": {
            "type": "boolean",
            "description": "Sign that employee has role \"checkedRoleCode\"."
          }
        },
        "additionalProperties": false,
        "description": "Result of checking employee role."
      },
      "iikoTransport.PublicApi.Contracts.Errors.ErrorCode": {
        "title": " ",
        "enum": [
          "Common",
          "IllegalDeliveryStatus",
          "CustomerNameNotSpecified",
          "ProductNotFound",
          "MarketingSourceNotFound",
          "PaymentTypeNotFound",
          "ProductSizeNotFound",
          "ProductGroupNotFound",
          "OrderNotFound",
          "ConceptionNotFound",
          "DuplicatedOrderId",
          "TerminalGroupIdNotDetermined",
          "TerminalGroupUnregistered",
          "InvalidPhone",
          "ModifierDuplicated",
          "ProductCanBuyFromCashdesk",
          "DeliveryOpinionMarkInvalid",
          "WrongDeliveryStatusForOpinion",
          "OpinionCommentTooLong",
          "SurveyItemNotFound",
          "PaymentTypeCanNotBeUsedAsExternal",
          "AddressNotFound",
          "HomeNotFound",
          "IikonetPaymentAdditionalDataCanNotBeParsed",
          "IikonetPaymentExternalIdNotFound",
          "IikonetPaymentSumLessThanMarketingDiscount",
          "DiscountCardNotFound",
          "DiscountCardTypeModeForbidden",
          "Iikocard5PaymentAdditionalDataCanNotBeParsed",
          "Iikocard5PaymentExternalIdNotFound",
          "Iikocard5PaymentSumLessThanMarketingDiscount",
          "Iikocard5PaymentCanNotCreateCustomData",
          "CourierIdDoesNotExist",
          "CourierDoesNotOwnOrder",
          "WrongDeliveryStatus",
          "CanNotAssignCourierToOrder",
          "UserNotFoundByExternalPassword",
          "UserNotFound",
          "Iikocard51PaymentAdditionalDataCanNotBeParsed",
          "Iikocard51PaymentCredentialNotFound",
          "Iikocard51PaymentSearchScopeNotFound",
          "ComboDuplicated",
          "InvalidReferenceToCombo",
          "InvalidComboItemsAmount",
          "InvalidComboItemsGuest",
          "InvalidReferenceToGuest",
          "GuestDuplicated",
          "GuestNameNotSpecified",
          "OrderTypeNotFound",
          "OrderServiceTypeDoesNotMatchSelfServiceMode",
          "DeliveryDateNotSpecified",
          "OrderStatusChangedInIikoFront",
          "PaymentAdditionalDataTooLong",
          "PaymentSumShouldBePositive",
          "DiscountSumNotSpecified",
          "InvalidDiscountItem",
          "RequestProductPriceIsNotEqualToFrontPrice",
          "OrderItemsNotExists",
          "EntityAlreadyInUse",
          "DiscountItemPositionNotFound",
          "DiscountItemDuplicatePositions",
          "NonUnqiueOrderItemPosition",
          "EmptyOrderItemPosition",
          "IncorrectOrderType",
          "Incorrect",
          "TerminalGroupDisabled",
          "OrganizationUnregistered",
          "OrganizationDisabled",
          "TooSmallDeliveryDate",
          "IikoFrontTooOldVersion",
          "DuplicatedReserveId",
          "TipsTypeNotApplicable",
          "AnonymousCustomerDisabled",
          "MayBeInconsistentUpdates",
          "InconsistentUpdates",
          "Line1Disabled",
          "InternalServerError",
          "UnknownError"
        ],
        "type": "string"
      },
      "iikoTransport.PublicApi.Contracts.Errors.ErrorInfo": {
        "title": " ",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorCode"
              }
            ],
            "description": "Error code."
          },
          "message": {
            "type": "string",
            "description": "Localized message.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Localized message.",
            "nullable": true,
            "deprecated": true
          },
          "additionalData": {
            "description": "Additional information.",
            "nullable": true
          },
          "errorReason": {
            "type": "string",
            "description": "Error reason.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO for error details transfer."
      },
      "iikoTransport.PublicApi.Contracts.Errors.ErrorResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "errorDescription"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "errorDescription": {
            "type": "string",
            "description": "Error text."
          },
          "error": {
            "type": "string",
            "description": "Error code.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Error response."
      },
      "iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.DeliveryOrderWebHooksFilter": {
        "title": " ",
        "type": "object",
        "properties": {
          "orderStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.DeliveryStatus"
            },
            "description": "Statuses of orders, when changing which need to send a notification.",
            "nullable": true
          },
          "itemStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemStatus"
            },
            "description": "Statuses of order items, when changing which need to send a notification.",
            "nullable": true
          },
          "errors": {
            "type": "boolean",
            "description": "Flag for errors."
          },
          "returnedExternalDataKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Order external data keys to return in a notification.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Filter for delivery orders."
      },
      "iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.ReserveWebHookFilter": {
        "title": " ",
        "type": "object",
        "properties": {
          "updates": {
            "type": "boolean",
            "description": "Flag for updates."
          },
          "errors": {
            "type": "boolean",
            "description": "Flag for errors."
          }
        },
        "additionalProperties": false,
        "description": "Filter for updates and errors."
      },
      "iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.TableOrderWebHookFilter": {
        "title": " ",
        "type": "object",
        "properties": {
          "orderStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Orders.Common.OrderStatus"
            },
            "description": "Statuses of orders, when changing which need to send a notification.",
            "nullable": true
          },
          "itemStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItemStatus"
            },
            "description": "Statuses of order items, when changing which need to send a notification.",
            "nullable": true
          },
          "errors": {
            "type": "boolean",
            "description": "Flag for updates."
          }
        },
        "additionalProperties": false,
        "description": "Filter for table orders."
      },
      "iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHooksFilter": {
        "title": " ",
        "type": "object",
        "properties": {
          "deliveryOrderFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.DeliveryOrderWebHooksFilter"
              }
            ],
            "description": "Filter for delivery orders.",
            "nullable": true
          },
          "tableOrderFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.TableOrderWebHookFilter"
              }
            ],
            "description": "Filter for table orders.",
            "nullable": true
          },
          "reserveFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.ReserveWebHookFilter"
              }
            ],
            "description": "Filter for banquets/reserves.",
            "nullable": true
          },
          "stopListUpdateFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHookShortFilter"
              }
            ],
            "description": "Filter for stop-lists changes.",
            "nullable": true
          },
          "personalShiftFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHookShortFilter"
              }
            ],
            "description": "Filter for personal shift.",
            "nullable": true
          },
          "nomenclatureUpdateFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHookShortFilter"
              }
            ],
            "description": "Filter for nomenclature changes.",
            "nullable": true
          },
          "businessHoursAndMappingUpdateFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHookShortFilter"
              }
            ],
            "description": "Filter for business hours and mapping changes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Webhooks filter."
      },
      "iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHookShortFilter": {
        "title": " ",
        "type": "object",
        "properties": {
          "updates": {
            "type": "boolean",
            "description": "Flag for updates."
          }
        },
        "additionalProperties": false,
        "description": "Filter for updates."
      },
      "iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSource": {
        "title": " ",
        "required": [
          "id",
          "organizationId",
          "name",
          "attachedSources"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Marketing source ID.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Marketing source name."
          },
          "externalRevision": {
            "type": "integer",
            "description": "External system revision number.",
            "format": "int64",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "IsDeleted attribute of marketing source."
          },
          "attachedSources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Attached marketing sources."
          }
        },
        "additionalProperties": false,
        "description": "DTO for marketing source in iikoRMS."
      },
      "iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSourcesRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations IDs which marketing sources have to be returned.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request for marketing sources."
      },
      "iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSourcesResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "marketingSources"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "format": "uuid"
          },
          "marketingSources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.MarketingSources.MarketingSource"
            },
            "description": "List of marketing sources."
          }
        },
        "additionalProperties": false,
        "description": "Response to request for marketing sources by organization."
      },
      "iikoTransport.PublicApi.Contracts.Metrics.ActionType": {
        "title": " ",
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "iikoTransport.PublicApi.Contracts.Metrics.CallCenterAction": {
        "title": " ",
        "required": [
          "type",
          "time"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Metrics.ActionType"
              }
            ],
            "description": "Action type."
          },
          "time": {
            "type": "string",
            "description": "Time.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "duration": {
            "type": "integer",
            "description": "Duration.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Action made in Cloud Call Center."
      },
      "iikoTransport.PublicApi.Contracts.Metrics.CallCenterTelemetry": {
        "title": " ",
        "required": [
          "employeeId",
          "actions"
        ],
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "string",
            "description": "Cloud Call Center operator id.",
            "format": "uuid"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Metrics.CallCenterAction"
            }
          }
        },
        "additionalProperties": false,
        "description": "Cloud Call Center actions metrics information."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.ChildModifierInfo": {
        "title": " ",
        "required": [
          "id",
          "minAmount",
          "maxAmount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "defaultAmount": {
            "type": "integer",
            "description": "Default quantity.",
            "format": "int32",
            "nullable": true
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum quantity.",
            "format": "int32"
          },
          "maxAmount": {
            "type": "integer",
            "description": "Maximum quantity.",
            "format": "int32"
          },
          "required": {
            "type": "boolean",
            "description": "Required availability.",
            "nullable": true
          },
          "hideIfDefaultAmount": {
            "type": "boolean",
            "description": "Hide if default amount applied. This field is supported since 7.2.4 iikoRMS version.",
            "nullable": true
          },
          "splittable": {
            "type": "boolean",
            "description": "Modifier can be split. This field is supported since 7.2.4 iikoRMS version.",
            "nullable": true
          },
          "freeOfChargeAmount": {
            "type": "integer",
            "description": "Free of charge amount. This field is supported since 7.2.4 iikoRMS version.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Child modifier details."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.ExternalMenu": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID."
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "External menu, related to ApiLogin."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.GroupModifierInfo": {
        "title": " ",
        "required": [
          "id",
          "minAmount",
          "maxAmount",
          "required",
          "childModifiers"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum quantity.",
            "format": "int32"
          },
          "maxAmount": {
            "type": "integer",
            "description": "Maximum quantity.",
            "format": "int32"
          },
          "required": {
            "type": "boolean",
            "description": "Required availability.",
            "nullable": true
          },
          "childModifiersHaveMinMaxRestrictions": {
            "type": "boolean",
            "description": "Presence of max/min quantity limitations of child modifiers.",
            "nullable": true
          },
          "childModifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.ChildModifierInfo"
            },
            "description": "List of child modifiers."
          },
          "hideIfDefaultAmount": {
            "type": "boolean",
            "description": "Hide if the amount is by default. This field is supported since 7.2.4 iikoRMS version.",
            "nullable": true
          },
          "defaultAmount": {
            "type": "integer",
            "description": "Amount by default. This field is supported since 7.2.4 iikoRMS version.",
            "format": "int32",
            "nullable": true
          },
          "splittable": {
            "type": "boolean",
            "description": "Modifier can be split. This field is supported since 7.2.4 iikoRMS version.",
            "nullable": true
          },
          "freeOfChargeAmount": {
            "type": "integer",
            "description": "Free amount. This field is supported since 7.2.4 iikoRMS version.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information on group of modifiers."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.MenuRequest": {
        "title": " ",
        "required": [
          "externalMenuId",
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "externalMenuId": {
            "type": "string",
            "description": "External menu id\r\n            \r\nCan be obtained by `api/2/menu` operation."
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization IDs.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "priceCategoryId": {
            "type": "string",
            "description": "Price category id.\r\n            \r\nCan be obtained by `api/2/menu` operation.",
            "nullable": true
          },
          "version": {
            "type": "integer",
            "description": "Version of the result data model.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "language": {
            "type": "string",
            "description": "Language of the external menu.",
            "nullable": true
          },
          "asyncMode": {
            "type": "boolean",
            "description": "Async Mode.",
            "example": false,
            "deprecated": true
          },
          "startRevision": {
            "type": "integer",
            "description": "Start revision.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for menu by id."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.MenusDataResponse": {
        "title": " ",
        "required": [
          "correlationId"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "externalMenus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.ExternalMenu"
            },
            "description": "External menu.",
            "nullable": true
          },
          "priceCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.PriceCategory"
            },
            "description": "Price category.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response with stock lists."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.NomenclatureRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "startRevision": {
            "type": "integer",
            "description": "The revision (version) of the menu saved on the integration side.\r\nUse `0` for the first request for each organization. In every subsequent request,\r\nthe `startRevision` field should contain the value of the `revision` field received\r\nin the response to the previous request.",
            "format": "int64",
            "nullable": true,
            "example": "0 or value from previous request"
          }
        },
        "additionalProperties": false,
        "description": "Request for stock list by organization."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.NomenclatureResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "groups",
          "productCategories",
          "products",
          "sizes",
          "revision"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.ProductsGroupInfo"
            },
            "description": "Stock list group."
          },
          "productCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.ProductCategoryInfo"
            },
            "description": "Menu item category."
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.ProductInfo"
            },
            "description": "Menu items and modifiers."
          },
          "sizes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.Size"
            },
            "description": "Item sizes."
          },
          "revision": {
            "type": "integer",
            "description": "The revison (version) of the menu recevied in the response of the request.\r\nThis value should be saved by the integration and passed in the `startRevision` field\r\nof the next menu request. If the values in `revision` and `startRevision` are the same,\r\nit means there have been no changes to the menu since the previous request.\r\nIn this case, the `groups`, `productCategories`, `products` and `sizes` fields\r\nwill not contain any data.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Response with stock lists."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.OrderItemType": {
        "title": " ",
        "enum": [
          "Product",
          "Compound"
        ],
        "type": "string",
        "description": "Flag that determines dish linkage with modifiers scheme."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.Price": {
        "title": " ",
        "required": [
          "currentPrice",
          "isIncludedInMenu",
          "nextIncludedInMenu"
        ],
        "type": "object",
        "properties": {
          "currentPrice": {
            "type": "number",
            "description": "Current price.",
            "format": "double"
          },
          "isIncludedInMenu": {
            "type": "boolean",
            "description": "Is on the menu."
          },
          "nextPrice": {
            "type": "number",
            "description": "New price",
            "format": "double",
            "nullable": true
          },
          "nextIncludedInMenu": {
            "type": "boolean",
            "description": "Will be on the menu in the future."
          },
          "nextDatePrice": {
            "type": "string",
            "description": "New price validity start date (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Price per this item size."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.PriceCategory": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID."
          },
          "name": {
            "type": "string",
            "description": "Name."
          }
        },
        "additionalProperties": false,
        "description": "Price category, related to ApiLogin."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.ProductCategoryInfo": {
        "title": " ",
        "required": [
          "id",
          "name",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product category ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted attribute."
          }
        },
        "additionalProperties": false,
        "description": "DTO for outside transferring of product category details."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.ProductInfo": {
        "title": " ",
        "required": [
          "splittable",
          "useBalanceForSell",
          "canSetOpenPrice",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "fatAmount": {
            "type": "number",
            "description": "Fat per 100g.",
            "format": "double",
            "nullable": true
          },
          "proteinsAmount": {
            "type": "number",
            "description": "Protein per 100g.",
            "format": "double",
            "nullable": true
          },
          "carbohydratesAmount": {
            "type": "number",
            "description": "Carbohydrate per 100g.",
            "format": "double",
            "nullable": true
          },
          "energyAmount": {
            "type": "number",
            "description": "Calories per 100g.",
            "format": "double",
            "nullable": true
          },
          "fatFullAmount": {
            "type": "number",
            "description": "Fat per item.",
            "format": "double",
            "nullable": true
          },
          "proteinsFullAmount": {
            "type": "number",
            "description": "Protein per item.",
            "format": "double",
            "nullable": true
          },
          "carbohydratesFullAmount": {
            "type": "number",
            "description": "Carbohydrate per item.",
            "format": "double",
            "nullable": true
          },
          "energyFullAmount": {
            "type": "number",
            "description": "Calories per item.",
            "format": "double",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "Item weight.",
            "format": "double",
            "nullable": true
          },
          "groupId": {
            "type": "string",
            "description": "Stock list group in RMS.",
            "format": "uuid",
            "nullable": true
          },
          "productCategoryId": {
            "type": "string",
            "description": "Product category in RMS.",
            "format": "uuid",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "dish | good | modifier.",
            "nullable": true
          },
          "orderItemType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.OrderItemType"
              }
            ],
            "description": "Product or compound. Depends on modifiers scheme existence."
          },
          "modifierSchemaId": {
            "type": "string",
            "description": "Modifier schema's ID.",
            "format": "uuid",
            "nullable": true
          },
          "modifierSchemaName": {
            "type": "string",
            "description": "Modifier schema's name.",
            "nullable": true
          },
          "splittable": {
            "type": "boolean",
            "description": "Is product splittable."
          },
          "measureUnit": {
            "type": "string",
            "description": "Item's unit of measurement."
          },
          "sizePrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.SizePrice"
            },
            "description": "Prices."
          },
          "modifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.SimpleModifierInfo"
            },
            "description": "Modifiers."
          },
          "groupModifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.GroupModifierInfo"
            },
            "description": "Modifier groups."
          },
          "imageLinks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Links to images."
          },
          "doNotPrintInCheque": {
            "type": "boolean",
            "description": "Do not print on bill."
          },
          "parentGroup": {
            "type": "string",
            "description": "External menu group.",
            "format": "uuid",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "Product's order (priority) in menu.",
            "format": "int32"
          },
          "fullNameEnglish": {
            "type": "string",
            "description": "Full name in a foreign language.",
            "nullable": true
          },
          "useBalanceForSell": {
            "type": "boolean",
            "description": "Weighed product."
          },
          "canSetOpenPrice": {
            "type": "boolean",
            "description": "Open price."
          },
          "paymentSubject": {
            "type": "string",
            "description": "Payment subject.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "description": "SKU.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "description": {
            "type": "string",
            "description": "Description.",
            "nullable": true
          },
          "additionalInfo": {
            "type": "string",
            "description": "Additional information.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is-Deleted attribute."
          },
          "seoDescription": {
            "type": "string",
            "description": "SEO description for client.",
            "nullable": true
          },
          "seoText": {
            "type": "string",
            "description": "SEO text for robots.",
            "nullable": true
          },
          "seoKeywords": {
            "type": "string",
            "description": "SEO key words.",
            "nullable": true
          },
          "seoTitle": {
            "type": "string",
            "description": "SEO header.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO for outside transferring of external menu item details."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.ProductsGroupInfo": {
        "title": " ",
        "required": [
          "imageLinks",
          "order",
          "isIncludedInMenu",
          "isGroupModifier",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "imageLinks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Links to images."
          },
          "parentGroup": {
            "type": "string",
            "description": "Parent group.",
            "format": "uuid",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "description": "Group's order (priority) in menu.",
            "format": "int32"
          },
          "isIncludedInMenu": {
            "type": "boolean",
            "description": "On-the-menu attribute."
          },
          "isGroupModifier": {
            "type": "boolean",
            "description": "Is group modifier attribute.\r\n* true - group modifier.\r\n* false - external menu group."
          },
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "description": "SKU.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "description": {
            "type": "string",
            "description": "Description.",
            "nullable": true
          },
          "additionalInfo": {
            "type": "string",
            "description": "Additional information.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags.",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is-Deleted attribute."
          },
          "seoDescription": {
            "type": "string",
            "description": "SEO description for client.",
            "nullable": true
          },
          "seoText": {
            "type": "string",
            "description": "SEO text for robots.",
            "nullable": true
          },
          "seoKeywords": {
            "type": "string",
            "description": "SEO key words.",
            "nullable": true
          },
          "seoTitle": {
            "type": "string",
            "description": "SEO header.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO for outside transferring of external menu group details."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.SimpleModifierInfo": {
        "title": " ",
        "required": [
          "id",
          "minAmount",
          "maxAmount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "defaultAmount": {
            "type": "integer",
            "description": "Default quantity.",
            "format": "int32",
            "nullable": true
          },
          "minAmount": {
            "type": "integer",
            "description": "Minimum quantity.",
            "format": "int32"
          },
          "maxAmount": {
            "type": "integer",
            "description": "Maximum quantity.",
            "format": "int32"
          },
          "required": {
            "type": "boolean",
            "description": "Required availability.",
            "nullable": true
          },
          "hideIfDefaultAmount": {
            "type": "boolean",
            "description": "Hide if default amount applied. This field is supported since 7.2.4 iikoRMS version.",
            "nullable": true
          },
          "splittable": {
            "type": "boolean",
            "description": "Modifier can be split. This field is supported since 7.2.4 iikoRMS version.",
            "nullable": true
          },
          "freeOfChargeAmount": {
            "type": "integer",
            "description": "Free of charge amount. This field is supported since 7.2.4 iikoRMS version.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Modifier details."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.Size": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "priority": {
            "type": "integer",
            "description": "Priority (serial number) of the size in the size scale.",
            "format": "int32",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Is the default size in the size scale.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Item size."
      },
      "iikoTransport.PublicApi.Contracts.Nomenclature.SizePrice": {
        "title": " ",
        "required": [
          "sizeId",
          "price"
        ],
        "type": "object",
        "properties": {
          "sizeId": {
            "type": "string",
            "description": "Item size ID.",
            "format": "uuid",
            "nullable": true
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Nomenclature.Price"
              }
            ],
            "description": "Price per this item size."
          }
        },
        "additionalProperties": false,
        "description": "Price per item size."
      },
      "iikoTransport.PublicApi.Contracts.Notifications.DeliveryAttentionNotificationRequest": {
        "title": " ",
        "required": [
          "orderSource",
          "orderId",
          "additionalInfo",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "orderSource": {
            "type": "string",
            "description": "Order source."
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Additional info about the problem."
          },
          "organizationId": {
            "type": "string",
            "description": "Organization UOC Id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request to notify external systems (iikoFront and iikoWeb) about a delivery requiring attention."
      },
      "iikoTransport.PublicApi.Contracts.Notifications.ExternalCourierArrivedNotificationRequest": {
        "title": " ",
        "required": [
          "orderSource",
          "orderId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "orderSource": {
            "type": "string",
            "description": "Order source."
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "courierName": {
            "type": "string",
            "description": "Courier name.",
            "nullable": true
          },
          "courierCar": {
            "type": "string",
            "description": "Courier car's model and number.",
            "nullable": true
          },
          "courierPhone": {
            "type": "string",
            "description": "Courier phone.",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization UOC Id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request to notify external systems (iikoFront and iikoWeb) about an external courier arrived to the restaurant to pickup an order."
      },
      "iikoTransport.PublicApi.Contracts.Notifications.ExternalCourierAssignedNotificationRequest": {
        "title": " ",
        "required": [
          "orderSource",
          "orderId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "orderSource": {
            "type": "string",
            "description": "Order source."
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "courierName": {
            "type": "string",
            "description": "Courier name.",
            "nullable": true
          },
          "courierCar": {
            "type": "string",
            "description": "Courier car's model and number.",
            "nullable": true
          },
          "courierPhone": {
            "type": "string",
            "description": "Courier phone.",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization UOC Id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request to notify external systems (iikoFront and iikoWeb) about an external courier has been assigned for a delivery order."
      },
      "iikoTransport.PublicApi.Contracts.Notifications.OrderAttentionNotificationRequest": {
        "title": " ",
        "required": [
          "orderSource",
          "orderId",
          "additionalInfo"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Notifications.SendNotificationRequest"
          }
        ],
        "properties": {
          "orderSource": {
            "type": "string",
            "description": "Order source."
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "additionalInfo": {
            "type": "string",
            "description": "Additional info about the problem."
          }
        },
        "additionalProperties": false,
        "description": "Request to notify external systems (iikoFront and iikoWeb) about an order requiring attention."
      },
      "iikoTransport.PublicApi.Contracts.Notifications.SendNotificationRequest": {
        "title": " ",
        "required": [
          "messageType",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "messageType": {
            "type": "string"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization UOC Id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request to notify external systems (iikoFront and iikoWeb).",
        "discriminator": {
          "propertyName": "messageType",
          "mapping": {
            "order_attention": "#/components/schemas/iikoTransport.PublicApi.Contracts.Notifications.OrderAttentionNotificationRequest"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Orders.Common.AddOrderPaymentsRequest": {
        "title": " ",
        "required": [
          "orderId",
          "organizationId",
          "payments"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
            },
            "description": "Order tips.",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
            },
            "description": "Order payments."
          }
        },
        "additionalProperties": false,
        "description": "Request for add order payments."
      },
      "iikoTransport.PublicApi.Contracts.Orders.Common.CreateOrderSettings": {
        "title": " ",
        "type": "object",
        "properties": {
          "transportToFrontTimeout": {
            "type": "integer",
            "description": "ё\r\n            Timeout in seconds that specifies how much time is given for order to reach iikoFront. \r\n            After this time, order is nullified if iikoFront doesn't take it. By default - 8 seconds.",
            "format": "int32",
            "nullable": true
          },
          "checkStopList": {
            "type": "boolean",
            "description": "Flag indicating whether there's need to check order items in out-of-stock list.\r\n            \r\nUnable if `terminalGroupId` is null.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "Order creation options."
      },
      "iikoTransport.PublicApi.Contracts.Orders.Common.CreateOrderSettingsBase": {
        "title": " ",
        "type": "object",
        "properties": {
          "transportToFrontTimeout": {
            "type": "integer",
            "description": "ё\r\n            Timeout in seconds that specifies how much time is given for order to reach iikoFront. \r\n            After this time, order is nullified if iikoFront doesn't take it. By default - 8 seconds.",
            "format": "int32",
            "nullable": true
          },
          "checkStopList": {
            "type": "boolean",
            "description": "Flag indicating whether there's need to check order items in out-of-stock list.\r\n            \r\nUnable if `terminalGroupId` is null.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "iikoTransport.PublicApi.Contracts.Orders.Common.OrderStatus": {
        "title": " ",
        "enum": [
          "New",
          "Bill",
          "Closed",
          "Deleted"
        ],
        "type": "string",
        "description": "Describes the status of an order."
      },
      "iikoTransport.PublicApi.Contracts.OrderTypes.OrderServiceType": {
        "title": " ",
        "enum": [
          "Common",
          "DeliveryByCourier",
          "DeliveryPickUp"
        ],
        "type": "string",
        "description": "Order service type."
      },
      "iikoTransport.PublicApi.Contracts.OrderTypes.OrderType": {
        "title": " ",
        "required": [
          "id",
          "name",
          "orderServiceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Order type ID in RMS.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Order type name."
          },
          "orderServiceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.OrderTypes.OrderServiceType"
              }
            ],
            "description": "Service type."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "IsDeleted attribute of order type."
          },
          "externalRevision": {
            "type": "integer",
            "description": "External system revision number.",
            "format": "int64",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "IsDefault attribute of order type.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order type."
      },
      "iikoTransport.PublicApi.Contracts.OrderTypes.OrderTypesRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations IDs which payment types have to be returned. \r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request for order types."
      },
      "iikoTransport.PublicApi.Contracts.OrderTypes.OrderTypesResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "orderTypes"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "orderTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.OrderTypes.OrderType, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "List of order types."
          }
        },
        "additionalProperties": false,
        "description": "Response to request for order types by organization."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.AddressFormatType": {
        "title": " ",
        "enum": [
          "Legacy",
          "City",
          "International",
          "IntNoPostcode"
        ],
        "type": "string",
        "description": "Address format type."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.DeliveryOrderPaymentSettings": {
        "title": " ",
        "enum": [
          "WhenOrderOnTheWay",
          "WhenOrderClosed"
        ],
        "type": "string",
        "description": "Delivery payment time option."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.DeliverySettingsServiceType": {
        "title": " ",
        "enum": [
          "CourierOnly",
          "SelfServiceOnly",
          "CourierAndSelfService"
        ],
        "type": "string",
        "description": "Delivery settings service type."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.ExtendedOrganizationInfo": {
        "title": " ",
        "required": [
          "country",
          "restaurantAddress",
          "latitude",
          "longitude",
          "useUaeAddressingSystem",
          "version",
          "currencyIsoName",
          "currencyMinimumDenomination",
          "countryPhoneCode",
          "marketingSourceRequiredInDelivery",
          "defaultDeliveryCityId",
          "deliveryCityIds",
          "deliveryServiceType",
          "defaultCallCenterPaymentTypeId",
          "orderItemCommentEnabled",
          "inn",
          "addressFormatType",
          "isConfirmationEnabled",
          "confirmAllowedIntervalInMinutes",
          "isCloud",
          "addressLookup"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.OrganizationInfo"
          }
        ],
        "properties": {
          "country": {
            "type": "string",
            "description": "Country.",
            "nullable": true
          },
          "restaurantAddress": {
            "type": "string",
            "description": "Restaurant address.",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "description": "Latitude.",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude.",
            "format": "double"
          },
          "useUaeAddressingSystem": {
            "type": "boolean",
            "description": "Regional setting \"Use the UAE Addressing System\"."
          },
          "version": {
            "type": "string",
            "description": "RMS version."
          },
          "currencyIsoName": {
            "type": "string",
            "description": "ISO currency code (for example: RUB, USD, EUR).",
            "nullable": true
          },
          "currencyMinimumDenomination": {
            "type": "number",
            "description": "Value rounding of position.",
            "format": "double",
            "nullable": true
          },
          "countryPhoneCode": {
            "type": "string",
            "description": "Country dialing code.",
            "nullable": true
          },
          "marketingSourceRequiredInDelivery": {
            "type": "boolean",
            "description": "Require mandatory marketing source input when creating a delivery.",
            "nullable": true
          },
          "defaultDeliveryCityId": {
            "type": "string",
            "description": "Default delivery city.",
            "format": "uuid",
            "nullable": true
          },
          "deliveryCityIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Delivery cities.",
            "nullable": true
          },
          "deliveryServiceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.DeliverySettingsServiceType"
              }
            ],
            "description": "Delivery type.",
            "nullable": true
          },
          "deliveryOrderPaymentSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.DeliveryOrderPaymentSettings"
              }
            ],
            "description": "Delivery order payment settings.",
            "nullable": true
          },
          "defaultCallCenterPaymentTypeId": {
            "type": "string",
            "description": "Default payment type for CallCenter.",
            "format": "uuid",
            "nullable": true
          },
          "orderItemCommentEnabled": {
            "type": "boolean",
            "description": "Allow text comments for order items (in all restaurant sections).",
            "nullable": true
          },
          "inn": {
            "type": "string",
            "description": "Restaurant`s INN (Taxpayer Identification Number).",
            "nullable": true
          },
          "addressFormatType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.AddressFormatType"
              }
            ],
            "description": "Address format type."
          },
          "isConfirmationEnabled": {
            "type": "boolean",
            "description": "Determines whether to use delivery confirmation.",
            "nullable": true
          },
          "confirmAllowedIntervalInMinutes": {
            "type": "integer",
            "description": "Confirm orders time interval.",
            "format": "int32",
            "nullable": true
          },
          "isCloud": {
            "type": "boolean",
            "description": "Determines whether organization is hosted in iikoCloud."
          },
          "isAnonymousGuestsAllowed": {
            "type": "boolean",
            "description": "If the store allows orders for anonymous guests, then it is not necessary to transfer\r\ninformation about the guest as part of the delivery order. You can only transfer\r\nthe phone number and optionally name of the guest, which will not be stored in the guest base\r\nand will only be used for the delivery of a current delivery order."
          },
          "addressLookup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.AddressHints.AddressHintsServiceType"
            },
            "description": "Available address lookup services."
          }
        },
        "additionalProperties": false,
        "description": "Organization details."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsRequest": {
        "title": " ",
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations IDs which have to be returned. By default - all organizations from apiLogin.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "nullable": true
          },
          "returnAdditionalInfo": {
            "type": "boolean",
            "description": "A sign whether additional information about the organization should be returned (RMS version, country, restaurantAddress, etc.),\r\n  or only minimal information should be returned (id and name)."
          },
          "includeDisabled": {
            "type": "boolean",
            "description": "Attribute that shows that response contains disabled organizations."
          },
          "returnExternalData": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "External data keys that have to be returned.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for organizations."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.GetOrganizationsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "organizations"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.OrganizationInfo"
            },
            "description": "List of organizations.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Response to request for organizations."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.GetSimpleOrganizationsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "organizations"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.SimpleOrganizationInfo"
            },
            "description": "List of organizations.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Response to request for organizations."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.OrganizationInfo": {
        "title": " ",
        "required": [
          "responseType",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "responseType": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Organization name.",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Organization`s code.",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.ExternalData"
            },
            "description": "Organization`s external data.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Organization details.",
        "discriminator": {
          "propertyName": "responseType",
          "mapping": {
            "Simple": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.SimpleOrganizationInfo",
            "Extended": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.ExtendedOrganizationInfo"
          }
        }
      },
      "iikoTransport.PublicApi.Contracts.Organizations.OrganizationSettings": {
        "title": " ",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Organization ID.",
            "format": "uuid"
          },
          "pricesVatInclusive": {
            "type": "boolean",
            "description": "Determines whether organization prices include VAT.\r\n            \r\nAvailable if `VAT` requested.",
            "nullable": true
          },
          "loyaltyDiscountAffectsVat": {
            "type": "boolean",
            "description": "Determines whether organization loyalty discounts affects VAT.\r\n            \r\n> Working only if \"pricesVatInclusive\" = false\r\n            \r\nAvailable if `VAT` requested.",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "RMS version.\r\n            \r\nAvailable if `Version` requested.",
            "nullable": true
          },
          "addressFormatType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.AddressFormatType"
              }
            ],
            "description": "Address format type.\r\n            \r\nAvailable if `AddressFormatType` requested.",
            "nullable": true
          },
          "isAnonymousGuestsAllowed": {
            "type": "boolean",
            "description": "If the store allows orders for anonymous guests, then it is not necessary to transfer\r\ninformation about the guest as part of the delivery order. You can only transfer\r\nthe phone number and optionally name of the guest, which will not be stored in the guest base\r\nand will only be used for the delivery of a current delivery order.\r\n            \r\nAvailable if `IsAnonymousGuestsAllowed` requested.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Organization name.\r\n            \r\nAvailable if `Name` requested.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country.\r\n            \r\nAvailable if `Country` requested.",
            "nullable": true
          },
          "restaurantAddress": {
            "type": "string",
            "description": "Restaurant address.\r\n            \r\nAvailable if `RestaurantAddress` requested.",
            "nullable": true
          },
          "latitude": {
            "type": "number",
            "description": "Latitude.\r\n            \r\nAvailable if `Latitude` requested.",
            "format": "double",
            "nullable": true
          },
          "longitude": {
            "type": "number",
            "description": "Longitude.\r\n            \r\nAvailable if `Longitude` requested.",
            "format": "double",
            "nullable": true
          },
          "useUaeAddressingSystem": {
            "type": "boolean",
            "description": "Regional setting \"Use the UAE Addressing System\".\r\n            \r\nAvailable if `UseUaeAddressingSystem` requested.",
            "nullable": true
          },
          "countryPhoneCode": {
            "type": "string",
            "description": "Country dialing code.\r\n            \r\nAvailable if `CountryPhoneCode` requested.",
            "nullable": true
          },
          "marketingSourceRequiredInDelivery": {
            "type": "boolean",
            "description": "Require mandatory marketing source input when creating a delivery.\r\n            \r\nAvailable if `MarketingSourceRequiredInDelivery` requested.",
            "nullable": true
          },
          "defaultDeliveryCityId": {
            "type": "string",
            "description": "Default delivery city.\r\n            \r\nAvailable if `DefaultDeliveryCityId` requested.",
            "format": "uuid",
            "nullable": true
          },
          "deliveryCityIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Delivery cities.\r\n            \r\nAvailable if `DeliveryCityIds` requested.",
            "nullable": true
          },
          "deliveryServiceType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.DeliverySettingsServiceType"
              }
            ],
            "description": "Delivery type.\r\n            \r\nAvailable if `DeliveryServiceType` requested.",
            "nullable": true
          },
          "deliveryOrderPaymentSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.DeliveryOrderPaymentSettings"
              }
            ],
            "description": "Delivery order payment settings.\r\n            \r\nAvailable if `DeliveryOrderPaymentSettings` requested.",
            "nullable": true
          },
          "defaultCallCenterPaymentTypeId": {
            "type": "string",
            "description": "Default payment type for CallCenter.\r\n            \r\nAvailable if `DefaultCallCenterPaymentTypeId` requested.",
            "format": "uuid",
            "nullable": true
          },
          "orderItemCommentEnabled": {
            "type": "boolean",
            "description": "Allow text comments for order items (in all restaurant sections).\r\n            \r\nAvailable if `OrderItemCommentEnabled` requested.",
            "nullable": true
          },
          "isConfirmationEnabled": {
            "type": "boolean",
            "description": "Determines whether to use delivery confirmation.\r\n            \r\nAvailable if `IsConfirmationEnabled` requested.",
            "nullable": true
          },
          "confirmAllowedIntervalInMinutes": {
            "type": "integer",
            "description": "Confirm orders time interval.\r\n            \r\nAvailable if `ConfirmAllowedIntervalInMinutes` requested.",
            "format": "int32",
            "nullable": true
          },
          "addressLookup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.AddressHints.AddressHintsServiceType"
            },
            "description": "Available address lookup services.\r\n            \r\nAvailable if `AddressLookup` requested.",
            "nullable": true
          },
          "useBusinessHoursAndMapping": {
            "type": "boolean",
            "description": "Determines whether the organization use a business hours and mapping settings.",
            "nullable": true
          },
          "currencyIsoName": {
            "type": "string",
            "description": "ISO currency code (for example: RUB, USD, EUR).",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.ExternalData"
            },
            "description": "Organization`s external data.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Organization settings."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.OrganizationSettingsParameters": {
        "title": " ",
        "enum": [
          "PricesVatInclusive",
          "LoyaltyDiscountAffectsVat",
          "Version",
          "AddressFormatType",
          "IsAnonymousGuestsAllowed",
          "Name",
          "Country",
          "RestaurantAddress",
          "Latitude",
          "Longitude",
          "UseUaeAddressingSystem",
          "CountryPhoneCode",
          "MarketingSourceRequiredInDelivery",
          "DefaultDeliveryCityId",
          "DeliveryCityIds",
          "DeliveryServiceType",
          "DefaultCallCenterPaymentTypeId",
          "OrderItemCommentEnabled",
          "IsConfirmationEnabled",
          "ConfirmAllowedIntervalInMinutes",
          "AddressLookup",
          "UseBusinessHoursAndMapping",
          "DeliveryOrderPaymentSettings",
          "CurrencyIsoName"
        ],
        "type": "string",
        "description": "Type of organization settings."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.OrganizationsSettingsRequest": {
        "title": " ",
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations IDs which have to be returned. By default - all organizations from apiLogin.",
            "nullable": true
          },
          "includeDisabled": {
            "type": "boolean",
            "description": "Attribute that shows that response contains disabled organizations."
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.OrganizationSettingsParameters"
            },
            "description": "Parameters of information to be present in response."
          },
          "returnExternalData": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "External data keys that have to be returned.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for organizations specified settings."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.OrganizationsSettingsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "organizations"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.OrganizationSettings"
            },
            "description": "List of organizations with specified settings."
          }
        },
        "additionalProperties": false,
        "description": "Response to request for organizations specified settings."
      },
      "iikoTransport.PublicApi.Contracts.Organizations.SimpleOrganizationInfo": {
        "title": " ",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Organizations.OrganizationInfo"
          }
        ],
        "additionalProperties": false,
        "description": "Organization details."
      },
      "iikoTransport.PublicApi.Contracts.Payments.PaymentLink": {
        "title": " ",
        "required": [
          "id",
          "status",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique key.",
            "format": "uuid"
          },
          "integrationType": {
            "type": "string",
            "description": "Integration type code.",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Payments.PaymentLinkStatus"
              }
            ],
            "description": "Payment link transport status."
          },
          "url": {
            "type": "string",
            "description": "Payload.",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update date (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "statusText": {
            "type": "string",
            "description": "Payment status (equals Payment link status if empty).",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Payment link information."
      },
      "iikoTransport.PublicApi.Contracts.Payments.PaymentLinkStatus": {
        "title": " ",
        "enum": [
          "CreationWaiting",
          "New",
          "ReadyToBeCaptured",
          "Captured",
          "Cancelled",
          "NotFound",
          "Refund"
        ],
        "type": "string",
        "description": "Статус платёжной ссылки на стороне транспорта."
      },
      "iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentProcessingType": {
        "title": " ",
        "enum": [
          "External",
          "Internal",
          "Both"
        ],
        "type": "string",
        "description": "Payment processing type."
      },
      "iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentType": {
        "title": " ",
        "required": [
          "applicableMarketingCampaigns",
          "terminalGroups"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment type ID",
            "format": "uuid",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Payment type code",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Payment type name",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Payment type comment",
            "nullable": true
          },
          "combinable": {
            "type": "boolean",
            "description": "Combinability attribute"
          },
          "externalRevision": {
            "type": "integer",
            "description": "External system revision number.",
            "format": "int64",
            "nullable": true
          },
          "applicableMarketingCampaigns": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Array of marketing campaigns associated with LoyaltyApp payment type applicable to this organization."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "IsDeleted attribute of payment type."
          },
          "printCheque": {
            "type": "boolean",
            "description": "If true, payment type is fiscal and bill will be printed."
          },
          "paymentProcessingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentProcessingType"
              }
            ],
            "description": "Describes operation processing type.",
            "nullable": true
          },
          "paymentTypeKind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypeKind"
              }
            ],
            "description": "Payment type category.",
            "nullable": true
          },
          "terminalGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup"
            },
            "description": "Terminal groups where this payment type is available."
          }
        },
        "additionalProperties": false,
        "description": "DTO for payment type in iikoRMS"
      },
      "iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypeKind": {
        "title": " ",
        "enum": [
          "Unknown",
          "Cash",
          "Card",
          "Credit",
          "Writeoff",
          "Voucher",
          "External",
          "IikoCard"
        ],
        "type": "string",
        "description": "Payment type category."
      },
      "iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypesRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations IDs which payment types have to be returned. \r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request for payment types."
      },
      "iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentTypesResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "paymentTypes"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "format": "uuid"
          },
          "paymentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.PaymentTypes.PaymentType"
            },
            "description": "List of payment types and terminal groups where they are available."
          }
        },
        "additionalProperties": false,
        "description": "Response to request for payment types by organization."
      },
      "iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalType": {
        "title": " ",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of removal type."
          },
          "comment": {
            "type": "string",
            "description": "Comment.",
            "nullable": true
          },
          "canWriteoffToCafe": {
            "type": "boolean",
            "description": "Can write off to cafe."
          },
          "canWriteoffToWaiter": {
            "type": "boolean",
            "description": "Can write off to waiter."
          },
          "canWriteoffToUser": {
            "type": "boolean",
            "description": "Can write off to user."
          },
          "reasonRequired": {
            "type": "boolean",
            "description": "Require comments on operations."
          },
          "manual": {
            "type": "boolean",
            "description": "Can be used manually."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is deleted sign."
          }
        },
        "additionalProperties": false,
        "description": "Removal type (aka reason for deletion)."
      },
      "iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalTypesRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations ids which removal types needs to be returned.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request for organization's removal types (reasons for deletion)."
      },
      "iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalTypesResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "removalTypes"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "removalTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.RemovalTypes.RemovalType"
            },
            "description": "List of removal types."
          }
        },
        "additionalProperties": false,
        "description": "Response with removal types (reasons for deletion) list."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.AddOrderItemsToBanquetRequest": {
        "title": " ",
        "required": [
          "reserveId",
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "reserveId": {
            "type": "string",
            "description": "Banquet ID.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items (may include ProductOrderItem or CompoundOrderItem)."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo"
            },
            "description": "Combos.\n\n > Allowed from version `7.6.1`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for add order items to banquet."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.AddOrderPaymentsToBanquetRequest": {
        "title": " ",
        "required": [
          "reserveId",
          "organizationId",
          "payments"
        ],
        "type": "object",
        "properties": {
          "reserveId": {
            "type": "string",
            "description": "Reserve ID.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
            },
            "description": "Order payments."
          }
        },
        "additionalProperties": false,
        "description": "Request for add order payments to banquet."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.CancelReserveRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "reserveId",
          "cancelReason"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID of the reserve.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "reserveId": {
            "type": "string",
            "description": "Reserve ID to cancel.",
            "format": "uuid"
          },
          "cancelReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReserveCancelReason"
              }
            ],
            "description": "Reason to cancel planned event."
          }
        },
        "additionalProperties": false,
        "description": "Request for canceling the reservation."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ChangeBanquetOrderItemsRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "reserveId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "reserveId": {
            "type": "string",
            "description": "Banquet ID.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items (may include ProductOrderItem or CompoundOrderItem).",
            "nullable": true
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo"
            },
            "description": "Combos.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request to change banquet order items."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ChangeReserveEstimatedStartTimeRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "reserveId",
          "newEstimatedStartTime"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "reserveId": {
            "type": "string",
            "description": "Reserve/banquet ID.",
            "format": "uuid"
          },
          "newEstimatedStartTime": {
            "type": "string",
            "description": "New estimated start time of reserve/banquet.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Request to change reserve/banquet estimated start time."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ChangeReserveTablesRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "reserveId",
          "tableIds"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "reserveId": {
            "type": "string",
            "description": "Reserve ID.",
            "format": "uuid"
          },
          "tableIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Table IDs."
          }
        },
        "additionalProperties": false,
        "description": "Request to change reserve/banquet tables."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.Color": {
        "title": " ",
        "required": [
          "a",
          "r",
          "g",
          "b"
        ],
        "type": "object",
        "properties": {
          "a": {
            "type": "integer",
            "description": "Alpha-component.",
            "format": "int32"
          },
          "r": {
            "type": "integer",
            "description": "Red-component.",
            "format": "int32"
          },
          "g": {
            "type": "integer",
            "description": "Green-component.",
            "format": "int32"
          },
          "b": {
            "type": "integer",
            "description": "Blue-component.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Color."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.CreateReserveRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "customer",
          "phone",
          "durationInMinutes",
          "shouldRemind",
          "tableIds",
          "estimatedStartTime"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID of a new banquet/reserve.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Front group ID an banquet/reserve must be sent to.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "Banquet/reserve ID. Must be unique.",
            "format": "uuid",
            "nullable": true
          },
          "externalNumber": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Banquet/reserve external number.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.Request.ReserveOrder"
              }
            ],
            "description": "Order. Used only at a banquet.",
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RegularCustomer"
              }
            ],
            "description": "Customer."
          },
          "phone": {
            "type": "string",
            "description": "Telephone number.\r\n> Must begin with symbol \"+\" and must be at least 8 digits."
          },
          "guestsCount": {
            "type": "integer",
            "description": "Number of guests.",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "comment": {
            "type": "string",
            "description": "Banquet/reserve comment.",
            "nullable": true
          },
          "durationInMinutes": {
            "type": "integer",
            "description": "Estimated banquet duration.",
            "format": "int64"
          },
          "shouldRemind": {
            "type": "boolean",
            "description": "Whether to remind staff to prepare table beforehand."
          },
          "tableIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Reserved tables."
          },
          "estimatedStartTime": {
            "type": "string",
            "description": "Estimated time when reserve will be closed or banquet will be started (Local for the terminal).\r\nReservation can be made up to 90 days prior to the date.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "transportToFrontTimeout": {
            "type": "integer",
            "description": "Timeout in seconds that specifies how much time is given for banquet/reserve to reach iikoFront. \r\nAfter this time, banquet/reserve is nullified if iikoFront doesn't take it. By default - 8 seconds.",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "guests": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.GuestsInfo"
              }
            ],
            "description": "Guests information.",
            "nullable": true
          },
          "eventType": {
            "maxLength": 160,
            "minLength": 0,
            "type": "string",
            "description": "Event type.\n\n > Allowed from version `8.5.6`.",
            "nullable": true
          },
          "createReserveSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Orders.Common.CreateOrderSettingsBase"
              }
            ],
            "description": "Reserve creation parameters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Banquet/reserve creation model."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.Font": {
        "title": " ",
        "required": [
          "fontFamily",
          "size",
          "fontStyle"
        ],
        "type": "object",
        "properties": {
          "fontFamily": {
            "type": "string",
            "description": "Font family."
          },
          "size": {
            "type": "number",
            "description": "Font size.",
            "format": "float"
          },
          "fontStyle": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.FontStyle"
              }
            ],
            "description": "Font style. May be multiple values."
          }
        },
        "additionalProperties": false,
        "description": "Font."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.FontStyle": {
        "title": " ",
        "enum": [
          "Regular",
          "Bold",
          "Italic",
          "Underline",
          "Strikeout"
        ],
        "type": "string",
        "description": "Font style."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsRequest": {
        "title": " ",
        "required": [
          "terminalGroupIds"
        ],
        "type": "object",
        "properties": {
          "terminalGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation."
          },
          "returnSchema": {
            "type": "boolean",
            "description": "Indicates whether table layout information should be returned..."
          },
          "revision": {
            "type": "integer",
            "description": "Last modified time after.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for get all restaurant sections of specified terminal groups, for which banquet/reserve booking are available."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "restaurantSections",
          "revision"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "restaurantSections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.RestaurantSection"
            },
            "description": "Restaurant sections."
          },
          "revision": {
            "type": "integer",
            "description": "Items list revision.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "Response which contains all restaurant sections of specified terminal groups for which banquet/reserve booking are available."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsWorkloadRequest": {
        "title": " ",
        "required": [
          "restaurantSectionIds",
          "dateFrom"
        ],
        "type": "object",
        "properties": {
          "restaurantSectionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of restaurant section ID.\r\n            \r\nCan be obtained by `/api/1/reserve/available_restaurant_sections` operation."
          },
          "dateFrom": {
            "type": "string",
            "description": "Estimated start time (Local for the terminal). Lower limit.\r\n            \r\nOrder details are stored for 90 days.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "dateTo": {
            "type": "string",
            "description": "Estimated start time (Local for the terminal). Upper limit.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Request for check restaurant sections workload."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.GetRestaurantSectionsWorkloadResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "reserves"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "reserves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReserveInWorkload"
            },
            "description": "Banquets/reserves."
          }
        },
        "additionalProperties": false,
        "description": "Response for check restaurant sections workload."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.GuestsInfo": {
        "title": " ",
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Guests count.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Reserve guests information."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.Request.ReserveOrder": {
        "title": " ",
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "menuId": {
            "type": "string",
            "description": "External menu ID.",
            "nullable": true,
            "example": null
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo"
            },
            "description": "Combos included in order.",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
            },
            "description": "Order payment components.\n\n > Type **LoyaltyCard** allowed from version `7.1.5`.",
            "nullable": true
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
            },
            "description": "Order tips components.",
            "nullable": true
          },
          "sourceKey": {
            "type": "string",
            "description": "The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration.",
            "nullable": true
          },
          "discountsInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo"
              }
            ],
            "description": "Discounts/surcharges.",
            "nullable": true
          },
          "loyaltyInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo"
              }
            ],
            "description": "Information about Loyalty app.",
            "nullable": true
          },
          "orderTypeId": {
            "type": "string",
            "description": "Order type ID. \r\n            \r\nCan be obtained by `/api/1/deliveries/order_types` operation",
            "format": "uuid",
            "nullable": true
          },
          "chequeAdditionalInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo"
              }
            ],
            "description": "Cheque additional information.",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData"
            },
            "description": "Order external data.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.Reserve": {
        "title": " ",
        "required": [
          "customer",
          "guestsCount",
          "durationInMinutes",
          "shouldRemind",
          "status",
          "tableIds",
          "estimatedStartTime"
        ],
        "type": "object",
        "properties": {
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Customer"
              }
            ],
            "description": "Client that placed the reserve."
          },
          "guestsCount": {
            "type": "integer",
            "description": "Estimated guests count.",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "description": "Optional comment for reserve or banquet.",
            "nullable": true
          },
          "durationInMinutes": {
            "type": "integer",
            "description": "Estimated banquet duration.",
            "format": "int64"
          },
          "shouldRemind": {
            "type": "boolean",
            "description": "Whether to remind staff to prepare table beforehand."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReserveStatus"
              }
            ],
            "description": "Status of the reserve or banquet."
          },
          "cancelReason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReserveCancelReason"
              }
            ],
            "description": "The reserve cancellation reason or null if the reserve hasn't been canceled.",
            "nullable": true
          },
          "tableIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Reserved table IDs."
          },
          "estimatedStartTime": {
            "type": "string",
            "description": "Estimated time when reserve will be closed or banquet will be started.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "guestsComingTime": {
            "type": "string",
            "description": "Time when guests came and reserve was closed or banquet was started.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "phone": {
            "type": "string",
            "description": "Telephone number.",
            "nullable": true
          },
          "eventType": {
            "type": "string",
            "description": "Event type.\n\n > Allowed from version `8.5.6`.",
            "nullable": true
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.Response.ReserveOrder"
              }
            ],
            "description": "Order. Used only at a banquet.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Banquet/reserve."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ReserveCancelReason": {
        "title": " ",
        "enum": [
          "ClientNotAppeared",
          "ClientRefused",
          "Other"
        ],
        "type": "string",
        "description": "Reason why planned event failed."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo": {
        "title": " ",
        "required": [
          "id",
          "organizationId",
          "timestamp",
          "creationStatus",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Banquet/reserve ID.",
            "format": "uuid"
          },
          "externalNumber": {
            "type": "string",
            "description": "Banquet/reserve external number.",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "timestamp": {
            "type": "integer",
            "description": "Timestamp of most recent banquet/reserve change that took place on iikoTransport server.",
            "format": "int64"
          },
          "creationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CreationStatus"
              }
            ],
            "description": "Banquet/reserve creation status. In case of asynchronous creation, it allows to track the instance an banquet/reserve was validated/created in iikoFront."
          },
          "errorInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorInfo"
              }
            ],
            "description": "Banquet/reserve creation error details.\r\n> Required only if \"creationStatus\"=\"Error\".",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Banquet/reserve is deleted."
          },
          "reserve": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.Reserve"
              }
            ],
            "description": "Banquet/reserve.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Banquet/reserve."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ReserveInWorkload": {
        "title": " ",
        "required": [
          "id",
          "tableIds",
          "estimatedStartTime",
          "durationInMinutes",
          "guestsCount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Banquet/reserve ID.",
            "format": "uuid"
          },
          "tableIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Reserved tables."
          },
          "estimatedStartTime": {
            "type": "string",
            "description": "Estimated time when reserve will be closed or banquet will be started (Local for the terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "durationInMinutes": {
            "type": "integer",
            "description": "Estimated banquet duration.",
            "format": "int64"
          },
          "guestsCount": {
            "type": "integer",
            "description": "Number of guests.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Banquet/reserve."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ReserveResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "reserveInfo"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "format": "uuid"
          },
          "reserveInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo"
              }
            ],
            "description": "Banquet/reserve."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for return of banquets/reserves."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ReservesByIdRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "reserveIds"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID for which an order search will be performed.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "reserveIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "IDs of banquets/reserves information on which is required."
          },
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Source keys.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for information about banquets/reserves using IDs."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ReservesResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "reserves"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "format": "uuid"
          },
          "reserves": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo"
            },
            "description": "Banquets/reserves."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for return of banquets/reserves."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.ReserveStatus": {
        "title": " ",
        "enum": [
          "New",
          "Started",
          "Closed"
        ],
        "type": "string",
        "description": "Describes the status of a reserve or a banquet."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.Response.ReserveOrder": {
        "title": " ",
        "required": [
          "sum",
          "number",
          "guestsInfo",
          "items",
          "orderType",
          "terminalGroupId",
          "processedPaymentsSum"
        ],
        "type": "object",
        "properties": {
          "menuId": {
            "type": "string",
            "description": "External menu ID.",
            "nullable": true
          },
          "sum": {
            "type": "number",
            "description": "Order amount (after discount or surcharge).",
            "format": "double"
          },
          "number": {
            "type": "integer",
            "description": "Delivery No.",
            "format": "int32"
          },
          "sourceKey": {
            "type": "string",
            "description": "Delivery source.",
            "nullable": true
          },
          "whenBillPrinted": {
            "type": "string",
            "description": "Invoice printing time (guest bill time).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "whenClosed": {
            "type": "string",
            "description": "Delivery closing time (Local for delivery terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "conception": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Conception"
              }
            ],
            "description": "Concept.",
            "nullable": true
          },
          "guestsInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.GuestsInfo"
              }
            ],
            "description": "Information about order guests.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem"
            },
            "description": "Order items."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderCombo"
            },
            "description": "Combo.",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentItem"
            },
            "description": "Payments.",
            "nullable": true
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsPaymentItem"
            },
            "description": "Tips.",
            "nullable": true
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountItem"
            },
            "description": "Discounts.",
            "nullable": true
          },
          "orderType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderType"
              }
            ],
            "description": "Order type.",
            "nullable": true
          },
          "terminalGroupId": {
            "type": "string",
            "description": "ID of the terminal group where the order is located.",
            "format": "uuid"
          },
          "processedPaymentsSum": {
            "type": "number",
            "description": "The amount of processed payments.\r\n<remarks>\r\nnull - only for unsupported POS versions.\r\n</remarks>\n\n > Allowed from version `7.6.0`.",
            "format": "double",
            "nullable": true
          },
          "loyaltyInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.LoyaltyInfo"
              }
            ],
            "description": "Information about Loyalty app.\r\n<remarks>\r\nnull - only for unsupported POS versions.\r\n</remarks>",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalData"
            },
            "description": "Order external data.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.RestaurantSection": {
        "title": " ",
        "required": [
          "id",
          "terminalGroupId",
          "name",
          "tables"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Restaurant section ID.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name."
          },
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.Table"
            },
            "description": "Tables."
          },
          "schema": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.SectionSchema"
              }
            ],
            "description": "Table layout.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Restaurant section."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionEllipse": {
        "title": " ",
        "required": [
          "color",
          "x",
          "y",
          "z",
          "angle",
          "width",
          "height"
        ],
        "type": "object",
        "properties": {
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.Color"
              }
            ],
            "description": "Color."
          },
          "x": {
            "type": "integer",
            "description": "X coordinate of left point of item.",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "description": "Y coordinate of top point of item.",
            "format": "int32"
          },
          "z": {
            "type": "integer",
            "description": "Z-index of item.",
            "format": "int32"
          },
          "angle": {
            "type": "number",
            "description": "Item's angle of slope.",
            "format": "double"
          },
          "width": {
            "type": "integer",
            "description": "Item's width in px.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Item's height in px.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Restaurant section ellipse."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionMark": {
        "title": " ",
        "required": [
          "text",
          "font",
          "color",
          "x",
          "y",
          "z",
          "angle",
          "width",
          "height"
        ],
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Text."
          },
          "font": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.Font"
              }
            ],
            "description": "Font."
          },
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.Color"
              }
            ],
            "description": "Color."
          },
          "x": {
            "type": "integer",
            "description": "X coordinate of left point of item.",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "description": "Y coordinate of top point of item.",
            "format": "int32"
          },
          "z": {
            "type": "integer",
            "description": "Z-index of item.",
            "format": "int32"
          },
          "angle": {
            "type": "number",
            "description": "Item's angle of slope.",
            "format": "double"
          },
          "width": {
            "type": "integer",
            "description": "Item's width in px.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Item's height in px.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Restaurant section mark."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionRectangle": {
        "title": " ",
        "required": [
          "color",
          "x",
          "y",
          "z",
          "angle",
          "width",
          "height"
        ],
        "type": "object",
        "properties": {
          "color": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.Color"
              }
            ],
            "description": "Color."
          },
          "x": {
            "type": "integer",
            "description": "X coordinate of left point of item.",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "description": "Y coordinate of top point of item.",
            "format": "int32"
          },
          "z": {
            "type": "integer",
            "description": "Z-index of item.",
            "format": "int32"
          },
          "angle": {
            "type": "number",
            "description": "Item's angle of slope.",
            "format": "double"
          },
          "width": {
            "type": "integer",
            "description": "Item's width in px.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Item's height in px.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Restaurant section rectangle."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionTable": {
        "title": " ",
        "required": [
          "tableId",
          "x",
          "y",
          "z",
          "angle",
          "width",
          "height"
        ],
        "type": "object",
        "properties": {
          "tableId": {
            "type": "string",
            "description": "Table ID.",
            "format": "uuid"
          },
          "x": {
            "type": "integer",
            "description": "X coordinate of left point of item.",
            "format": "int32"
          },
          "y": {
            "type": "integer",
            "description": "Y coordinate of top point of item.",
            "format": "int32"
          },
          "z": {
            "type": "integer",
            "description": "Z-index of item.",
            "format": "int32"
          },
          "angle": {
            "type": "number",
            "description": "Item's angle of slope.",
            "format": "double"
          },
          "width": {
            "type": "integer",
            "description": "Item's width in px.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Item's height in px.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Restaurant section table."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.SectionSchema": {
        "title": " ",
        "required": [
          "width",
          "height",
          "markElements",
          "tableElements",
          "rectangleElements",
          "ellipseElements",
          "revision",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "description": "Layout width in px.",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "description": "Layout height in px.",
            "format": "int32"
          },
          "markElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionMark"
            },
            "description": "Collection of restaurant section marks."
          },
          "tableElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionTable"
            },
            "description": "Collection of restaurant section tables."
          },
          "rectangleElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionRectangle"
            },
            "description": "Collection of restaurant section rectangles."
          },
          "ellipseElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.RestaurantSectionEllipse"
            },
            "description": "Collection of restaurant section ellipses."
          },
          "revision": {
            "type": "integer",
            "description": "Last modified time.",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is schema deleted."
          }
        },
        "additionalProperties": false,
        "description": "Table layout."
      },
      "iikoTransport.PublicApi.Contracts.Reserves.Table": {
        "title": " ",
        "required": [
          "id",
          "number",
          "name",
          "seatingCapacity",
          "revision",
          "isDeleted",
          "posId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Table ID.",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "description": "Number of table.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Table name specified in the organization settings."
          },
          "seatingCapacity": {
            "type": "integer",
            "description": "Seating capacity of the table.",
            "format": "int32"
          },
          "revision": {
            "type": "integer",
            "description": "Last modified time.",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is table deleted."
          },
          "posId": {
            "type": "string",
            "description": "POS table Id.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Table."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.AddProductsToStopListItem": {
        "title": " ",
        "required": [
          "productId",
          "balance"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Out-of-stock list product ID.",
            "format": "uuid"
          },
          "sizeId": {
            "type": "string",
            "description": "Out-of-stock list product size ID.",
            "format": "uuid",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "description": "Product balance.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Item for add to out-of-stock list."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.AddProductsToStopListRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.AddProductsToStopListItem"
            },
            "description": "Items for adding to out-of-stock list."
          }
        },
        "additionalProperties": false,
        "description": "Request for add items to out-of-stock list."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.CheckStopListRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Front group ID the order must be sent to.\r\n\r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items."
          }
        },
        "additionalProperties": false,
        "description": "Request for check items in out-of-stock list."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.CheckStopListResponse": {
        "title": " ",
        "required": [
          "correlationId"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "rejectedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.StopListItem"
            },
            "description": "Set of items in out-of-stock list.\r\n            \r\nIf null, none of requested items are in out-of-stock list.\r\n> Present in response only if **not null**.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response for check items in out-of-stock list."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.ClearStopListRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request to clear out-of-stock list."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.RemoveProductsFromStopListItem": {
        "title": " ",
        "required": [
          "productId"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Out-of-stock list product ID.",
            "format": "uuid"
          },
          "sizeId": {
            "type": "string",
            "description": "Out-of-stock list product size ID.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Item for remove from out-of-stock list."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.RemoveProductsFromStopListRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId",
          "items"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.RemoveProductsFromStopListItem"
            },
            "description": "Items for removing from out-of-stock list."
          }
        },
        "additionalProperties": false,
        "description": "Request for remove items from out-of-stock list."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.StopListItem": {
        "title": " ",
        "required": [
          "balance",
          "productId"
        ],
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "description": "Product balance.",
            "format": "double"
          },
          "productId": {
            "type": "string",
            "description": "Out-of-stock list product ID.",
            "format": "uuid"
          },
          "sizeId": {
            "type": "string",
            "description": "Product size.",
            "format": "uuid",
            "nullable": true,
            "example": null
          },
          "sku": {
            "type": "string",
            "description": "Stock keeping unit.",
            "nullable": true
          },
          "dateAdd": {
            "type": "string",
            "description": "Date the product was added to the out-of-stock list (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Out-of-stock list."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.StopListsRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations for which out-of-stock lists will be requested.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "returnSize": {
            "type": "boolean",
            "description": "Flag indicating the need to return the sizes of the dish.",
            "example": false
          },
          "terminalGroupsIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of terminal groups for which you need to get out-of-stock lists.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO of out-of-stock lists request."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.StopListsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "terminalGroupStopLists"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "terminalGroupStopLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopList, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "Set of out-of-stock lists"
          }
        },
        "additionalProperties": false,
        "description": "Status of out-of-stock lists for a specified organization"
      },
      "iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopList": {
        "title": " ",
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal ID.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.StopListItem"
            },
            "description": "Out-of-stock list."
          }
        },
        "additionalProperties": false,
        "description": "Out-of-stock list status for a group of front terminals."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopListUpdate": {
        "title": " ",
        "required": [
          "id",
          "isFull"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Terminal ID.",
            "format": "uuid"
          },
          "isFull": {
            "type": "boolean",
            "description": "Whether out-of-stock list is fully updated."
          }
        },
        "additionalProperties": false,
        "description": "Out-of-stock list update for a group of front terminals."
      },
      "iikoTransport.PublicApi.Contracts.StopLists.WebHookOnStopListChangeData": {
        "title": " ",
        "required": [
          "terminalGroupsStopListsUpdates"
        ],
        "type": "object",
        "properties": {
          "terminalGroupsStopListsUpdates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.TerminalGroupStopListUpdate"
            },
            "description": "Terminal groups with out-of-stock list updates."
          }
        },
        "additionalProperties": false,
        "description": "Out-of-stock list update info."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.AddCustomerToTableOrderRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "orderId",
          "customer"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.TableOrderCustomer"
              }
            ],
            "description": "Guest info."
          }
        },
        "additionalProperties": false,
        "description": "Request for adding customer to order."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.AddItemsToTableOrderRequest": {
        "title": " ",
        "required": [
          "orderId",
          "organizationId",
          "items"
        ],
        "type": "object",
        "properties": {
          "addOrderItemsSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.AddTableOrderItemsSettings"
              }
            ],
            "description": "Add order items parameters.",
            "nullable": true
          },
          "orderId": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items (may include ProductOrderItem or CompoundOrderItem)."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo"
            },
            "description": "Combos.\n\n > Allowed from version `7.6.1`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for add order items to table order."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.AddTableOrderItemsSettings": {
        "title": " ",
        "type": "object",
        "properties": {
          "servicePrint": {
            "type": "boolean",
            "description": "Auto service print is needed.",
            "nullable": true,
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "Add table order items options."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.CreateTableOrderRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Front group ID an order must be sent to.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.TableOrder"
              }
            ],
            "description": "Order."
          },
          "createOrderSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.CreateTableOrderSettings"
              }
            ],
            "description": "Order creation parameters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order creation model."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.CreateTableOrderSettings": {
        "title": " ",
        "type": "object",
        "properties": {
          "servicePrint": {
            "type": "boolean",
            "description": "Auto service print is needed.",
            "nullable": true,
            "example": false
          },
          "transportToFrontTimeout": {
            "type": "integer",
            "description": "ё\r\n            Timeout in seconds that specifies how much time is given for order to reach iikoFront. \r\n            After this time, order is nullified if iikoFront doesn't take it. By default - 8 seconds.",
            "format": "int32",
            "nullable": true
          },
          "checkStopList": {
            "type": "boolean",
            "description": "Flag indicating whether there's need to check order items in out-of-stock list.\r\n            \r\nUnable if `terminalGroupId` is null.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "Table order creation options"
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.GetTableOrdersByIdRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Source keys.",
            "nullable": true
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization IDs.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "orderIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Order IDs.\r\n            \r\n> Required if \"posOrderIds\" is null. Must be null if \"posOrderIds\" is not null.",
            "nullable": true
          },
          "posOrderIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "POS order IDs.\r\n            \r\n> Required if \"orderIds\" is null. Must be null if \"orderIds\" is not null.",
            "nullable": true
          },
          "returnExternalDataKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Keys for retrun external data information.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for information about orders using IDs."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.GetTableOrdersByTableRequest": {
        "title": " ",
        "required": [
          "organizationIds",
          "tableIds"
        ],
        "type": "object",
        "properties": {
          "sourceKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Source keys.",
            "nullable": true
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "tableIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Table IDs.\r\n            \r\nCan be obtained by `/api/1/reserve/available_restaurant_sections` operation."
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Orders.Common.OrderStatus"
            },
            "description": "Order statuses.",
            "nullable": true
          },
          "dateFrom": {
            "type": "string",
            "description": "Order creation date (terminal time zone). Lower limit.\r\n            \r\nOrder details are stored for 90 days.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "dateTo": {
            "type": "string",
            "description": "Order creation date (terminal time zone). Upper limit.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          }
        },
        "additionalProperties": false,
        "description": "Request for information about orders using table IDs."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.GuestsInfo": {
        "title": " ",
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Guests count.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Table order guests information."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.InitTableOrderByPosOrderRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId",
          "posOrderIds"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "posOrderIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "POS order IDs."
          }
        },
        "additionalProperties": false,
        "description": "Request for init orders on table by POS orders."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.InitTableOrderRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "terminalGroupId",
          "tableIds"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "terminalGroupId": {
            "type": "string",
            "description": "Terminal group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "tableIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Table IDs.\r\n            \r\nCan be obtained by `/api/1/reserve/available_restaurant_sections` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request for init orders on table."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.TableOrder": {
        "title": " ",
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid",
            "nullable": true
          },
          "externalNumber": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Order external number.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          },
          "tableIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Table IDs.\r\n            \r\nCan be obtained by `/api/1/reserve/available_restaurant_sections` operation.",
            "nullable": true
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.RegularCustomer"
              }
            ],
            "description": "Guest.\n\n > Allowed from version `7.5.2`.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Guest phone.\n\n > Allowed from version `7.5.2`.",
            "nullable": true
          },
          "guestCount": {
            "type": "integer",
            "description": "Amount of guests in the order.\n\n > Allowed from version `7.6.1`.",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "guests": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Request.GuestsInfo"
              }
            ],
            "description": "Guests information.\n\n > Allowed from version `7.6.1`.",
            "nullable": true
          },
          "tabName": {
            "type": "string",
            "description": "Tab name (only for fastfood terminals group in tab mode).\n\n > Allowed from version `7.6.1`.",
            "nullable": true
          },
          "menuId": {
            "type": "string",
            "description": "External menu ID.",
            "nullable": true,
            "example": null
          },
          "priceCategoryId": {
            "type": "string",
            "description": "Price category id of the order.\r\n\r\nCan be obtained by `/api/2/menu` operation.\n\n > Allowed from version `9.0.5`.",
            "format": "uuid",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.OrderItem"
            },
            "description": "Order items."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Combo"
            },
            "description": "Combos included in order.",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.Payment"
            },
            "description": "Order payment components.\n\n > Type **LoyaltyCard** allowed from version `7.1.5`.",
            "nullable": true
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.TipsPayment"
            },
            "description": "Order tips components.",
            "nullable": true
          },
          "sourceKey": {
            "type": "string",
            "description": "The string key (marker) of the source (partner - api user) that created the order. Needed to limit the visibility of orders for external integration.",
            "nullable": true
          },
          "discountsInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.DiscountsInfo"
              }
            ],
            "description": "Discounts/surcharges.",
            "nullable": true
          },
          "loyaltyInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.LoyaltyInfo"
              }
            ],
            "description": "Information about Loyalty app.",
            "nullable": true
          },
          "orderTypeId": {
            "type": "string",
            "description": "Order type ID. \r\n            \r\nCan be obtained by `/api/1/deliveries/order_types` operation",
            "format": "uuid",
            "nullable": true
          },
          "chequeAdditionalInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.ChequeAdditionalInfo"
              }
            ],
            "description": "Cheque additional information.",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Request.CreateOrder.ExternalData"
            },
            "description": "Order external data.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Request.TableOrderCustomer": {
        "title": " ",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Existing customer ID in RMS. \r\n> If null - the phone number and name is searched in database, otherwise the new customer is created in RMS.",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Name of customer.\r\n> Required if \"id\" == null.\r\n> Not required if \"id\" specified.",
            "nullable": true
          },
          "surname": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "comment": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "Comment.",
            "nullable": true
          },
          "birthdate": {
            "type": "string",
            "description": "Date of birth.",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "email": {
            "type": "string",
            "description": "Email.",
            "nullable": true
          },
          "shouldReceiveOrderStatusNotifications": {
            "type": "boolean",
            "description": "Whether customer receives order status notification messages.",
            "nullable": true
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Common.Gender"
              }
            ],
            "description": "Gender."
          },
          "phone": {
            "type": "string",
            "description": "Customer phone.\r\n> Required if \"id\" == null.\r\n> Not required if \"id\" specified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Response.SplitOrderBetweenCashRegisters": {
        "title": " ",
        "enum": [
          "Disabled",
          "Allowed",
          "Required"
        ],
        "type": "string",
        "description": "Need to split order between cash registers."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrder": {
        "title": " ",
        "required": [
          "tableIds",
          "status",
          "sum",
          "number",
          "guestsInfo",
          "items",
          "orderType",
          "terminalGroupId",
          "processedPaymentsSum"
        ],
        "type": "object",
        "properties": {
          "tableIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Table IDs.\r\n            \r\nCan be obtained by `/api/1/reserve/available_restaurant_sections` operation."
          },
          "customer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.RegularCustomer"
              }
            ],
            "description": "Guest.\n\n > Allowed from version `7.5.2`.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Guest phone.\n\n > Allowed from version `7.5.2`.",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderStatus"
              }
            ],
            "description": "Order status."
          },
          "whenCreated": {
            "type": "string",
            "description": "Order creation date (terminal time zone).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "waiter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Employee"
              }
            ],
            "description": "Order waiter.",
            "nullable": true
          },
          "tabName": {
            "type": "string",
            "description": "Tab name (only for fastfood terminals group in tab mode).",
            "nullable": true
          },
          "splitOrderBetweenCashRegisters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Response.SplitOrderBetweenCashRegisters"
              }
            ],
            "description": "Need to split order between cash registers.\r\n<remarks>\r\nNot empty for orders in statuses New or Bill.\r\n</remarks>",
            "nullable": true
          },
          "menuId": {
            "type": "string",
            "description": "External menu ID.",
            "nullable": true
          },
          "priceCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.PriceCategory"
              }
            ],
            "description": "Price Category of the order.\n\n > Allowed from version `9.0.5`.",
            "nullable": true
          },
          "sum": {
            "type": "number",
            "description": "Order amount (after discount or surcharge).",
            "format": "double"
          },
          "number": {
            "type": "integer",
            "description": "Delivery No.",
            "format": "int32"
          },
          "sourceKey": {
            "type": "string",
            "description": "Delivery source.",
            "nullable": true
          },
          "whenBillPrinted": {
            "type": "string",
            "description": "Invoice printing time (guest bill time).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "whenClosed": {
            "type": "string",
            "description": "Delivery closing time (Local for delivery terminal).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "nullable": true,
            "example": "2019-08-24 14:15:22.123"
          },
          "conception": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.Conception"
              }
            ],
            "description": "Concept.",
            "nullable": true
          },
          "guestsInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.GuestsInfo"
              }
            ],
            "description": "Information about order guests.",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderItem"
            },
            "description": "Order items."
          },
          "combos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderCombo"
            },
            "description": "Combo.",
            "nullable": true
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.PaymentItem"
            },
            "description": "Payments.",
            "nullable": true
          },
          "tips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.TipsPaymentItem"
            },
            "description": "Tips.",
            "nullable": true
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.DiscountItem"
            },
            "description": "Discounts.",
            "nullable": true
          },
          "orderType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderType"
              }
            ],
            "description": "Order type.",
            "nullable": true
          },
          "terminalGroupId": {
            "type": "string",
            "description": "ID of the terminal group where the order is located.",
            "format": "uuid"
          },
          "processedPaymentsSum": {
            "type": "number",
            "description": "The amount of processed payments.\r\n<remarks>\r\nnull - only for unsupported POS versions.\r\n</remarks>\n\n > Allowed from version `7.6.0`.",
            "format": "double",
            "nullable": true
          },
          "loyaltyInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.LoyaltyInfo"
              }
            ],
            "description": "Information about Loyalty app.\r\n<remarks>\r\nnull - only for unsupported POS versions.\r\n</remarks>",
            "nullable": true
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.ExternalData"
            },
            "description": "Order external data.\n\n > Allowed from version `8.0.6`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo": {
        "title": " ",
        "required": [
          "id",
          "organizationId",
          "timestamp",
          "creationStatus"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Order ID.",
            "format": "uuid"
          },
          "posId": {
            "type": "string",
            "description": "POS order ID.",
            "format": "uuid",
            "nullable": true
          },
          "externalNumber": {
            "type": "string",
            "description": "Order external number.",
            "nullable": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "timestamp": {
            "type": "integer",
            "description": "Timestamp of most recent order change that took place on iikoTransport server.",
            "format": "int64"
          },
          "creationStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.CreationStatus"
              }
            ],
            "description": "Order creation status. In case of asynchronous creation, it allows to track the instance an order was validated/created in iikoFront."
          },
          "errorInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Errors.ErrorInfo"
              }
            ],
            "description": "Order creation error details.\r\n> Required only if \"creationStatus\"=\"Error\".",
            "nullable": true
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrder"
              }
            ],
            "description": "Order creation details.\r\n> Field is filled up if \"creationStatus\"=\"Success\".",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Order."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "orderInfo"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "orderInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo"
              }
            ],
            "description": "Order."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for a delivery order return."
      },
      "iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrdersResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "orders"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo"
            },
            "description": "Orders."
          }
        },
        "additionalProperties": false,
        "description": "Wrapping object (external) for return of orders."
      },
      "iikoTransport.PublicApi.Contracts.Terminals.AwakeTerminalGroupsRequest": {
        "title": " ",
        "required": [
          "organizationIds",
          "terminalGroupIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": " Organization IDs. \r\n\r\nCan be obtained by `/api/1/organizations` operation."
          },
          "terminalGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of terminal groups IDs. \r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request to awake terminal groups from sleep mode."
      },
      "iikoTransport.PublicApi.Contracts.Terminals.AwakeTerminalGroupsResponse": {
        "title": " ",
        "type": "object",
        "properties": {
          "successfullyProcessed": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Identifiers of successfully processed terminal groups.",
            "nullable": true
          },
          "failedProcessed": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Identifiers of terminal groups whose processing failed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response for request to awake terminal groups from sleep mode."
      },
      "iikoTransport.PublicApi.Contracts.Terminals.GetTerminalGroupsByOrganizationsRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations IDs for which information is requested. \r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request for list of terminal groups."
      },
      "iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup": {
        "title": " ",
        "required": [
          "id",
          "organizationId",
          "name",
          "address",
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Delivery group ID.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID to which delivery group belongs.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Terminal group name."
          },
          "address": {
            "type": "string",
            "description": "Group address. Not used.",
            "nullable": true,
            "deprecated": true
          },
          "timeZone": {
            "type": "string",
            "description": "Terminal group time zone.",
            "format": "date-span"
          },
          "externalData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.ExternalData"
            },
            "description": "Terminal group external data.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "DTO containing terminal groups details"
      },
      "iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupAliveInfo": {
        "title": " ",
        "required": [
          "isAlive",
          "terminalGroupId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "isAlive": {
            "type": "boolean",
            "description": "Attribute that shows whether a terminal is available to request processing."
          },
          "terminalGroupId": {
            "type": "string",
            "description": "ID of front group of terminals.\r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation.",
            "format": "uuid"
          },
          "organizationId": {
            "type": "string",
            "description": "Organizations ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "DTO containing terminal group availability details."
      },
      "iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsIsAliveRequest": {
        "title": " ",
        "required": [
          "terminalGroupIds"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization ID. Deprecated, use \"organizationIds\".",
            "format": "uuid",
            "nullable": true,
            "deprecated": true
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": " Organization IDs. \r\n\r\nCan be obtained by `/api/1/organizations` operation."
          },
          "terminalGroupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of terminal groups IDs. \r\n            \r\nCan be obtained by `/api/1/terminal_groups` operation."
          }
        },
        "additionalProperties": false,
        "description": "Request for terminal group availability details."
      },
      "iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsIsAliveResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "isAliveStatus"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "isAliveStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupAliveInfo"
            },
            "description": "Availability attribute of each requested terminal."
          }
        },
        "additionalProperties": false,
        "description": "DTO containing terminal group availability details."
      },
      "iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsRequest": {
        "title": " ",
        "required": [
          "organizationIds"
        ],
        "type": "object",
        "properties": {
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Organizations IDs for which information is requested. \r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "includeDisabled": {
            "type": "boolean",
            "description": "Attribute that shows that response contains disabled terminal groups.",
            "nullable": true
          },
          "returnExternalData": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "External data keys that have to be returned.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request for list of terminal groups."
      },
      "iikoTransport.PublicApi.Contracts.Terminals.TerminalGroupsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "terminalGroups",
          "terminalGroupsInSleep"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "terminalGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "List of terminal groups broken down by organizations."
          },
          "terminalGroupsInSleep": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Common.RmsItemsResponseWrapper`1[[iikoTransport.PublicApi.Contracts.Terminals.TerminalGroup, iikoTransport.PublicApi.Contracts, Version=9.4.6.2, Culture=neutral, PublicKeyToken=null]]"
            },
            "description": "Terminal groups are in sleep mode because they are not active.\r\n\r\nCan be awakened by `/api/1/terminal_groups/awake` operation."
          }
        },
        "additionalProperties": false,
        "description": "DTO containing terminal groups details."
      },
      "iikoTransport.PublicApi.Contracts.TipsTypes.TipsType": {
        "title": " ",
        "required": [
          "id",
          "name",
          "organizationIds",
          "orderServiceTypes",
          "paymentTypesIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Tips type ID.\r\n            \r\nCan be obtained by `/api/1/tips_types` operation.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Tips type name."
          },
          "organizationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Supported organizations IDs.\r\n            \r\nCan be obtained by `/api/1/organizations` operation."
          },
          "orderServiceTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.OrderTypes.OrderServiceType"
            },
            "description": "Supported order service types."
          },
          "paymentTypesIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Supported payment types IDs."
          }
        },
        "additionalProperties": false,
        "description": "Tips type."
      },
      "iikoTransport.PublicApi.Contracts.TipsTypes.TipsTypesResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "tipsTypes"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "tipsTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TipsTypes.TipsType"
            },
            "description": "List of tips types for rms group."
          }
        },
        "additionalProperties": false,
        "description": "Response to request for tips types by api-login`s rms group."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.DeliveryOrderErrorWebHookEventInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "eventType": {
            "type": "constant string 'DeliveryOrderError'",
            "description": "Event type.",
            "example": "DeliveryOrderError"
          },
          "eventTime": {
            "type": "string",
            "description": "Event date and time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "eventInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo"
              }
            ],
            "description": "Event details."
          }
        },
        "additionalProperties": false,
        "description": "WebHook notification about delivery order saving error."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.DeliveryOrderUpdateWebHookEventInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "eventType": {
            "type": "constant string 'DeliveryOrderUpdate'",
            "description": "Event type.",
            "example": "DeliveryOrderUpdate"
          },
          "eventTime": {
            "type": "string",
            "description": "Event date and time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "eventInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Deliveries.Response.Order.OrderInfo"
              }
            ],
            "description": "Event details."
          }
        },
        "additionalProperties": false,
        "description": "WebHook notification about delivery order update."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.GetWebHookSettingsRequest": {
        "title": " ",
        "required": [
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization UOC Id.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Request to get webhooks settings for specified organization."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.GetWebHookSettingsResponse": {
        "title": " ",
        "required": [
          "correlationId",
          "apiLoginName",
          "webHooksUri"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "apiLoginName": {
            "type": "string",
            "description": "Api login name.",
            "nullable": true
          },
          "webHooksUri": {
            "type": "string",
            "description": "Webhook handler url.",
            "nullable": true
          },
          "authToken": {
            "type": "string",
            "description": "Authorization token to pass to the webhook handler.",
            "nullable": true
          },
          "webHooksFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHooksFilter"
              }
            ],
            "description": "Webhooks filter.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to get webhooks settings for specified organization."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.PersonalShiftWebHookEventInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "eventType": {
            "type": "constant string 'PersonalShift'",
            "description": "Event type.",
            "example": "PersonalShift"
          },
          "eventTime": {
            "type": "string",
            "description": "Event date and time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "eventInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Employees.PersonalShift"
              }
            ],
            "description": "Event details."
          }
        },
        "additionalProperties": false,
        "description": "WebHook notification about employee personal shift update."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.ReserveErrorWebHookEventInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "eventType": {
            "type": "constant string 'ReserveError'",
            "description": "Event type.",
            "example": "ReserveError"
          },
          "eventTime": {
            "type": "string",
            "description": "Event date and time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "eventInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo"
              }
            ],
            "description": "Event details."
          }
        },
        "additionalProperties": false,
        "description": "WebHook notification about reserve saving error."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.ReserveUpdateWebHookEventInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "eventType": {
            "type": "constant string 'ReserveUpdate'",
            "description": "Event type.",
            "example": "ReserveUpdate"
          },
          "eventTime": {
            "type": "string",
            "description": "Event date and time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "eventInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Reserves.ReserveInfo"
              }
            ],
            "description": "Event details."
          }
        },
        "additionalProperties": false,
        "description": "WebHook notification about reserve update."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.StopListUpdateWebHookEventInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "eventType": {
            "type": "constant string 'StopListUpdate'",
            "description": "Event type.",
            "example": "StopListUpdate"
          },
          "eventTime": {
            "type": "string",
            "description": "Event date and time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "eventInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.StopLists.WebHookOnStopListChangeData"
              }
            ],
            "description": "Event details."
          }
        },
        "additionalProperties": false,
        "description": "WebHook notification about stop list update."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.TableOrderErrorWebHookEventInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "eventType": {
            "type": "constant string 'TableOrderError'",
            "description": "Event type.",
            "example": "TableOrderError"
          },
          "eventTime": {
            "type": "string",
            "description": "Event date and time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "eventInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo"
              }
            ],
            "description": "Event details."
          }
        },
        "additionalProperties": false,
        "description": "WebHook notification about table order saving error."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.TableOrderUpdateWebHookEventInfo": {
        "title": " ",
        "type": "object",
        "properties": {
          "eventType": {
            "type": "constant string 'TableOrderUpdate'",
            "description": "Event type.",
            "example": "TableOrderUpdate"
          },
          "eventTime": {
            "type": "string",
            "description": "Event date and time (UTC).",
            "format": "yyyy-MM-dd HH:mm:ss.fff",
            "example": "2019-08-24 14:15:22.123"
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "correlationId": {
            "type": "string",
            "description": "Operation ID.",
            "format": "uuid"
          },
          "eventInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.TableOrders.Response.TableOrderInfo"
              }
            ],
            "description": "Event details."
          }
        },
        "additionalProperties": false,
        "description": "WebHook notification about table order update."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.UpdateWebHookSettingsRequest": {
        "title": " ",
        "required": [
          "organizationId",
          "webHooksUri"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization UOC Id.\r\n            \r\nCan be obtained by `/api/1/organizations` operation.",
            "format": "uuid"
          },
          "webHooksUri": {
            "type": "string",
            "description": "Webhook handler url."
          },
          "authToken": {
            "type": "string",
            "description": "Authorization token to pass to the webhook handler.",
            "nullable": true
          },
          "webHooksFilter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.Integration.WebHooksFilters.WebHooksFilter"
              }
            ],
            "description": "Webhooks filter.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request to add or update webhooks settings for listed api logins of the specified organization."
      },
      "iikoTransport.PublicApi.Contracts.WebHooks.WebHookEventType": {
        "title": " ",
        "enum": [
          "DeliveryOrderUpdate",
          "DeliveryOrderError",
          "ReserveUpdate",
          "ReserveError",
          "TableOrderUpdate",
          "TableOrderError",
          "StopListUpdate",
          "PersonalShift",
          "KitchenOrderUpdate",
          "NomenclatureUpdate",
          "BusinessHoursAndMappingUpdate"
        ],
        "type": "string",
        "description": "Types of events which can be notified by a webhook."
      },
      "ModifierRestrictionsDto": {
        "type": "object",
        "properties": {
          "minQuantity": {
            "type": "integer",
            "description": "Minimum amount"
          },
          "maxQuantity": {
            "type": "integer",
            "description": "Maximum amount"
          },
          "freeQuantity": {
            "type": "integer",
            "description": "Amount free of charge"
          },
          "byDefault": {
            "type": "integer",
            "description": "Default amount"
          }
        }
      },
      "NutritionInfoDto": {
        "type": "object"
      },
      "TagDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "TaxCategoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "percentage": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "TransportItemDto": {
        "type": "object",
        "properties": {
          "itemSizes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportItemSizeDto"
            }
          },
          "sku": {
            "type": "string",
            "description": "Product code",
            "example": "002345-35cm"
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "example": "Chicken Parmegiano"
          },
          "description": {
            "type": "string",
            "description": "Product description",
            "example": "Delicate taste, juicy chicken fillet, mushrooms, Cheddar cheese and Mozzarella cheese, oregano, Parmegiano sauce"
          },
          "allergenGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllergenGroupDto"
            }
          },
          "itemId": {
            "title": "itemId",
            "type": "string",
            "description": "Product ID",
            "format": "uuid"
          },
          "modifierSchemaId": {
            "title": "modifierSchemaId",
            "type": "string",
            "description": "Modifier schema ID",
            "format": "uuid"
          },
          "taxCategory": {
            "$ref": "#/components/schemas/TaxCategoryDto"
          },
          "orderItemType": {
            "enum": [
              "Product",
              "Compound"
            ],
            "type": "string",
            "description": "Product or compound. Depends on modifiers scheme existence",
            "format": "enum"
          }
        }
      },
      "TransportItemSizeDto": {
        "type": "object",
        "properties": {
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportPriceDto"
            }
          },
          "itemModifierGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportModifierGroupDto"
            }
          },
          "sku": {
            "type": "string",
            "description": "Unique size code, consists of the product code and the name of the size, if the product has one size, then the size code will be equal to the product code"
          },
          "sizeCode": {
            "type": "string"
          },
          "sizeName": {
            "type": "string",
            "description": "Name of the product size, the name can be empty if there is only one size in the list"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether it is a default size of the product. If the product has one size, then the parameter will be true, if the product has several sizes, none of them can be default."
          },
          "portionWeightGrams": {
            "type": "number",
            "description": "Size's weight",
            "format": "float",
            "example": 0
          },
          "sizeId": {
            "title": "sizeId",
            "type": "string",
            "description": "ID size, can be empty if the default size is selected and it is the only size in the list",
            "format": "uuid"
          },
          "nutritionPerHundredGrams": {
            "$ref": "#/components/schemas/NutritionInfoDto"
          },
          "buttonImageUrl": {
            "title": "buttonImageUrl",
            "type": "string",
            "description": "links to images",
            "example": "https://102922.selcdn.ru/ecomm/someimage.png"
          },
          "buttonImageCroppedUrl": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "links to cropped images",
              "example": "https://102922.selcdn.ru/ecomm/someimage.png"
            }
          }
        }
      },
      "TransportMenuCategoryDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportItemDto"
            }
          },
          "id": {
            "type": "string",
            "description": "ID of the category of the external menu",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Category name of the external menu"
          },
          "description": {
            "type": "string",
            "description": "Category description"
          },
          "buttonImageUrl": {
            "type": "string",
            "description": "Links to images",
            "example": "https://102922.selcdn.ru/ecomm/someimage.png"
          },
          "headerImageUrl": {
            "type": "string",
            "description": "Description header for the images"
          }
        }
      },
      "TransportModifierGroupDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportModifierItemDto"
            }
          },
          "name": {
            "type": "string",
            "description": "Modifiers group name"
          },
          "description": {
            "type": "string",
            "description": "Modifiers group description"
          },
          "restrictions": {
            "$ref": "#/components/schemas/ModifierRestrictionsDto"
          },
          "canBeDivided": {
            "type": "boolean",
            "description": "Whether the modifier can be splitted"
          },
          "itemGroupId": {
            "title": "itemGroupId",
            "type": "string",
            "description": "Modifiers group id",
            "format": "uuid"
          },
          "childModifiersHaveMinMaxRestrictions": {
            "type": "boolean",
            "description": "Whether child modifiers can have their own restrictions, or only group ones"
          },
          "sku": {
            "type": "string",
            "description": "Modifiers group code"
          }
        }
      },
      "TransportModifierItemDto": {
        "type": "object",
        "properties": {
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransportPriceDto"
            }
          },
          "sku": {
            "type": "string",
            "description": "Modifier's code"
          },
          "name": {
            "type": "string",
            "description": "Modifier's name"
          },
          "description": {
            "type": "string",
            "description": "Modifier's description"
          },
          "buttonImage": {
            "type": "string",
            "description": "Links to images"
          },
          "restrictions": {
            "$ref": "#/components/schemas/ModifierRestrictionsDto"
          },
          "allergenGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllergenGroupDto"
            }
          },
          "nutritionPerHundredGrams": {
            "$ref": "#/components/schemas/NutritionInfoDto"
          },
          "portionWeightGrams": {
            "type": "number",
            "description": "Modifier's weight in gramms",
            "format": "float",
            "example": 0
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagDto"
            }
          },
          "itemId": {
            "title": "itemId",
            "type": "string",
            "description": "Modifier's Id",
            "format": "uuid"
          }
        }
      },
      "TransportPriceDto": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "description": "Organization id"
          },
          "price": {
            "type": "number",
            "description": "Product size prices for the organization, if the value is null, then the product/size is not for sale, the price always belongs to the price category that was selected at the time of the request",
            "format": "float",
            "example": 20.5
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authorization",
      "description": "Authorization API."
    },
    {
      "name": "Banquets/reserves",
      "description": "Banquets/reserves API."
    },
    {
      "name": "Deliveries: Create and update",
      "description": "Create and update deliveries API."
    },
    {
      "name": "Deprecated",
      "description": ""
    },
    {
      "name": "Notifications",
      "description": "Notifications API."
    },
    {
      "name": "Orders",
      "description": "Orders API."
    },
    {
      "name": "Webhooks",
      "description": "Webhook notifications. Webhook handlers can be registered by calling the `POST api/1/webhooks/update_settings` method or in the 'iikoTransport API' iikoWeb application."
    },
    {
      "name": "Deliveries: Retrieve",
      "description": "Get deliveries API."
    },
    {
      "name": "Organizations",
      "description": "Organizations API."
    },
    {
      "name": "Addresses",
      "description": "Regions/cities/streets API."
    },
    {
      "name": "Terminal groups",
      "description": "Terminal groups API."
    },
    {
      "name": "Delivery restrictions",
      "description": "Delivery restrictions API."
    },
    {
      "name": "Dictionaries",
      "description": "Dictionaries API."
    },
    {
      "name": "Menu",
      "description": "Menu API."
    },
    {
      "name": "Marketing sources",
      "description": "Marketing sources API."
    },
    {
      "name": "Operations",
      "description": "Operations API."
    },
    {
      "name": "Drafts",
      "description": "Drafts API."
    },
    {
      "name": "Employees",
      "description": "Employees API."
    },
    {
      "name": "Discounts and promotions",
      "description": "Loyalty systems API."
    },
    {
      "name": "Customer categories",
      "description": "Loyalty systems API."
    },
    {
      "name": "Customers",
      "description": "Loyalty systems API."
    },
    {
      "name": "Messages",
      "description": "Loyalty systems API."
    },
    {
      "name": "Report",
      "description": "Loyalty systems API."
    }
  ],
  "x-tagGroups": [
    {
      "name": "General",
      "tags": [
        "Authorization",
        "Notifications",
        "Organizations",
        "Terminal groups",
        "Dictionaries",
        "Menu",
        "Operations",
        "Employees"
      ]
    },
    {
      "name": "Delivery",
      "tags": [
        "Deliveries: Create and update",
        "Deliveries: Retrieve",
        "Addresses",
        "Delivery restrictions",
        "Marketing sources",
        "Drafts"
      ]
    },
    {
      "name": "Orders",
      "tags": [
        "Orders"
      ]
    },
    {
      "name": "Reserves",
      "tags": [
        "Banquets/reserves"
      ]
    },
    {
      "name": "WebHooks",
      "tags": [
        "Webhooks"
      ]
    },
    {
      "name": "Deprecated",
      "tags": [
        "Deprecated"
      ]
    },
    {
      "name": "Loyalty and discounts",
      "tags": [
        "Discounts and promotions",
        "Customer categories",
        "Customers",
        "Messages",
        "Report"
      ]
    }
  ],
  "x-webhooks": {
    "iikoTransport.PublicApi.Contracts.WebHooks.DeliveryOrderUpdateWebHookEventInfo": {
      "post": {
        "tags": [
          "Webhooks",
          "Deliveries: Create and update"
        ],
        "summary": "WebHook notification about delivery order update.",
        "description": "This notification is sent when a delivery order is updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.DeliveryOrderUpdateWebHookEventInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebHook handler must return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "iikoTransport.PublicApi.Contracts.WebHooks.DeliveryOrderErrorWebHookEventInfo": {
      "post": {
        "tags": [
          "Webhooks",
          "Deliveries: Create and update"
        ],
        "summary": "WebHook notification about delivery order saving error.",
        "description": "This notification is sent when an error occurs while saving a delivery order.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.DeliveryOrderErrorWebHookEventInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebHook handler must return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "iikoTransport.PublicApi.Contracts.WebHooks.ReserveUpdateWebHookEventInfo": {
      "post": {
        "tags": [
          "Webhooks",
          "Banquets/reserves"
        ],
        "summary": "WebHook notification about reserve update.",
        "description": "This notification is sent when a reserve is updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.ReserveUpdateWebHookEventInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebHook handler must return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "iikoTransport.PublicApi.Contracts.WebHooks.ReserveErrorWebHookEventInfo": {
      "post": {
        "tags": [
          "Webhooks",
          "Banquets/reserves"
        ],
        "summary": "WebHook notification about reserve saving error.",
        "description": "This notification is sent when an error occurs while saving a reserve.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.ReserveErrorWebHookEventInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebHook handler must return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "iikoTransport.PublicApi.Contracts.WebHooks.TableOrderUpdateWebHookEventInfo": {
      "post": {
        "tags": [
          "Webhooks",
          "Orders"
        ],
        "summary": "WebHook notification about table order update.",
        "description": "This notification is sent when a table order is updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.TableOrderUpdateWebHookEventInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebHook handler must return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "iikoTransport.PublicApi.Contracts.WebHooks.TableOrderErrorWebHookEventInfo": {
      "post": {
        "tags": [
          "Webhooks",
          "Orders"
        ],
        "summary": "WebHook notification about table order saving error.",
        "description": "This notification is sent when an error occurs while saving a table order.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.TableOrderErrorWebHookEventInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebHook handler must return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "iikoTransport.PublicApi.Contracts.WebHooks.StopListUpdateWebHookEventInfo": {
      "post": {
        "tags": [
          "Webhooks",
          "Menu"
        ],
        "summary": "WebHook notification about stop list update.",
        "description": "This notification is sent when a stop list is updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.StopListUpdateWebHookEventInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebHook handler must return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    },
    "iikoTransport.PublicApi.Contracts.WebHooks.PersonalShiftWebHookEventInfo": {
      "post": {
        "tags": [
          "Webhooks",
          "Employees"
        ],
        "summary": "WebHook notification about personal shift update.",
        "description": "This notification is sent when a personal shift is updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/iikoTransport.PublicApi.Contracts.WebHooks.PersonalShiftWebHookEventInfo"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "WebHook handler must return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  }
}