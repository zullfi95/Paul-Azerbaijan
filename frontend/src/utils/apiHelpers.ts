import { getApiUrl } from '../config/api';

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
export interface StandardApiResponse<T> {
  success: boolean;
  data?: T;
  message?: string;
  errors?: Record<string, string[]>;
}

export interface PaginatedData<T> {
  data: T[];
  current_page?: number;
  last_page?: number;
  per_page?: number;
  total?: number;
}

// function getCookie(name: string): string | null {
//   if (typeof document === 'undefined') return null;
//   const match = document.cookie.match(new RegExp('(?:^|; )' + name.replace(/([.$?*|{}()\[\]\\\/\+^])/g, '\\$1') + '=([^;]*)'));
//   return match ? match[1] : null;
// }

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –æ—Ç–≤–µ—Ç–æ–≤
export function extractApiData<T>(response: { data?: T[]; [key: string]: unknown } | T[]): T[] {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤
  if (Array.isArray(response)) {
    return response;
  }
  
  if (response?.data) {
    if (Array.isArray(response.data)) {
      return response.data;
    }
    if (typeof response.data === 'object' && response.data !== null && 'data' in response.data) {
      const nestedData = (response.data as { data?: T[] }).data;
      if (Array.isArray(nestedData)) {
        return nestedData;
      }
    }
  }
  
  return [];
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
export function extractApiItem<T>(response: { data?: T; [key: string]: unknown } | T): T | null {
  if (typeof response === 'object' && response !== null && 'data' in response) {
    return (response as { data?: T }).data || null;
  }
  return response as T;
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
export async function makeApiRequest<T>(
  endpoint: string,
  options: {
    method?: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
    body?: string | FormData;
    token?: string;
  } = {}
): Promise<StandardApiResponse<T>> {
  const { method = 'GET', body, token } = options;

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage –∏–ª–∏ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const authToken = token || (typeof window !== 'undefined' ? localStorage.getItem('auth_token') : null);

    console.log('üîç API Request:', {
      url: getApiUrl(endpoint),
      method,
      hasToken: !!authToken,
      endpoint
    });

    const response = await fetch(getApiUrl(endpoint), {
      method,
      headers: {
        'Accept': 'application/json',
        ...(body ? { 'Content-Type': 'application/json' } : {}),
        ...(authToken ? { 'Authorization': `Bearer ${authToken}` } : {}),
      },
      credentials: 'include', // –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CSRF, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      body: body ? JSON.stringify(body) : undefined,
    });

    console.log('üì° API Response:', {
      status: response.status,
      statusText: response.statusText,
      url: response.url
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      return {
        success: false,
        message: errorData.message || `HTTP ${response.status}`,
        errors: errorData.errors,
      };
    }

    const data = await response.json();
    return {
      success: true,
      data: data.data || data,
      message: data.message,
    };
  } catch (error) {
    return {
      success: false,
      message: error instanceof Error ? error.message : 'Network error',
    };
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export function handleApiError(error: StandardApiResponse<unknown>, fallbackMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'): string {
  if (error.errors) {
    const errorMessages = Object.entries(error.errors)
      .map(([field, messages]) => `${field}: ${Array.isArray(messages) ? messages.join(', ') : messages}`)
      .join('\n');
    return errorMessages;
  }
  
  return error.message || fallbackMessage;
}

