/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∫–µ–π—Ç–µ—Ä–∏–Ω–≥–∞
 */

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
export const mockCartItem = {
  id: '1',
  name: 'Test Croissant',
  description: 'Delicious croissant',
  price: 5.50,
  quantity: 2,
  image: '/images/croissant.jpg',
  category: 'Brunch Menu',
  available: true,
  isSet: false
};

export const mockOrderData = {
  client_type: 'one_time' as const,
  company_name: 'Test Company',
  customer: {
    first_name: 'John',
    last_name: 'Doe',
    email: 'john@example.com',
    phone: '+1234567890'
  },
  menu_items: [mockCartItem],
  comment: 'Test order',
  delivery_date: '2024-12-31',
  delivery_time: '12:00',
  delivery_type: 'delivery' as const,
  delivery_address: '123 Test Street',
  delivery_cost: 0
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface CartItem {
  id: string;
  quantity: number;
  [key: string]: unknown;
}

interface TestItem {
  id: string;
  [key: string]: unknown;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const testCartOperations = {
  addItem: (cart: CartItem[], item: TestItem) => {
    const existingItem = cart.find(cartItem => cartItem.id === item.id);
    if (existingItem) {
      existingItem.quantity += 1;
    } else {
      cart.push({ ...item, quantity: 1 });
    }
    return cart;
  },

  removeItem: (cart: CartItem[], itemId: string) => {
    return cart.filter(item => item.id !== itemId);
  },

  updateQuantity: (cart: CartItem[], itemId: string, quantity: number) => {
    return cart.map(item => 
      item.id === itemId ? { ...item, quantity } : item
    ).filter(item => item.quantity > 0);
  },

  getTotalPrice: (cart: CartItem[]) => {
    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);
  },

  getTotalItems: (cart: CartItem[]) => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  }
};

export const testNavigation = {
  goToCart: () => '/cart',
  goToOrder: () => '/catering/order',
  goToCatering: () => '/catering'
};

export const testFormValidation = {
  validateOrderForm: (formData: Record<string, unknown>) => {
    const errors: Record<string, string> = {};
    
    if (!formData.firstName) errors.firstName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    if (!formData.lastName) errors.lastName = '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    if (!formData.email) errors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    if (!formData.phone) errors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    if (!formData.eventAddress) errors.eventAddress = '–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    if (!formData.eventDate) errors.eventDate = '–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    if (!formData.eventTime) errors.eventTime = '–í—Ä–µ–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    
    return {
      isValid: Object.keys(errors).length === 0,
      errors
    };
  }
};

export const testApiCalls = {
  createOrder: async (orderData: Record<string, unknown>) => {
    // –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞
    const mockResponse = {
      ok: true,
      json: () => Promise.resolve({
        success: true,
        data: {
          id: 123,
          order_number: 'ORD-2024-001',
          status: 'submitted',
          ...orderData
        }
      })
    };
    
    return mockResponse;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ—Ç–æ–∫–∞
export const testCompleteFlow = () => {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∫–µ–π—Ç–µ—Ä–∏–Ω–≥–∞...');
  
  // 1. –¢–µ—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä–∑–∏–Ω–æ–π...');
  let cart: CartItem[] = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
  cart = testCartOperations.addItem(cart, mockCartItem);
  console.log('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É:', cart);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const totalPrice = testCartOperations.getTotalPrice(cart);
  const totalItems = testCartOperations.getTotalItems(cart);
  console.log(`‚úÖ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalItems}`);
  
  // 2. –¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é...');
  const cartPath = testNavigation.goToCart();
  const orderPath = testNavigation.goToOrder();
  console.log(`‚úÖ –ü—É—Ç—å –∫ –∫–æ—Ä–∑–∏–Ω–µ: ${cartPath}`);
  console.log(`‚úÖ –ü—É—Ç—å –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é: ${orderPath}`);
  
  // 3. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
  console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º—ã...');
  const validFormData = {
    firstName: 'John',
    lastName: 'Doe',
    email: 'john@example.com',
    phone: '+1234567890',
    eventAddress: '123 Test Street',
    eventDate: '2024-12-31',
    eventTime: '12:00'
  };
  
  const validation = testFormValidation.validateOrderForm(validFormData);
  console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã:', validation);
  
  // 4. –¢–µ—Å—Ç API
  console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –≤—ã–∑–æ–≤...');
  testApiCalls.createOrder(mockOrderData).then(response => {
    response.json().then(data => {
      console.log('‚úÖ API –æ—Ç–≤–µ—Ç:', data);
    });
  });
  
  console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  
  return {
    cart,
    totalPrice,
    totalItems,
    validation,
    paths: {
      cart: cartPath,
      order: orderPath
    }
  };
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  (window as Record<string, unknown>).testCateringFlow = testCompleteFlow;
}
